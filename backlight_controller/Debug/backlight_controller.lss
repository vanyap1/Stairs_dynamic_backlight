
backlight_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  000014ee  00001582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  008001da  008001da  0000165c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022ff  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001162  00000000  00000000  00003c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000119d  00000000  00000000  00004d89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000057c  00000000  00000000  00005f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a18  00000000  00000000  000064a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013ba  00000000  00000000  00006ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00008276  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__vector_1>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__vector_18>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_20>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_21>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__vector_40>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ee ee       	ldi	r30, 0xEE	; 238
      c8:	f4 e1       	ldi	r31, 0x14	; 20
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	aa 3d       	cpi	r26, 0xDA	; 218
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	22 e0       	ldi	r18, 0x02	; 2
      d8:	aa ed       	ldi	r26, 0xDA	; 218
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a3 36       	cpi	r26, 0x63	; 99
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 92 05 	call	0xb24	; 0xb24 <main>
      ea:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_21>:

uint16_t get_adc(uint8_t source){
	adc_pin_select(source);
	//uint16_t adc_tmp_data = adc_convert();
	return adc_convert();
}
      f2:	1f 92       	push	r1
      f4:	0f 92       	push	r0
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	0f 92       	push	r0
      fa:	11 24       	eor	r1, r1
      fc:	8f 93       	push	r24
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     104:	8f 91       	pop	r24
     106:	0f 90       	pop	r0
     108:	0f be       	out	0x3f, r0	; 63
     10a:	0f 90       	pop	r0
     10c:	1f 90       	pop	r1
     10e:	18 95       	reti

00000110 <adc_init>:
     110:	ec e7       	ldi	r30, 0x7C	; 124
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	80 6c       	ori	r24, 0xC0	; 192
     118:	80 83       	st	Z, r24
     11a:	ea e7       	ldi	r30, 0x7A	; 122
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	8f 68       	ori	r24, 0x8F	; 143
     122:	80 83       	st	Z, r24
     124:	08 95       	ret

00000126 <adc_pin_select>:
     126:	ec e7       	ldi	r30, 0x7C	; 124
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	90 81       	ld	r25, Z
     12c:	90 7f       	andi	r25, 0xF0	; 240
     12e:	90 83       	st	Z, r25
     130:	90 81       	ld	r25, Z
     132:	89 2b       	or	r24, r25
     134:	80 83       	st	Z, r24
     136:	08 95       	ret

00000138 <adc_convert>:
     138:	ea e7       	ldi	r30, 0x7A	; 122
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	80 68       	ori	r24, 0x80	; 128
     140:	80 83       	st	Z, r24
     142:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
     14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     150:	88 23       	and	r24, r24
     152:	e1 f3       	breq	.-8      	; 0x14c <adc_convert+0x14>
     154:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     158:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     15c:	ea e7       	ldi	r30, 0x7A	; 122
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	90 81       	ld	r25, Z
     162:	9f 77       	andi	r25, 0x7F	; 127
     164:	90 83       	st	Z, r25
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	98 2f       	mov	r25, r24
     16a:	88 27       	eor	r24, r24
     16c:	82 2b       	or	r24, r18
     16e:	08 95       	ret

00000170 <get_mVolt>:

uint16_t get_mVolt(uint8_t source){
	adc_pin_select(source);
     170:	0e 94 93 00 	call	0x126	; 0x126 <adc_pin_select>
	//uint16_t adc_tmp_data = adc_convert();
	return ADC_VOLT(adc_convert());
     174:	0e 94 9c 00 	call	0x138	; 0x138 <adc_convert>
     178:	bc 01       	movw	r22, r24
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 54 06 	call	0xca8	; 0xca8 <__floatunsisf>
     182:	2d ec       	ldi	r18, 0xCD	; 205
     184:	3e e1       	ldi	r19, 0x1E	; 30
     186:	48 e9       	ldi	r20, 0x98	; 152
     188:	5f e3       	ldi	r21, 0x3F	; 63
     18a:	0e 94 ba 06 	call	0xd74	; 0xd74 <__mulsf3>
     18e:	0e 94 25 06 	call	0xc4a	; 0xc4a <__fixunssfsi>
}
     192:	cb 01       	movw	r24, r22
     194:	08 95       	ret

00000196 <set_pin_level>:

}


void set_port_level(gpio *GPIOx, const uint8_t mask){
	*GPIOx->port=mask;
     196:	66 23       	and	r22, r22
     198:	99 f0       	breq	.+38     	; 0x1c0 <set_pin_level+0x2a>
     19a:	dc 01       	movw	r26, r24
     19c:	ed 91       	ld	r30, X+
     19e:	fc 91       	ld	r31, X
     1a0:	11 97       	sbiw	r26, 0x01	; 1
     1a2:	21 e0       	ldi	r18, 0x01	; 1
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	a9 01       	movw	r20, r18
     1a8:	12 96       	adiw	r26, 0x02	; 2
     1aa:	0c 90       	ld	r0, X
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <set_pin_level+0x1c>
     1ae:	44 0f       	add	r20, r20
     1b0:	55 1f       	adc	r21, r21
     1b2:	0a 94       	dec	r0
     1b4:	e2 f7       	brpl	.-8      	; 0x1ae <set_pin_level+0x18>
     1b6:	ca 01       	movw	r24, r20
     1b8:	90 81       	ld	r25, Z
     1ba:	89 2b       	or	r24, r25
     1bc:	80 83       	st	Z, r24
     1be:	08 95       	ret
     1c0:	dc 01       	movw	r26, r24
     1c2:	ed 91       	ld	r30, X+
     1c4:	fc 91       	ld	r31, X
     1c6:	11 97       	sbiw	r26, 0x01	; 1
     1c8:	21 e0       	ldi	r18, 0x01	; 1
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	a9 01       	movw	r20, r18
     1ce:	12 96       	adiw	r26, 0x02	; 2
     1d0:	0c 90       	ld	r0, X
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <set_pin_level+0x42>
     1d4:	44 0f       	add	r20, r20
     1d6:	55 1f       	adc	r21, r21
     1d8:	0a 94       	dec	r0
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <set_pin_level+0x3e>
     1dc:	ca 01       	movw	r24, r20
     1de:	80 95       	com	r24
     1e0:	90 81       	ld	r25, Z
     1e2:	89 23       	and	r24, r25
     1e4:	80 83       	st	Z, r24
     1e6:	08 95       	ret

000001e8 <set_pin_dir>:
     1e8:	fc 01       	movw	r30, r24
     1ea:	30 81       	ld	r19, Z
     1ec:	21 81       	ldd	r18, Z+1	; 0x01
     1ee:	61 30       	cpi	r22, 0x01	; 1
     1f0:	99 f0       	breq	.+38     	; 0x218 <set_pin_dir+0x30>
     1f2:	18 f0       	brcs	.+6      	; 0x1fa <set_pin_dir+0x12>
     1f4:	62 30       	cpi	r22, 0x02	; 2
     1f6:	f1 f0       	breq	.+60     	; 0x234 <set_pin_dir+0x4c>
     1f8:	08 95       	ret
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	02 80       	ldd	r0, Z+2	; 0x02
     200:	02 c0       	rjmp	.+4      	; 0x206 <set_pin_dir+0x1e>
     202:	88 0f       	add	r24, r24
     204:	99 1f       	adc	r25, r25
     206:	0a 94       	dec	r0
     208:	e2 f7       	brpl	.-8      	; 0x202 <set_pin_dir+0x1a>
     20a:	e3 2f       	mov	r30, r19
     20c:	f2 2f       	mov	r31, r18
     20e:	80 95       	com	r24
     210:	92 91       	ld	r25, -Z
     212:	89 23       	and	r24, r25
     214:	80 83       	st	Z, r24
     216:	08 95       	ret
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 80       	ldd	r0, Z+2	; 0x02
     21e:	02 c0       	rjmp	.+4      	; 0x224 <set_pin_dir+0x3c>
     220:	88 0f       	add	r24, r24
     222:	99 1f       	adc	r25, r25
     224:	0a 94       	dec	r0
     226:	e2 f7       	brpl	.-8      	; 0x220 <set_pin_dir+0x38>
     228:	e3 2f       	mov	r30, r19
     22a:	f2 2f       	mov	r31, r18
     22c:	92 91       	ld	r25, -Z
     22e:	89 2b       	or	r24, r25
     230:	80 83       	st	Z, r24
     232:	08 95       	ret
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	ac 01       	movw	r20, r24
     23a:	02 80       	ldd	r0, Z+2	; 0x02
     23c:	02 c0       	rjmp	.+4      	; 0x242 <set_pin_dir+0x5a>
     23e:	44 0f       	add	r20, r20
     240:	55 1f       	adc	r21, r21
     242:	0a 94       	dec	r0
     244:	e2 f7       	brpl	.-8      	; 0x23e <set_pin_dir+0x56>
     246:	a3 2f       	mov	r26, r19
     248:	b2 2f       	mov	r27, r18
     24a:	40 95       	com	r20
     24c:	2e 91       	ld	r18, -X
     24e:	42 23       	and	r20, r18
     250:	4c 93       	st	X, r20
     252:	a0 81       	ld	r26, Z
     254:	b1 81       	ldd	r27, Z+1	; 0x01
     256:	02 80       	ldd	r0, Z+2	; 0x02
     258:	02 c0       	rjmp	.+4      	; 0x25e <set_pin_dir+0x76>
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	0a 94       	dec	r0
     260:	e2 f7       	brpl	.-8      	; 0x25a <set_pin_dir+0x72>
     262:	80 95       	com	r24
     264:	9c 91       	ld	r25, X
     266:	89 23       	and	r24, r25
     268:	8c 93       	st	X, r24
     26a:	08 95       	ret

0000026c <toggle_pin_level>:
}

void toggle_pin_level(gpio *GPIOx)
{
	uint8_t *tmp_port = GPIOx->port-2;
     26c:	dc 01       	movw	r26, r24
     26e:	ed 91       	ld	r30, X+
     270:	fc 91       	ld	r31, X
     272:	11 97       	sbiw	r26, 0x01	; 1
	*tmp_port = 1 << GPIOx->pin;
     274:	21 e0       	ldi	r18, 0x01	; 1
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	a9 01       	movw	r20, r18
     27a:	12 96       	adiw	r26, 0x02	; 2
     27c:	0c 90       	ld	r0, X
     27e:	02 c0       	rjmp	.+4      	; 0x284 <toggle_pin_level+0x18>
     280:	44 0f       	add	r20, r20
     282:	55 1f       	adc	r21, r21
     284:	0a 94       	dec	r0
     286:	e2 f7       	brpl	.-8      	; 0x280 <toggle_pin_level+0x14>
     288:	32 97       	sbiw	r30, 0x02	; 2
     28a:	40 83       	st	Z, r20
     28c:	08 95       	ret

0000028e <rtc_int_enable>:
};



void rtc_int_enable(rtc_date *RTCx , const uint16_t int_time){
	rtc_config_3[0] |= (1 << TIE);
     28e:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     292:	80 61       	ori	r24, 0x10	; 16
     294:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
	rtc_config_2[0] |= (1 << TD) | (1 << TE);
     298:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <rtc_config_2>
     29c:	81 61       	ori	r24, 0x11	; 17
     29e:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <rtc_config_2>
	
	twi_write(RTC_ADDR,TIMER_COUNTER0_REG,rtc_config_1,sizeof(rtc_config_1));
     2a2:	22 e0       	ldi	r18, 0x02	; 2
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	41 e0       	ldi	r20, 0x01	; 1
     2a8:	51 e0       	ldi	r21, 0x01	; 1
     2aa:	6b e0       	ldi	r22, 0x0B	; 11
     2ac:	82 e3       	ldi	r24, 0x32	; 50
     2ae:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <twi_write>
	twi_write(RTC_ADDR,EXT_REG,rtc_config_2,sizeof(rtc_config_2));
     2b2:	21 e0       	ldi	r18, 0x01	; 1
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	4b ed       	ldi	r20, 0xDB	; 219
     2b8:	51 e0       	ldi	r21, 0x01	; 1
     2ba:	6d e0       	ldi	r22, 0x0D	; 13
     2bc:	82 e3       	ldi	r24, 0x32	; 50
     2be:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <twi_write>
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
     2c2:	21 e0       	ldi	r18, 0x01	; 1
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	4a ed       	ldi	r20, 0xDA	; 218
     2c8:	51 e0       	ldi	r21, 0x01	; 1
     2ca:	6f e0       	ldi	r22, 0x0F	; 15
     2cc:	82 e3       	ldi	r24, 0x32	; 50
     2ce:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <twi_write>
     2d2:	08 95       	ret

000002d4 <BCDtoDEC>:
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
}

uint8_t BCDtoDEC(uint8_t val)
{
	return ((val / 0x10) * 10) + (val % 0x10);
     2d4:	98 2f       	mov	r25, r24
     2d6:	92 95       	swap	r25
     2d8:	9f 70       	andi	r25, 0x0F	; 15
     2da:	99 0f       	add	r25, r25
     2dc:	29 2f       	mov	r18, r25
     2de:	22 0f       	add	r18, r18
     2e0:	22 0f       	add	r18, r18
     2e2:	92 0f       	add	r25, r18
     2e4:	8f 70       	andi	r24, 0x0F	; 15
}
     2e6:	89 0f       	add	r24, r25
     2e8:	08 95       	ret

000002ea <rtc_sync>:
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
	
	
}

void rtc_sync(rtc_date *RTCx){
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	27 97       	sbiw	r28, 0x07	; 7
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	cd bf       	out	0x3d, r28	; 61
     302:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	twi_read(RTC_ADDR, 0x00, rtc_raw, sizeof(rtc_raw));
     304:	27 e0       	ldi	r18, 0x07	; 7
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	ae 01       	movw	r20, r28
     30a:	4f 5f       	subi	r20, 0xFF	; 255
     30c:	5f 4f       	sbci	r21, 0xFF	; 255
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	82 e3       	ldi	r24, 0x32	; 50
     312:	0e 94 61 03 	call	0x6c2	; 0x6c2 <twi_read>
	RTCx->second=BCDtoDEC(rtc_raw[0]);
     316:	89 81       	ldd	r24, Y+1	; 0x01
     318:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     31c:	f8 01       	movw	r30, r16
     31e:	80 83       	st	Z, r24
	RTCx->minute=BCDtoDEC(rtc_raw[1]);
     320:	8a 81       	ldd	r24, Y+2	; 0x02
     322:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     326:	f8 01       	movw	r30, r16
     328:	81 83       	std	Z+1, r24	; 0x01
	RTCx->hour=BCDtoDEC(rtc_raw[2]);
     32a:	8b 81       	ldd	r24, Y+3	; 0x03
     32c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     330:	f8 01       	movw	r30, r16
     332:	82 83       	std	Z+2, r24	; 0x02
	RTCx->dayofweek=rtc_raw[3];
     334:	8c 81       	ldd	r24, Y+4	; 0x04
     336:	87 83       	std	Z+7, r24	; 0x07
	RTCx->date=BCDtoDEC(rtc_raw[4]);
     338:	8d 81       	ldd	r24, Y+5	; 0x05
     33a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     33e:	f8 01       	movw	r30, r16
     340:	83 83       	std	Z+3, r24	; 0x03
	RTCx->month=BCDtoDEC(rtc_raw[5]);
     342:	8e 81       	ldd	r24, Y+6	; 0x06
     344:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     348:	f8 01       	movw	r30, r16
     34a:	84 83       	std	Z+4, r24	; 0x04
	RTCx->year=BCDtoDEC(rtc_raw[6]);
     34c:	8f 81       	ldd	r24, Y+7	; 0x07
     34e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	f8 01       	movw	r30, r16
     356:	96 83       	std	Z+6, r25	; 0x06
     358:	85 83       	std	Z+5, r24	; 0x05
}
     35a:	27 96       	adiw	r28, 0x07	; 7
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	08 95       	ret

00000370 <DECtoBCD>:
}

// BCDtoDEC -- convert decimal to binary-coded decimal (BCD)
uint8_t DECtoBCD(uint8_t val)
{
	return ((val / 10) * 0x10) + (val % 10);
     370:	9d ec       	ldi	r25, 0xCD	; 205
     372:	89 9f       	mul	r24, r25
     374:	91 2d       	mov	r25, r1
     376:	11 24       	eor	r1, r1
     378:	96 95       	lsr	r25
     37a:	96 95       	lsr	r25
     37c:	96 95       	lsr	r25
     37e:	39 2f       	mov	r19, r25
     380:	33 0f       	add	r19, r19
     382:	23 2f       	mov	r18, r19
     384:	22 0f       	add	r18, r18
     386:	22 0f       	add	r18, r18
     388:	23 0f       	add	r18, r19
     38a:	82 1b       	sub	r24, r18
     38c:	20 e1       	ldi	r18, 0x10	; 16
     38e:	92 9f       	mul	r25, r18
     390:	80 0d       	add	r24, r0
     392:	11 24       	eor	r1, r1
     394:	08 95       	ret

00000396 <rtc_set>:
	RTCx->dayofweek=rtc_raw[3];
	RTCx->date=BCDtoDEC(rtc_raw[4]);
	RTCx->month=BCDtoDEC(rtc_raw[5]);
	RTCx->year=BCDtoDEC(rtc_raw[6]);
}
void rtc_set(rtc_date *RTCx){
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	27 97       	sbiw	r28, 0x07	; 7
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	rtc_raw[0]=DECtoBCD(RTCx->second);
     3b0:	fc 01       	movw	r30, r24
     3b2:	80 81       	ld	r24, Z
     3b4:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3b8:	89 83       	std	Y+1, r24	; 0x01
	rtc_raw[1]=DECtoBCD(RTCx->minute);
     3ba:	f8 01       	movw	r30, r16
     3bc:	81 81       	ldd	r24, Z+1	; 0x01
     3be:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3c2:	8a 83       	std	Y+2, r24	; 0x02
	rtc_raw[2]=DECtoBCD(RTCx->hour);
     3c4:	f8 01       	movw	r30, r16
     3c6:	82 81       	ldd	r24, Z+2	; 0x02
     3c8:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3cc:	8b 83       	std	Y+3, r24	; 0x03
	rtc_raw[3]=RTCx->dayofweek;
     3ce:	f8 01       	movw	r30, r16
     3d0:	87 81       	ldd	r24, Z+7	; 0x07
     3d2:	8c 83       	std	Y+4, r24	; 0x04
	rtc_raw[4]=DECtoBCD(RTCx->date);
     3d4:	83 81       	ldd	r24, Z+3	; 0x03
     3d6:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3da:	8d 83       	std	Y+5, r24	; 0x05
	rtc_raw[5]=DECtoBCD(RTCx->month);
     3dc:	f8 01       	movw	r30, r16
     3de:	84 81       	ldd	r24, Z+4	; 0x04
     3e0:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3e4:	8e 83       	std	Y+6, r24	; 0x06
	rtc_raw[6]=DECtoBCD(RTCx->year);
     3e6:	f8 01       	movw	r30, r16
     3e8:	85 81       	ldd	r24, Z+5	; 0x05
     3ea:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3ee:	8f 83       	std	Y+7, r24	; 0x07
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
     3f0:	27 e0       	ldi	r18, 0x07	; 7
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	ae 01       	movw	r20, r28
     3f6:	4f 5f       	subi	r20, 0xFF	; 255
     3f8:	5f 4f       	sbci	r21, 0xFF	; 255
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	82 e3       	ldi	r24, 0x32	; 50
     3fe:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <twi_write>
}
     402:	27 96       	adiw	r28, 0x07	; 7
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	08 95       	ret

00000418 <led_board_sw_reset>:
#include "twi_hal.h" 
#include "tlc59_driver.h"



void led_board_sw_reset(uint8_t board_address){
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	63 97       	sbiw	r28, 0x13	; 19
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	18 2f       	mov	r17, r24
	uint8_t reset_cmd[] = {SWRST_byte_1, SWRST_byte_2};
     432:	85 ea       	ldi	r24, 0xA5	; 165
     434:	89 83       	std	Y+1, r24	; 0x01
     436:	8a e5       	ldi	r24, 0x5A	; 90
     438:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t init_led_pattern[16] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
     43a:	00 e1       	ldi	r16, 0x10	; 16
     43c:	ae 01       	movw	r20, r28
     43e:	4d 5f       	subi	r20, 0xFD	; 253
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	fa 01       	movw	r30, r20
     444:	80 2f       	mov	r24, r16
     446:	11 92       	st	Z+, r1
     448:	8a 95       	dec	r24
     44a:	e9 f7       	brne	.-6      	; 0x446 <led_board_sw_reset+0x2e>
	twi_write_batch_by_reg(board_address, PWM0 | 0xA0, init_led_pattern, sizeof(init_led_pattern));
     44c:	20 e1       	ldi	r18, 0x10	; 16
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	62 ea       	ldi	r22, 0xA2	; 162
     452:	81 2f       	mov	r24, r17
     454:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_write_batch_by_reg>
	twi_write_batch(board_address, reset_cmd, sizeof(reset_cmd));
     458:	42 e0       	ldi	r20, 0x02	; 2
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	be 01       	movw	r22, r28
     45e:	6f 5f       	subi	r22, 0xFF	; 255
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	81 2f       	mov	r24, r17
     464:	0e 94 29 04 	call	0x852	; 0x852 <twi_write_batch>
	uint8_t reg = (1 << OSC);
     468:	0b 8b       	std	Y+19, r16	; 0x13
	twi_write(board_address,MODE1, &reg,1);
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	ae 01       	movw	r20, r28
     470:	4d 5e       	subi	r20, 0xED	; 237
     472:	5f 4f       	sbci	r21, 0xFF	; 255
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	81 2f       	mov	r24, r17
     478:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <twi_write>
	//twi_write(board_address,MODE2, &reg,1);
	//twi_write(SWRST,TIMER_COUNTER0_REG,SWRST,1);
}
     47c:	63 96       	adiw	r28, 0x13	; 19
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	08 95       	ret

00000492 <led_board_init>:

uint8_t led_board_init(uint8_t board_address){
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	61 97       	sbiw	r28, 0x11	; 17
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	18 2f       	mov	r17, r24
	uint8_t init_cmd[] = {0xAA, 0xAA, 0xAA, 0xAA};
	uint8_t init_led_pattern[16] = {0x05,0x06,0x07,0x08,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
     4ac:	80 e1       	ldi	r24, 0x10	; 16
     4ae:	e5 e1       	ldi	r30, 0x15	; 21
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	de 01       	movw	r26, r28
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	01 90       	ld	r0, Z+
     4b8:	0d 92       	st	X+, r0
     4ba:	8a 95       	dec	r24
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <led_board_init+0x24>
	
	uint8_t reg = 0;
     4be:	19 8a       	std	Y+17, r1	; 0x11
	reg = 0;
	twi_write(board_address,MODE1, &reg,1);
     4c0:	21 e0       	ldi	r18, 0x01	; 1
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	ae 01       	movw	r20, r28
     4c6:	4f 5e       	subi	r20, 0xEF	; 239
     4c8:	5f 4f       	sbci	r21, 0xFF	; 255
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	81 2f       	mov	r24, r17
     4ce:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <twi_write>
	twi_write(board_address,MODE2, &reg,1);
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	ae 01       	movw	r20, r28
     4d8:	4f 5e       	subi	r20, 0xEF	; 239
     4da:	5f 4f       	sbci	r21, 0xFF	; 255
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	81 2f       	mov	r24, r17
     4e0:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <twi_write>
	twi_write_batch_by_reg(board_address, PWM0 | 0xA0, init_led_pattern, sizeof(init_led_pattern));
     4e4:	20 e1       	ldi	r18, 0x10	; 16
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	ae 01       	movw	r20, r28
     4ea:	4f 5f       	subi	r20, 0xFF	; 255
     4ec:	5f 4f       	sbci	r21, 0xFF	; 255
     4ee:	62 ea       	ldi	r22, 0xA2	; 162
     4f0:	81 2f       	mov	r24, r17
     4f2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_write_batch_by_reg>
	reg = 0x00;
     4f6:	19 8a       	std	Y+17, r1	; 0x11
	twi_write(board_address,GRPPWM,&reg,1);
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	ae 01       	movw	r20, r28
     4fe:	4f 5e       	subi	r20, 0xEF	; 239
     500:	5f 4f       	sbci	r21, 0xFF	; 255
     502:	62 e1       	ldi	r22, 0x12	; 18
     504:	81 2f       	mov	r24, r17
     506:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <twi_write>
	reg = 0xFF;
     50a:	8f ef       	ldi	r24, 0xFF	; 255
     50c:	89 8b       	std	Y+17, r24	; 0x11
	twi_write(board_address,GRPFREQ,&reg,1);
     50e:	21 e0       	ldi	r18, 0x01	; 1
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	ae 01       	movw	r20, r28
     514:	4f 5e       	subi	r20, 0xEF	; 239
     516:	5f 4f       	sbci	r21, 0xFF	; 255
     518:	63 e1       	ldi	r22, 0x13	; 19
     51a:	81 2f       	mov	r24, r17
     51c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <twi_write>
	reg = (2 << LDR0) | (2 << LDR1) | (2 << LDR2) | (2 << LDR3);
     520:	0a ea       	ldi	r16, 0xAA	; 170
     522:	09 8b       	std	Y+17, r16	; 0x11
	twi_write(board_address,LEDOUT0,&reg,1);
     524:	21 e0       	ldi	r18, 0x01	; 1
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	ae 01       	movw	r20, r28
     52a:	4f 5e       	subi	r20, 0xEF	; 239
     52c:	5f 4f       	sbci	r21, 0xFF	; 255
     52e:	64 e1       	ldi	r22, 0x14	; 20
     530:	81 2f       	mov	r24, r17
     532:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <twi_write>
	reg = (2 << LDR4) | (2 << LDR5) | (2 << LDR6) | (2 << LDR7);
     536:	09 8b       	std	Y+17, r16	; 0x11
	twi_write(board_address,LEDOUT1,&reg,1);
     538:	21 e0       	ldi	r18, 0x01	; 1
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	ae 01       	movw	r20, r28
     53e:	4f 5e       	subi	r20, 0xEF	; 239
     540:	5f 4f       	sbci	r21, 0xFF	; 255
     542:	65 e1       	ldi	r22, 0x15	; 21
     544:	81 2f       	mov	r24, r17
     546:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <twi_write>
	reg= (2 << LDR8) | (2 << LDR9) | (2 << LDR10) | (2 << LDR11);
     54a:	09 8b       	std	Y+17, r16	; 0x11
	twi_write(board_address,LEDOUT2,&reg,1);
     54c:	21 e0       	ldi	r18, 0x01	; 1
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	ae 01       	movw	r20, r28
     552:	4f 5e       	subi	r20, 0xEF	; 239
     554:	5f 4f       	sbci	r21, 0xFF	; 255
     556:	66 e1       	ldi	r22, 0x16	; 22
     558:	81 2f       	mov	r24, r17
     55a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <twi_write>
	reg = (2 << LDR12) | (2 << LDR13) | (2 << LDR14) | (2 << LDR15);
     55e:	09 8b       	std	Y+17, r16	; 0x11
	twi_write(board_address,LEDOUT3,&reg,1);
     560:	21 e0       	ldi	r18, 0x01	; 1
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	ae 01       	movw	r20, r28
     566:	4f 5e       	subi	r20, 0xEF	; 239
     568:	5f 4f       	sbci	r21, 0xFF	; 255
     56a:	67 e1       	ldi	r22, 0x17	; 23
     56c:	81 2f       	mov	r24, r17
     56e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <twi_write>
	return 1;
	
}
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	61 96       	adiw	r28, 0x11	; 17
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	08 95       	ret

0000058a <twi_start>:
	status = (TWSR1 & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     58a:	85 ea       	ldi	r24, 0xA5	; 165
     58c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
ISR(TWI1_vect){
	status = (TWSR1 & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     594:	05 c0       	rjmp	.+10     	; 0x5a0 <twi_start+0x16>
		i++;
     596:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     598:	80 34       	cpi	r24, 0x40	; 64
     59a:	26 e0       	ldi	r18, 0x06	; 6
     59c:	92 07       	cpc	r25, r18
     59e:	30 f4       	brcc	.+12     	; 0x5ac <twi_start+0x22>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     5a0:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     5a4:	28 30       	cpi	r18, 0x08	; 8
     5a6:	b9 f7       	brne	.-18     	; 0x596 <twi_start+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	08 95       	ret
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     5ae:	08 95       	ret

000005b0 <twi_stop>:

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     5b0:	85 e9       	ldi	r24, 0x95	; 149
     5b2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     5b6:	08 95       	ret

000005b8 <twi_restart>:
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     5b8:	85 ea       	ldi	r24, 0xA5	; 165
     5ba:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     5c2:	05 c0       	rjmp	.+10     	; 0x5ce <twi_restart+0x16>
		i++;
     5c4:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     5c6:	80 34       	cpi	r24, 0x40	; 64
     5c8:	26 e0       	ldi	r18, 0x06	; 6
     5ca:	92 07       	cpc	r25, r18
     5cc:	30 f4       	brcc	.+12     	; 0x5da <twi_restart+0x22>

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     5ce:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     5d2:	20 31       	cpi	r18, 0x10	; 16
     5d4:	b9 f7       	brne	.-18     	; 0x5c4 <twi_restart+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	08 95       	ret
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     5da:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     5dc:	08 95       	ret

000005de <twi_addr_write_ack>:

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     5de:	85 e8       	ldi	r24, 0x85	; 133
     5e0:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	}
	return TWI_OK;
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <twi_addr_write_ack+0x16>
		i++;
     5ea:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     5ec:	80 34       	cpi	r24, 0x40	; 64
     5ee:	26 e0       	ldi	r18, 0x06	; 6
     5f0:	92 07       	cpc	r25, r18
     5f2:	30 f4       	brcc	.+12     	; 0x600 <twi_addr_write_ack+0x22>

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     5f4:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     5f8:	28 31       	cpi	r18, 0x18	; 24
     5fa:	b9 f7       	brne	.-18     	; 0x5ea <twi_addr_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     600:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     602:	08 95       	ret

00000604 <twi_data_write_ack>:


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     604:	85 e8       	ldi	r24, 0x85	; 133
     606:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     60e:	05 c0       	rjmp	.+10     	; 0x61a <twi_data_write_ack+0x16>
		i++;
     610:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     612:	80 34       	cpi	r24, 0x40	; 64
     614:	26 e0       	ldi	r18, 0x06	; 6
     616:	92 07       	cpc	r25, r18
     618:	30 f4       	brcc	.+12     	; 0x626 <twi_data_write_ack+0x22>

static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     61a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     61e:	28 32       	cpi	r18, 0x28	; 40
     620:	b9 f7       	brne	.-18     	; 0x610 <twi_data_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     626:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     628:	08 95       	ret

0000062a <twi_addr_read_ack>:


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     62a:	85 e8       	ldi	r24, 0x85	; 133
     62c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     634:	05 c0       	rjmp	.+10     	; 0x640 <twi_addr_read_ack+0x16>
		i++;
     636:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     638:	80 34       	cpi	r24, 0x40	; 64
     63a:	26 e0       	ldi	r18, 0x06	; 6
     63c:	92 07       	cpc	r25, r18
     63e:	30 f4       	brcc	.+12     	; 0x64c <twi_addr_read_ack+0x22>

static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     640:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     644:	20 34       	cpi	r18, 0x40	; 64
     646:	b9 f7       	brne	.-18     	; 0x636 <twi_addr_read_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     64c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     64e:	08 95       	ret

00000650 <twi_data_read_ack>:


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
     650:	88 23       	and	r24, r24
     652:	89 f0       	breq	.+34     	; 0x676 <twi_data_read_ack+0x26>
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
     654:	85 ec       	ldi	r24, 0xC5	; 197
     656:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     65e:	05 c0       	rjmp	.+10     	; 0x66a <twi_data_read_ack+0x1a>
			i++;
     660:	01 96       	adiw	r24, 0x01	; 1
			if(i >= TWI_TIMEOUT){
     662:	80 34       	cpi	r24, 0x40	; 64
     664:	26 e0       	ldi	r18, 0x06	; 6
     666:	92 07       	cpc	r25, r18
     668:	b8 f4       	brcc	.+46     	; 0x698 <twi_data_read_ack+0x48>

static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     66a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     66e:	20 35       	cpi	r18, 0x50	; 80
     670:	b9 f7       	brne	.-18     	; 0x660 <twi_data_read_ack+0x10>
				return TWI_ERROR_START;
			}
		}
		
	}
	return TWI_OK;
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	08 95       	ret
				return TWI_ERROR_START;
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     676:	85 e8       	ldi	r24, 0x85	; 133
     678:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     680:	05 c0       	rjmp	.+10     	; 0x68c <twi_data_read_ack+0x3c>
			i++;
     682:	01 96       	adiw	r24, 0x01	; 1
			if(i >= TWI_TIMEOUT){
     684:	80 34       	cpi	r24, 0x40	; 64
     686:	26 e0       	ldi	r18, 0x06	; 6
     688:	92 07       	cpc	r25, r18
     68a:	40 f4       	brcc	.+16     	; 0x69c <twi_data_read_ack+0x4c>
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     68c:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     690:	28 35       	cpi	r18, 0x58	; 88
     692:	b9 f7       	brne	.-18     	; 0x682 <twi_data_read_ack+0x32>
				return TWI_ERROR_START;
			}
		}
		
	}
	return TWI_OK;
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	08 95       	ret
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	08 95       	ret
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     69c:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		
	}
	return TWI_OK;
}
     69e:	08 95       	ret

000006a0 <__vector_40>:

#include "twi_hal.h"

volatile uint8_t status = 0xF8;

ISR(TWI1_vect){
     6a0:	1f 92       	push	r1
     6a2:	0f 92       	push	r0
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	0f 92       	push	r0
     6a8:	11 24       	eor	r1, r1
     6aa:	8f 93       	push	r24
	status = (TWSR1 & 0xF8);
     6ac:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
     6b0:	88 7f       	andi	r24, 0xF8	; 248
     6b2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <status>
}
     6b6:	8f 91       	pop	r24
     6b8:	0f 90       	pop	r0
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	0f 90       	pop	r0
     6be:	1f 90       	pop	r1
     6c0:	18 95       	reti

000006c2 <twi_read>:
		
	}
	return TWI_OK;
}

uint8_t twi_read(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	d8 2e       	mov	r13, r24
     6d2:	c6 2e       	mov	r12, r22
     6d4:	7a 01       	movw	r14, r20
     6d6:	89 01       	movw	r16, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     6d8:	0e 94 c5 02 	call	0x58a	; 0x58a <twi_start>
     6dc:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     6de:	88 23       	and	r24, r24
     6e0:	21 f0       	breq	.+8      	; 0x6ea <twi_read+0x28>
		twi_stop();
     6e2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
		return err;
     6e6:	8c 2f       	mov	r24, r28
     6e8:	5f c0       	rjmp	.+190    	; 0x7a8 <twi_read+0xe6>
	}
	TWDR1 = (addr << 1) | 0;
     6ea:	8d 2d       	mov	r24, r13
     6ec:	88 0f       	add	r24, r24
     6ee:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
     6f2:	0e 94 ef 02 	call	0x5de	; 0x5de <twi_addr_write_ack>
     6f6:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     6f8:	88 23       	and	r24, r24
     6fa:	21 f0       	breq	.+8      	; 0x704 <twi_read+0x42>
		twi_stop();
     6fc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
		return err;
     700:	8c 2f       	mov	r24, r28
     702:	52 c0       	rjmp	.+164    	; 0x7a8 <twi_read+0xe6>
	}
	
	TWDR1 = reg;
     704:	c0 92 db 00 	sts	0x00DB, r12	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	err = twi_data_write_ack();
     708:	0e 94 02 03 	call	0x604	; 0x604 <twi_data_write_ack>
     70c:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     70e:	88 23       	and	r24, r24
     710:	21 f0       	breq	.+8      	; 0x71a <twi_read+0x58>
		twi_stop();
     712:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
		return err;
     716:	8c 2f       	mov	r24, r28
     718:	47 c0       	rjmp	.+142    	; 0x7a8 <twi_read+0xe6>
	}
	
	err = twi_restart();
     71a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <twi_restart>
     71e:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     720:	88 23       	and	r24, r24
     722:	21 f0       	breq	.+8      	; 0x72c <twi_read+0x6a>
		twi_stop();
     724:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
		return err;
     728:	8c 2f       	mov	r24, r28
     72a:	3e c0       	rjmp	.+124    	; 0x7a8 <twi_read+0xe6>
	}
	
	TWDR1 = (addr << 1) | 1;
     72c:	8d 2d       	mov	r24, r13
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	81 60       	ori	r24, 0x01	; 1
     736:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>

	err = twi_addr_read_ack();
     73a:	0e 94 15 03 	call	0x62a	; 0x62a <twi_addr_read_ack>
     73e:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     740:	88 23       	and	r24, r24
     742:	c1 f0       	breq	.+48     	; 0x774 <twi_read+0xb2>
		twi_stop();
     744:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
		return err;
     748:	8c 2f       	mov	r24, r28
     74a:	2e c0       	rjmp	.+92     	; 0x7a8 <twi_read+0xe6>
	}
	
	for(i = 0; i < (len - 1);i++){
		err = twi_data_read_ack(1);
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	0e 94 28 03 	call	0x650	; 0x650 <twi_data_read_ack>
     752:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     754:	88 23       	and	r24, r24
     756:	21 f0       	breq	.+8      	; 0x760 <twi_read+0x9e>
			twi_stop();
     758:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
			return err;
     75c:	8c 2f       	mov	r24, r28
     75e:	24 c0       	rjmp	.+72     	; 0x7a8 <twi_read+0xe6>
		}
		data[i] = TWDR1;
     760:	f7 01       	movw	r30, r14
     762:	ec 0d       	add	r30, r12
     764:	fd 1d       	adc	r31, r13
     766:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     76a:	80 83       	st	Z, r24
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     76c:	8f ef       	ldi	r24, 0xFF	; 255
     76e:	c8 1a       	sub	r12, r24
     770:	d8 0a       	sbc	r13, r24
     772:	02 c0       	rjmp	.+4      	; 0x778 <twi_read+0xb6>
     774:	c1 2c       	mov	r12, r1
     776:	d1 2c       	mov	r13, r1
     778:	c8 01       	movw	r24, r16
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	c8 16       	cp	r12, r24
     77e:	d9 06       	cpc	r13, r25
     780:	28 f3       	brcs	.-54     	; 0x74c <twi_read+0x8a>
			return err;
		}
		data[i] = TWDR1;
	}
	
	err = twi_data_read_ack(0);
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	0e 94 28 03 	call	0x650	; 0x650 <twi_data_read_ack>
     788:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     78a:	88 23       	and	r24, r24
     78c:	21 f0       	breq	.+8      	; 0x796 <twi_read+0xd4>
		twi_stop();
     78e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
		return err;
     792:	8c 2f       	mov	r24, r28
     794:	09 c0       	rjmp	.+18     	; 0x7a8 <twi_read+0xe6>
	}
	data[i] = TWDR1;
     796:	f7 01       	movw	r30, r14
     798:	ec 0d       	add	r30, r12
     79a:	fd 1d       	adc	r31, r13
     79c:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     7a0:	80 83       	st	Z, r24
	
	twi_stop();
     7a2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
	
	return err;
     7a6:	8c 2f       	mov	r24, r28
}
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	df 90       	pop	r13
     7b4:	cf 90       	pop	r12
     7b6:	08 95       	ret

000007b8 <twi_write>:


uint8_t twi_write(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     7b8:	cf 92       	push	r12
     7ba:	df 92       	push	r13
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	18 2f       	mov	r17, r24
     7c8:	06 2f       	mov	r16, r22
     7ca:	6a 01       	movw	r12, r20
     7cc:	79 01       	movw	r14, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     7ce:	0e 94 c5 02 	call	0x58a	; 0x58a <twi_start>
     7d2:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     7d4:	88 23       	and	r24, r24
     7d6:	21 f0       	breq	.+8      	; 0x7e0 <twi_write+0x28>
		twi_stop();
     7d8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
		return err;
     7dc:	8c 2f       	mov	r24, r28
     7de:	31 c0       	rjmp	.+98     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
	}
	TWDR1 = (addr << 1) | 0;
     7e0:	11 0f       	add	r17, r17
     7e2:	10 93 db 00 	sts	0x00DB, r17	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
     7e6:	0e 94 ef 02 	call	0x5de	; 0x5de <twi_addr_write_ack>
     7ea:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     7ec:	88 23       	and	r24, r24
     7ee:	21 f0       	breq	.+8      	; 0x7f8 <twi_write+0x40>
		twi_stop();
     7f0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
		return err;
     7f4:	8c 2f       	mov	r24, r28
     7f6:	25 c0       	rjmp	.+74     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
	}
	
	TWDR1 = reg;
     7f8:	00 93 db 00 	sts	0x00DB, r16	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	err = twi_data_write_ack();
     7fc:	0e 94 02 03 	call	0x604	; 0x604 <twi_data_write_ack>
     800:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     802:	88 23       	and	r24, r24
     804:	b1 f0       	breq	.+44     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
		twi_stop();
     806:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
		return err;
     80a:	8c 2f       	mov	r24, r28
     80c:	1a c0       	rjmp	.+52     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
	}
	
	for(i = 0; i < len;i++){
		TWDR1 = data[i];
     80e:	f6 01       	movw	r30, r12
     810:	e0 0f       	add	r30, r16
     812:	f1 1f       	adc	r31, r17
     814:	80 81       	ld	r24, Z
     816:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		err = twi_data_write_ack();
     81a:	0e 94 02 03 	call	0x604	; 0x604 <twi_data_write_ack>
     81e:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     820:	88 23       	and	r24, r24
     822:	21 f0       	breq	.+8      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
			twi_stop();
     824:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
			return err;
     828:	8c 2f       	mov	r24, r28
     82a:	0b c0       	rjmp	.+22     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
     82c:	0f 5f       	subi	r16, 0xFF	; 255
     82e:	1f 4f       	sbci	r17, 0xFF	; 255
     830:	02 c0       	rjmp	.+4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     832:	00 e0       	ldi	r16, 0x00	; 0
     834:	10 e0       	ldi	r17, 0x00	; 0
     836:	0e 15       	cp	r16, r14
     838:	1f 05       	cpc	r17, r15
     83a:	48 f3       	brcs	.-46     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
			return err;
		}
	}
	
	
	twi_stop();
     83c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
	
	return err;
     840:	8c 2f       	mov	r24, r28
}
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	df 90       	pop	r13
     84e:	cf 90       	pop	r12
     850:	08 95       	ret

00000852 <twi_write_batch>:
uint8_t twi_write_batch(uint8_t addr, uint8_t *data,uint16_t len){
     852:	cf 92       	push	r12
     854:	df 92       	push	r13
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	c8 2f       	mov	r28, r24
     862:	6b 01       	movw	r12, r22
     864:	7a 01       	movw	r14, r20
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     866:	0e 94 c5 02 	call	0x58a	; 0x58a <twi_start>
     86a:	18 2f       	mov	r17, r24
	if(err != TWI_OK){
     86c:	88 23       	and	r24, r24
     86e:	21 f0       	breq	.+8      	; 0x878 <twi_write_batch+0x26>
		twi_stop();
     870:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
		return err;
     874:	81 2f       	mov	r24, r17
     876:	25 c0       	rjmp	.+74     	; 0x8c2 <twi_write_batch+0x70>
	}
	TWDR1 = (addr << 1) | 0;
     878:	cc 0f       	add	r28, r28
     87a:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
     87e:	0e 94 ef 02 	call	0x5de	; 0x5de <twi_addr_write_ack>
     882:	18 2f       	mov	r17, r24
	if(err != TWI_OK){
     884:	88 23       	and	r24, r24
     886:	a9 f0       	breq	.+42     	; 0x8b2 <twi_write_batch+0x60>
		twi_stop();
     888:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
		return err;
     88c:	81 2f       	mov	r24, r17
     88e:	19 c0       	rjmp	.+50     	; 0x8c2 <twi_write_batch+0x70>
	}
	
	
	
	for(i = 0; i < len;i++){
		TWDR1 = data[i];
     890:	f6 01       	movw	r30, r12
     892:	ec 0f       	add	r30, r28
     894:	fd 1f       	adc	r31, r29
     896:	80 81       	ld	r24, Z
     898:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		err = twi_data_write_ack();
     89c:	0e 94 02 03 	call	0x604	; 0x604 <twi_data_write_ack>
     8a0:	18 2f       	mov	r17, r24
		if(err != TWI_OK){
     8a2:	88 23       	and	r24, r24
     8a4:	21 f0       	breq	.+8      	; 0x8ae <twi_write_batch+0x5c>
			twi_stop();
     8a6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
			return err;
     8aa:	81 2f       	mov	r24, r17
     8ac:	0a c0       	rjmp	.+20     	; 0x8c2 <twi_write_batch+0x70>
		return err;
	}
	
	
	
	for(i = 0; i < len;i++){
     8ae:	21 96       	adiw	r28, 0x01	; 1
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <twi_write_batch+0x64>
     8b2:	c0 e0       	ldi	r28, 0x00	; 0
     8b4:	d0 e0       	ldi	r29, 0x00	; 0
     8b6:	ce 15       	cp	r28, r14
     8b8:	df 05       	cpc	r29, r15
     8ba:	50 f3       	brcs	.-44     	; 0x890 <twi_write_batch+0x3e>
			return err;
		}
	}
	
	
	twi_stop();
     8bc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
	
	return err;
     8c0:	81 2f       	mov	r24, r17
}
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	08 95       	ret

000008d2 <twi_write_batch_by_reg>:



uint8_t twi_write_batch_by_reg(uint8_t addr,uint8_t reg, uint8_t *data,uint16_t len){
     8d2:	cf 92       	push	r12
     8d4:	df 92       	push	r13
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	18 2f       	mov	r17, r24
     8e2:	06 2f       	mov	r16, r22
     8e4:	6a 01       	movw	r12, r20
     8e6:	79 01       	movw	r14, r18
		
		uint16_t i = 0;
		uint8_t err = TWI_OK;
		
		err = twi_start();
     8e8:	0e 94 c5 02 	call	0x58a	; 0x58a <twi_start>
     8ec:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     8ee:	88 23       	and	r24, r24
     8f0:	21 f0       	breq	.+8      	; 0x8fa <twi_write_batch_by_reg+0x28>
			twi_stop();
     8f2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
			return err;
     8f6:	8c 2f       	mov	r24, r28
     8f8:	31 c0       	rjmp	.+98     	; 0x95c <__stack+0x5d>
		}
		TWDR1 = (addr << 1) | 0;
     8fa:	11 0f       	add	r17, r17
     8fc:	10 93 db 00 	sts	0x00DB, r17	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		
		
		err = twi_addr_write_ack();
     900:	0e 94 ef 02 	call	0x5de	; 0x5de <twi_addr_write_ack>
     904:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     906:	88 23       	and	r24, r24
     908:	21 f0       	breq	.+8      	; 0x912 <__stack+0x13>
			twi_stop();
     90a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
			return err;
     90e:	8c 2f       	mov	r24, r28
     910:	25 c0       	rjmp	.+74     	; 0x95c <__stack+0x5d>
		}
		
		
		TWDR1 = reg;
     912:	00 93 db 00 	sts	0x00DB, r16	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		err = twi_data_write_ack();
     916:	0e 94 02 03 	call	0x604	; 0x604 <twi_data_write_ack>
     91a:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     91c:	88 23       	and	r24, r24
     91e:	b1 f0       	breq	.+44     	; 0x94c <__stack+0x4d>
			twi_stop();
     920:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
			return err;
     924:	8c 2f       	mov	r24, r28
     926:	1a c0       	rjmp	.+52     	; 0x95c <__stack+0x5d>
		}
		
		for(i = 0; i < len;i++){
			TWDR1 = data[i];
     928:	f6 01       	movw	r30, r12
     92a:	e0 0f       	add	r30, r16
     92c:	f1 1f       	adc	r31, r17
     92e:	80 81       	ld	r24, Z
     930:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
			err = twi_data_write_ack();
     934:	0e 94 02 03 	call	0x604	; 0x604 <twi_data_write_ack>
     938:	c8 2f       	mov	r28, r24
			if(err != TWI_OK){
     93a:	88 23       	and	r24, r24
     93c:	21 f0       	breq	.+8      	; 0x946 <__stack+0x47>
				twi_stop();
     93e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
				return err;
     942:	8c 2f       	mov	r24, r28
     944:	0b c0       	rjmp	.+22     	; 0x95c <__stack+0x5d>
		if(err != TWI_OK){
			twi_stop();
			return err;
		}
		
		for(i = 0; i < len;i++){
     946:	0f 5f       	subi	r16, 0xFF	; 255
     948:	1f 4f       	sbci	r17, 0xFF	; 255
     94a:	02 c0       	rjmp	.+4      	; 0x950 <__stack+0x51>
     94c:	00 e0       	ldi	r16, 0x00	; 0
     94e:	10 e0       	ldi	r17, 0x00	; 0
     950:	0e 15       	cp	r16, r14
     952:	1f 05       	cpc	r17, r15
     954:	48 f3       	brcs	.-46     	; 0x928 <__stack+0x29>
				return err;
			}
		}
		
		
		twi_stop();
     956:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <twi_stop>
		
		return err;
     95a:	8c 2f       	mov	r24, r28
}
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	df 90       	pop	r13
     968:	cf 90       	pop	r12
     96a:	08 95       	ret

0000096c <twi_init>:





void twi_init(uint32_t speed){
     96c:	9b 01       	movw	r18, r22
     96e:	ac 01       	movw	r20, r24
	
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	72 e1       	ldi	r23, 0x12	; 18
     974:	8a e7       	ldi	r24, 0x7A	; 122
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__udivmodsi4>
     97c:	da 01       	movw	r26, r20
     97e:	c9 01       	movw	r24, r18
     980:	40 97       	sbiw	r24, 0x10	; 16
     982:	a1 09       	sbc	r26, r1
     984:	b1 09       	sbc	r27, r1
     986:	b6 95       	lsr	r27
     988:	a7 95       	ror	r26
     98a:	97 95       	ror	r25
     98c:	87 95       	ror	r24
	TWBR1 = gen_t & 0xFF;
     98e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	TWCR1 = (1 << TWEN) | (1 << TWIE);
     992:	85 e0       	ldi	r24, 0x05	; 5
     994:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     998:	08 95       	ret

0000099a <__vector_18>:

void uart_send_array(uint8_t *c,uint16_t len){
	for(uint16_t i = 0; i < len;i++){
		uart_send_byte(c[i]);
	}
}
     99a:	1f 92       	push	r1
     99c:	0f 92       	push	r0
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	0f 92       	push	r0
     9a2:	11 24       	eor	r1, r1
     9a4:	8f 93       	push	r24
     9a6:	9f 93       	push	r25
     9a8:	ef 93       	push	r30
     9aa:	ff 93       	push	r31
     9ac:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <rx_count>
     9b0:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <rx_count+0x1>
     9b4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     9b8:	e4 52       	subi	r30, 0x24	; 36
     9ba:	fe 4f       	sbci	r31, 0xFE	; 254
     9bc:	80 83       	st	Z, r24
     9be:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <rx_count>
     9c2:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <rx_count+0x1>
     9c6:	e4 52       	subi	r30, 0x24	; 36
     9c8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ca:	80 81       	ld	r24, Z
     9cc:	8d 30       	cpi	r24, 0x0D	; 13
     9ce:	51 f4       	brne	.+20     	; 0x9e4 <__vector_18+0x4a>
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <read_complete>
     9d6:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <rx_count>
     9da:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <rx_count+0x1>
     9de:	e3 52       	subi	r30, 0x23	; 35
     9e0:	fe 4f       	sbci	r31, 0xFE	; 254
     9e2:	10 82       	st	Z, r1
     9e4:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <rx_count>
     9e8:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <rx_count+0x1>
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <rx_count+0x1>
     9f2:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <rx_count>
     9f6:	ff 91       	pop	r31
     9f8:	ef 91       	pop	r30
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	0f 90       	pop	r0
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	0f 90       	pop	r0
     a04:	1f 90       	pop	r1
     a06:	18 95       	reti

00000a08 <__vector_20>:
     a08:	1f 92       	push	r1
     a0a:	0f 92       	push	r0
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	0f 92       	push	r0
     a10:	11 24       	eor	r1, r1
     a12:	8f 93       	push	r24
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <uart_tx_busy>
     a1a:	8f 91       	pop	r24
     a1c:	0f 90       	pop	r0
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	0f 90       	pop	r0
     a22:	1f 90       	pop	r1
     a24:	18 95       	reti

00000a26 <uart_init>:
     a26:	44 23       	and	r20, r20
     a28:	39 f0       	breq	.+14     	; 0xa38 <uart_init+0x12>
     a2a:	e0 ec       	ldi	r30, 0xC0	; 192
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	20 81       	ld	r18, Z
     a30:	22 60       	ori	r18, 0x02	; 2
     a32:	20 83       	st	Z, r18
     a34:	a8 e0       	ldi	r26, 0x08	; 8
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <uart_init+0x14>
     a38:	a0 e1       	ldi	r26, 0x10	; 16
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	9b 01       	movw	r18, r22
     a3e:	ac 01       	movw	r20, r24
     a40:	0e 94 71 07 	call	0xee2	; 0xee2 <__muluhisi3>
     a44:	9b 01       	movw	r18, r22
     a46:	ac 01       	movw	r20, r24
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	72 e1       	ldi	r23, 0x12	; 18
     a4c:	8a e7       	ldi	r24, 0x7A	; 122
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__udivmodsi4>
     a54:	ba 01       	movw	r22, r20
     a56:	a9 01       	movw	r20, r18
     a58:	41 50       	subi	r20, 0x01	; 1
     a5a:	51 09       	sbc	r21, r1
     a5c:	61 09       	sbc	r22, r1
     a5e:	71 09       	sbc	r23, r1
     a60:	db 01       	movw	r26, r22
     a62:	ca 01       	movw	r24, r20
     a64:	88 27       	eor	r24, r24
     a66:	9f 70       	andi	r25, 0x0F	; 15
     a68:	aa 27       	eor	r26, r26
     a6a:	bb 27       	eor	r27, r27
     a6c:	89 2f       	mov	r24, r25
     a6e:	9a 2f       	mov	r25, r26
     a70:	ab 2f       	mov	r26, r27
     a72:	bb 27       	eor	r27, r27
     a74:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     a78:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     a7c:	e1 ec       	ldi	r30, 0xC1	; 193
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	88 6d       	ori	r24, 0xD8	; 216
     a84:	80 83       	st	Z, r24
     a86:	86 e8       	ldi	r24, 0x86	; 134
     a88:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     a8c:	08 95       	ret

00000a8e <uart_send_byte>:
     a8e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <uart_tx_busy>
     a92:	99 23       	and	r25, r25
     a94:	e1 f3       	breq	.-8      	; 0xa8e <uart_send_byte>
     a96:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <uart_tx_busy>
     a9a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     a9e:	08 95       	ret

00000aa0 <uart_send_string>:

void uart_send_string(uint8_t *c){
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	8c 01       	movw	r16, r24
	uint16_t i = 0;
     aaa:	c0 e0       	ldi	r28, 0x00	; 0
     aac:	d0 e0       	ldi	r29, 0x00	; 0
	do{
		uart_send_byte(c[i]);
     aae:	f8 01       	movw	r30, r16
     ab0:	ec 0f       	add	r30, r28
     ab2:	fd 1f       	adc	r31, r29
     ab4:	80 81       	ld	r24, Z
     ab6:	0e 94 47 05 	call	0xa8e	; 0xa8e <uart_send_byte>
		i++;
     aba:	21 96       	adiw	r28, 0x01	; 1
		
	}while(c[i] != '\0');
     abc:	f8 01       	movw	r30, r16
     abe:	ec 0f       	add	r30, r28
     ac0:	fd 1f       	adc	r31, r29
     ac2:	80 81       	ld	r24, Z
     ac4:	81 11       	cpse	r24, r1
     ac6:	f3 cf       	rjmp	.-26     	; 0xaae <uart_send_string+0xe>
	//uart_send_byte(c[i]);
}
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	08 95       	ret

00000ad2 <__vector_1>:
uint8_t reset_cmd[] = {0xa5, 0x5a};
//uint8_t init_cmd[] = {0x80, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xAA, 0xAA, 0xAA, 0xAA};
//uint8_t led_data[] = {0xa2, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f};
//uint8_t led1[]= {0xa2, 0, 0, 0};
	
ISR(INT0_vect){
     ad2:	1f 92       	push	r1
     ad4:	0f 92       	push	r0
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	0f 92       	push	r0
     ada:	11 24       	eor	r1, r1
     adc:	2f 93       	push	r18
     ade:	3f 93       	push	r19
     ae0:	4f 93       	push	r20
     ae2:	5f 93       	push	r21
     ae4:	6f 93       	push	r22
     ae6:	7f 93       	push	r23
     ae8:	8f 93       	push	r24
     aea:	9f 93       	push	r25
     aec:	af 93       	push	r26
     aee:	bf 93       	push	r27
     af0:	ef 93       	push	r30
     af2:	ff 93       	push	r31
	rtc_int_request=1;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <rtc_int_request>
	toggle_pin_level(&ld1);
     afa:	8f e0       	ldi	r24, 0x0F	; 15
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	0e 94 36 01 	call	0x26c	; 0x26c <toggle_pin_level>
}	
     b02:	ff 91       	pop	r31
     b04:	ef 91       	pop	r30
     b06:	bf 91       	pop	r27
     b08:	af 91       	pop	r26
     b0a:	9f 91       	pop	r25
     b0c:	8f 91       	pop	r24
     b0e:	7f 91       	pop	r23
     b10:	6f 91       	pop	r22
     b12:	5f 91       	pop	r21
     b14:	4f 91       	pop	r20
     b16:	3f 91       	pop	r19
     b18:	2f 91       	pop	r18
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <main>:
int main(void)
{
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	c0 58       	subi	r28, 0x80	; 128
     b2e:	d1 09       	sbc	r29, r1
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
	char char_array[128]="\0";
     b3a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <rtc_int+0x13>
     b3e:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <rtc_int+0x14>
     b42:	9a 83       	std	Y+2, r25	; 0x02
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	fe 01       	movw	r30, r28
     b48:	33 96       	adiw	r30, 0x03	; 3
     b4a:	8e e7       	ldi	r24, 0x7E	; 126
     b4c:	df 01       	movw	r26, r30
     b4e:	1d 92       	st	X+, r1
     b50:	8a 95       	dec	r24
     b52:	e9 f7       	brne	.-6      	; 0xb4e <main+0x2a>
	uart_init(9600,1);
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	60 e8       	ldi	r22, 0x80	; 128
     b58:	75 e2       	ldi	r23, 0x25	; 37
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 13 05 	call	0xa26	; 0xa26 <uart_init>
	twi_init(400000);
     b62:	60 e8       	ldi	r22, 0x80	; 128
     b64:	7a e1       	ldi	r23, 0x1A	; 26
     b66:	86 e0       	ldi	r24, 0x06	; 6
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 b6 04 	call	0x96c	; 0x96c <twi_init>
	
	EICRA |= (0b10 << ISC00);
     b6e:	e9 e6       	ldi	r30, 0x69	; 105
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	80 83       	st	Z, r24
	EIMSK = 0x01; //0b00000001
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	8d bb       	out	0x1d, r24	; 29
	
	set_pin_dir(&ld1 , PORT_DIR_OUT); set_pin_level(&ld1, true);
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	8f e0       	ldi	r24, 0x0F	; 15
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <set_pin_dir>
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	8f e0       	ldi	r24, 0x0F	; 15
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	0e 94 cb 00 	call	0x196	; 0x196 <set_pin_level>
	set_pin_dir(&rtc_int, PORT_DIR_IN);
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	82 e1       	ldi	r24, 0x12	; 18
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <set_pin_dir>
	
	sei();
     b9a:	78 94       	sei
	rtc_set(&sys_rtc);
     b9c:	87 e0       	ldi	r24, 0x07	; 7
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	0e 94 cb 01 	call	0x396	; 0x396 <rtc_set>
	rtc_int_enable(&sys_rtc ,0);
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 47 01 	call	0x28e	; 0x28e <rtc_int_enable>
	adc_init();
     bb0:	0e 94 88 00 	call	0x110	; 0x110 <adc_init>
	//_delay_ms(10);
	//twi_write_batch(panel_addr, init_cmd, sizeof(init_cmd));
    
	//_delay_ms(10);
	//twi_write_batch(panel_addr, led_data, sizeof(led_data));
	led_board_sw_reset(panel_addr);
     bb4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <panel_addr>
     bb8:	0e 94 0c 02 	call	0x418	; 0x418 <led_board_sw_reset>
	led_board_init(panel_addr);
     bbc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <panel_addr>
     bc0:	0e 94 49 02 	call	0x492	; 0x492 <led_board_init>

	
	uart_send_string((uint8_t *)"RUN\n\r");
     bc4:	85 ea       	ldi	r24, 0xA5	; 165
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <uart_send_string>
    while (1) 
    {
		
		
		
		if (rtc_int_request != 0){
     bcc:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <rtc_int_request>
     bd0:	88 23       	and	r24, r24
     bd2:	e1 f3       	breq	.-8      	; 0xbcc <main+0xa8>
			rtc_sync(&sys_rtc);
     bd4:	87 e0       	ldi	r24, 0x07	; 7
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	0e 94 75 01 	call	0x2ea	; 0x2ea <rtc_sync>
			BAT_VOLT = get_mVolt(ADC4_PIN);
     bdc:	84 e0       	ldi	r24, 0x04	; 4
     bde:	0e 94 b8 00 	call	0x170	; 0x170 <get_mVolt>
     be2:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <BAT_VOLT+0x1>
     be6:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <BAT_VOLT>
			LIGHT_LEVEL = get_mVolt(ADC5_PIN);			
     bea:	85 e0       	ldi	r24, 0x05	; 5
     bec:	0e 94 b8 00 	call	0x170	; 0x170 <get_mVolt>
     bf0:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <LIGHT_LEVEL>
     bf4:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <LIGHT_LEVEL+0x1>
			sprintf(char_array, "%02d:%02d:%02d; bat:%umV; l=%u; init: %02X \r\n", sys_rtc.hour, sys_rtc.minute, sys_rtc.second, BAT_VOLT, LIGHT_LEVEL);
     bf8:	e7 e0       	ldi	r30, 0x07	; 7
     bfa:	f1 e0       	ldi	r31, 0x01	; 1
     bfc:	40 81       	ld	r20, Z
     bfe:	31 81       	ldd	r19, Z+1	; 0x01
     c00:	22 81       	ldd	r18, Z+2	; 0x02
     c02:	9f 93       	push	r25
     c04:	8f 93       	push	r24
     c06:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <BAT_VOLT+0x1>
     c0a:	8f 93       	push	r24
     c0c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <BAT_VOLT>
     c10:	8f 93       	push	r24
     c12:	1f 92       	push	r1
     c14:	4f 93       	push	r20
     c16:	1f 92       	push	r1
     c18:	3f 93       	push	r19
     c1a:	1f 92       	push	r1
     c1c:	2f 93       	push	r18
     c1e:	8b ea       	ldi	r24, 0xAB	; 171
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	9f 93       	push	r25
     c24:	8f 93       	push	r24
     c26:	8e 01       	movw	r16, r28
     c28:	0f 5f       	subi	r16, 0xFF	; 255
     c2a:	1f 4f       	sbci	r17, 0xFF	; 255
     c2c:	1f 93       	push	r17
     c2e:	0f 93       	push	r16
     c30:	0e 94 8b 07 	call	0xf16	; 0xf16 <sprintf>
			uart_send_string((uint8_t *)char_array);
     c34:	c8 01       	movw	r24, r16
     c36:	0e 94 50 05 	call	0xaa0	; 0xaa0 <uart_send_string>
			rtc_int_request = 0;
     c3a:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <rtc_int_request>
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	c1 cf       	rjmp	.-126    	; 0xbcc <main+0xa8>

00000c4a <__fixunssfsi>:
     c4a:	0e 94 99 06 	call	0xd32	; 0xd32 <__fp_splitA>
     c4e:	88 f0       	brcs	.+34     	; 0xc72 <__fixunssfsi+0x28>
     c50:	9f 57       	subi	r25, 0x7F	; 127
     c52:	98 f0       	brcs	.+38     	; 0xc7a <__fixunssfsi+0x30>
     c54:	b9 2f       	mov	r27, r25
     c56:	99 27       	eor	r25, r25
     c58:	b7 51       	subi	r27, 0x17	; 23
     c5a:	b0 f0       	brcs	.+44     	; 0xc88 <__fixunssfsi+0x3e>
     c5c:	e1 f0       	breq	.+56     	; 0xc96 <__fixunssfsi+0x4c>
     c5e:	66 0f       	add	r22, r22
     c60:	77 1f       	adc	r23, r23
     c62:	88 1f       	adc	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	1a f0       	brmi	.+6      	; 0xc6e <__fixunssfsi+0x24>
     c68:	ba 95       	dec	r27
     c6a:	c9 f7       	brne	.-14     	; 0xc5e <__fixunssfsi+0x14>
     c6c:	14 c0       	rjmp	.+40     	; 0xc96 <__fixunssfsi+0x4c>
     c6e:	b1 30       	cpi	r27, 0x01	; 1
     c70:	91 f0       	breq	.+36     	; 0xc96 <__fixunssfsi+0x4c>
     c72:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fp_zero>
     c76:	b1 e0       	ldi	r27, 0x01	; 1
     c78:	08 95       	ret
     c7a:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <__fp_zero>
     c7e:	67 2f       	mov	r22, r23
     c80:	78 2f       	mov	r23, r24
     c82:	88 27       	eor	r24, r24
     c84:	b8 5f       	subi	r27, 0xF8	; 248
     c86:	39 f0       	breq	.+14     	; 0xc96 <__fixunssfsi+0x4c>
     c88:	b9 3f       	cpi	r27, 0xF9	; 249
     c8a:	cc f3       	brlt	.-14     	; 0xc7e <__fixunssfsi+0x34>
     c8c:	86 95       	lsr	r24
     c8e:	77 95       	ror	r23
     c90:	67 95       	ror	r22
     c92:	b3 95       	inc	r27
     c94:	d9 f7       	brne	.-10     	; 0xc8c <__fixunssfsi+0x42>
     c96:	3e f4       	brtc	.+14     	; 0xca6 <__fixunssfsi+0x5c>
     c98:	90 95       	com	r25
     c9a:	80 95       	com	r24
     c9c:	70 95       	com	r23
     c9e:	61 95       	neg	r22
     ca0:	7f 4f       	sbci	r23, 0xFF	; 255
     ca2:	8f 4f       	sbci	r24, 0xFF	; 255
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	08 95       	ret

00000ca8 <__floatunsisf>:
     ca8:	e8 94       	clt
     caa:	09 c0       	rjmp	.+18     	; 0xcbe <__floatsisf+0x12>

00000cac <__floatsisf>:
     cac:	97 fb       	bst	r25, 7
     cae:	3e f4       	brtc	.+14     	; 0xcbe <__floatsisf+0x12>
     cb0:	90 95       	com	r25
     cb2:	80 95       	com	r24
     cb4:	70 95       	com	r23
     cb6:	61 95       	neg	r22
     cb8:	7f 4f       	sbci	r23, 0xFF	; 255
     cba:	8f 4f       	sbci	r24, 0xFF	; 255
     cbc:	9f 4f       	sbci	r25, 0xFF	; 255
     cbe:	99 23       	and	r25, r25
     cc0:	a9 f0       	breq	.+42     	; 0xcec <__floatsisf+0x40>
     cc2:	f9 2f       	mov	r31, r25
     cc4:	96 e9       	ldi	r25, 0x96	; 150
     cc6:	bb 27       	eor	r27, r27
     cc8:	93 95       	inc	r25
     cca:	f6 95       	lsr	r31
     ccc:	87 95       	ror	r24
     cce:	77 95       	ror	r23
     cd0:	67 95       	ror	r22
     cd2:	b7 95       	ror	r27
     cd4:	f1 11       	cpse	r31, r1
     cd6:	f8 cf       	rjmp	.-16     	; 0xcc8 <__floatsisf+0x1c>
     cd8:	fa f4       	brpl	.+62     	; 0xd18 <__floatsisf+0x6c>
     cda:	bb 0f       	add	r27, r27
     cdc:	11 f4       	brne	.+4      	; 0xce2 <__floatsisf+0x36>
     cde:	60 ff       	sbrs	r22, 0
     ce0:	1b c0       	rjmp	.+54     	; 0xd18 <__floatsisf+0x6c>
     ce2:	6f 5f       	subi	r22, 0xFF	; 255
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	8f 4f       	sbci	r24, 0xFF	; 255
     ce8:	9f 4f       	sbci	r25, 0xFF	; 255
     cea:	16 c0       	rjmp	.+44     	; 0xd18 <__floatsisf+0x6c>
     cec:	88 23       	and	r24, r24
     cee:	11 f0       	breq	.+4      	; 0xcf4 <__floatsisf+0x48>
     cf0:	96 e9       	ldi	r25, 0x96	; 150
     cf2:	11 c0       	rjmp	.+34     	; 0xd16 <__floatsisf+0x6a>
     cf4:	77 23       	and	r23, r23
     cf6:	21 f0       	breq	.+8      	; 0xd00 <__floatsisf+0x54>
     cf8:	9e e8       	ldi	r25, 0x8E	; 142
     cfa:	87 2f       	mov	r24, r23
     cfc:	76 2f       	mov	r23, r22
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__floatsisf+0x5e>
     d00:	66 23       	and	r22, r22
     d02:	71 f0       	breq	.+28     	; 0xd20 <__floatsisf+0x74>
     d04:	96 e8       	ldi	r25, 0x86	; 134
     d06:	86 2f       	mov	r24, r22
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	2a f0       	brmi	.+10     	; 0xd18 <__floatsisf+0x6c>
     d0e:	9a 95       	dec	r25
     d10:	66 0f       	add	r22, r22
     d12:	77 1f       	adc	r23, r23
     d14:	88 1f       	adc	r24, r24
     d16:	da f7       	brpl	.-10     	; 0xd0e <__floatsisf+0x62>
     d18:	88 0f       	add	r24, r24
     d1a:	96 95       	lsr	r25
     d1c:	87 95       	ror	r24
     d1e:	97 f9       	bld	r25, 7
     d20:	08 95       	ret

00000d22 <__fp_split3>:
     d22:	57 fd       	sbrc	r21, 7
     d24:	90 58       	subi	r25, 0x80	; 128
     d26:	44 0f       	add	r20, r20
     d28:	55 1f       	adc	r21, r21
     d2a:	59 f0       	breq	.+22     	; 0xd42 <__fp_splitA+0x10>
     d2c:	5f 3f       	cpi	r21, 0xFF	; 255
     d2e:	71 f0       	breq	.+28     	; 0xd4c <__fp_splitA+0x1a>
     d30:	47 95       	ror	r20

00000d32 <__fp_splitA>:
     d32:	88 0f       	add	r24, r24
     d34:	97 fb       	bst	r25, 7
     d36:	99 1f       	adc	r25, r25
     d38:	61 f0       	breq	.+24     	; 0xd52 <__fp_splitA+0x20>
     d3a:	9f 3f       	cpi	r25, 0xFF	; 255
     d3c:	79 f0       	breq	.+30     	; 0xd5c <__fp_splitA+0x2a>
     d3e:	87 95       	ror	r24
     d40:	08 95       	ret
     d42:	12 16       	cp	r1, r18
     d44:	13 06       	cpc	r1, r19
     d46:	14 06       	cpc	r1, r20
     d48:	55 1f       	adc	r21, r21
     d4a:	f2 cf       	rjmp	.-28     	; 0xd30 <__fp_split3+0xe>
     d4c:	46 95       	lsr	r20
     d4e:	f1 df       	rcall	.-30     	; 0xd32 <__fp_splitA>
     d50:	08 c0       	rjmp	.+16     	; 0xd62 <__fp_splitA+0x30>
     d52:	16 16       	cp	r1, r22
     d54:	17 06       	cpc	r1, r23
     d56:	18 06       	cpc	r1, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	f1 cf       	rjmp	.-30     	; 0xd3e <__fp_splitA+0xc>
     d5c:	86 95       	lsr	r24
     d5e:	71 05       	cpc	r23, r1
     d60:	61 05       	cpc	r22, r1
     d62:	08 94       	sec
     d64:	08 95       	ret

00000d66 <__fp_zero>:
     d66:	e8 94       	clt

00000d68 <__fp_szero>:
     d68:	bb 27       	eor	r27, r27
     d6a:	66 27       	eor	r22, r22
     d6c:	77 27       	eor	r23, r23
     d6e:	cb 01       	movw	r24, r22
     d70:	97 f9       	bld	r25, 7
     d72:	08 95       	ret

00000d74 <__mulsf3>:
     d74:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__mulsf3x>
     d78:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__fp_round>
     d7c:	0e 94 30 07 	call	0xe60	; 0xe60 <__fp_pscA>
     d80:	38 f0       	brcs	.+14     	; 0xd90 <__mulsf3+0x1c>
     d82:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fp_pscB>
     d86:	20 f0       	brcs	.+8      	; 0xd90 <__mulsf3+0x1c>
     d88:	95 23       	and	r25, r21
     d8a:	11 f0       	breq	.+4      	; 0xd90 <__mulsf3+0x1c>
     d8c:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_inf>
     d90:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__fp_nan>
     d94:	11 24       	eor	r1, r1
     d96:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_szero>

00000d9a <__mulsf3x>:
     d9a:	0e 94 91 06 	call	0xd22	; 0xd22 <__fp_split3>
     d9e:	70 f3       	brcs	.-36     	; 0xd7c <__mulsf3+0x8>

00000da0 <__mulsf3_pse>:
     da0:	95 9f       	mul	r25, r21
     da2:	c1 f3       	breq	.-16     	; 0xd94 <__mulsf3+0x20>
     da4:	95 0f       	add	r25, r21
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	55 1f       	adc	r21, r21
     daa:	62 9f       	mul	r22, r18
     dac:	f0 01       	movw	r30, r0
     dae:	72 9f       	mul	r23, r18
     db0:	bb 27       	eor	r27, r27
     db2:	f0 0d       	add	r31, r0
     db4:	b1 1d       	adc	r27, r1
     db6:	63 9f       	mul	r22, r19
     db8:	aa 27       	eor	r26, r26
     dba:	f0 0d       	add	r31, r0
     dbc:	b1 1d       	adc	r27, r1
     dbe:	aa 1f       	adc	r26, r26
     dc0:	64 9f       	mul	r22, r20
     dc2:	66 27       	eor	r22, r22
     dc4:	b0 0d       	add	r27, r0
     dc6:	a1 1d       	adc	r26, r1
     dc8:	66 1f       	adc	r22, r22
     dca:	82 9f       	mul	r24, r18
     dcc:	22 27       	eor	r18, r18
     dce:	b0 0d       	add	r27, r0
     dd0:	a1 1d       	adc	r26, r1
     dd2:	62 1f       	adc	r22, r18
     dd4:	73 9f       	mul	r23, r19
     dd6:	b0 0d       	add	r27, r0
     dd8:	a1 1d       	adc	r26, r1
     dda:	62 1f       	adc	r22, r18
     ddc:	83 9f       	mul	r24, r19
     dde:	a0 0d       	add	r26, r0
     de0:	61 1d       	adc	r22, r1
     de2:	22 1f       	adc	r18, r18
     de4:	74 9f       	mul	r23, r20
     de6:	33 27       	eor	r19, r19
     de8:	a0 0d       	add	r26, r0
     dea:	61 1d       	adc	r22, r1
     dec:	23 1f       	adc	r18, r19
     dee:	84 9f       	mul	r24, r20
     df0:	60 0d       	add	r22, r0
     df2:	21 1d       	adc	r18, r1
     df4:	82 2f       	mov	r24, r18
     df6:	76 2f       	mov	r23, r22
     df8:	6a 2f       	mov	r22, r26
     dfa:	11 24       	eor	r1, r1
     dfc:	9f 57       	subi	r25, 0x7F	; 127
     dfe:	50 40       	sbci	r21, 0x00	; 0
     e00:	9a f0       	brmi	.+38     	; 0xe28 <__mulsf3_pse+0x88>
     e02:	f1 f0       	breq	.+60     	; 0xe40 <__mulsf3_pse+0xa0>
     e04:	88 23       	and	r24, r24
     e06:	4a f0       	brmi	.+18     	; 0xe1a <__mulsf3_pse+0x7a>
     e08:	ee 0f       	add	r30, r30
     e0a:	ff 1f       	adc	r31, r31
     e0c:	bb 1f       	adc	r27, r27
     e0e:	66 1f       	adc	r22, r22
     e10:	77 1f       	adc	r23, r23
     e12:	88 1f       	adc	r24, r24
     e14:	91 50       	subi	r25, 0x01	; 1
     e16:	50 40       	sbci	r21, 0x00	; 0
     e18:	a9 f7       	brne	.-22     	; 0xe04 <__mulsf3_pse+0x64>
     e1a:	9e 3f       	cpi	r25, 0xFE	; 254
     e1c:	51 05       	cpc	r21, r1
     e1e:	80 f0       	brcs	.+32     	; 0xe40 <__mulsf3_pse+0xa0>
     e20:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_inf>
     e24:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_szero>
     e28:	5f 3f       	cpi	r21, 0xFF	; 255
     e2a:	e4 f3       	brlt	.-8      	; 0xe24 <__mulsf3_pse+0x84>
     e2c:	98 3e       	cpi	r25, 0xE8	; 232
     e2e:	d4 f3       	brlt	.-12     	; 0xe24 <__mulsf3_pse+0x84>
     e30:	86 95       	lsr	r24
     e32:	77 95       	ror	r23
     e34:	67 95       	ror	r22
     e36:	b7 95       	ror	r27
     e38:	f7 95       	ror	r31
     e3a:	e7 95       	ror	r30
     e3c:	9f 5f       	subi	r25, 0xFF	; 255
     e3e:	c1 f7       	brne	.-16     	; 0xe30 <__mulsf3_pse+0x90>
     e40:	fe 2b       	or	r31, r30
     e42:	88 0f       	add	r24, r24
     e44:	91 1d       	adc	r25, r1
     e46:	96 95       	lsr	r25
     e48:	87 95       	ror	r24
     e4a:	97 f9       	bld	r25, 7
     e4c:	08 95       	ret

00000e4e <__fp_inf>:
     e4e:	97 f9       	bld	r25, 7
     e50:	9f 67       	ori	r25, 0x7F	; 127
     e52:	80 e8       	ldi	r24, 0x80	; 128
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	08 95       	ret

00000e5a <__fp_nan>:
     e5a:	9f ef       	ldi	r25, 0xFF	; 255
     e5c:	80 ec       	ldi	r24, 0xC0	; 192
     e5e:	08 95       	ret

00000e60 <__fp_pscA>:
     e60:	00 24       	eor	r0, r0
     e62:	0a 94       	dec	r0
     e64:	16 16       	cp	r1, r22
     e66:	17 06       	cpc	r1, r23
     e68:	18 06       	cpc	r1, r24
     e6a:	09 06       	cpc	r0, r25
     e6c:	08 95       	ret

00000e6e <__fp_pscB>:
     e6e:	00 24       	eor	r0, r0
     e70:	0a 94       	dec	r0
     e72:	12 16       	cp	r1, r18
     e74:	13 06       	cpc	r1, r19
     e76:	14 06       	cpc	r1, r20
     e78:	05 06       	cpc	r0, r21
     e7a:	08 95       	ret

00000e7c <__fp_round>:
     e7c:	09 2e       	mov	r0, r25
     e7e:	03 94       	inc	r0
     e80:	00 0c       	add	r0, r0
     e82:	11 f4       	brne	.+4      	; 0xe88 <__fp_round+0xc>
     e84:	88 23       	and	r24, r24
     e86:	52 f0       	brmi	.+20     	; 0xe9c <__fp_round+0x20>
     e88:	bb 0f       	add	r27, r27
     e8a:	40 f4       	brcc	.+16     	; 0xe9c <__fp_round+0x20>
     e8c:	bf 2b       	or	r27, r31
     e8e:	11 f4       	brne	.+4      	; 0xe94 <__fp_round+0x18>
     e90:	60 ff       	sbrs	r22, 0
     e92:	04 c0       	rjmp	.+8      	; 0xe9c <__fp_round+0x20>
     e94:	6f 5f       	subi	r22, 0xFF	; 255
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	8f 4f       	sbci	r24, 0xFF	; 255
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	08 95       	ret

00000e9e <__udivmodsi4>:
     e9e:	a1 e2       	ldi	r26, 0x21	; 33
     ea0:	1a 2e       	mov	r1, r26
     ea2:	aa 1b       	sub	r26, r26
     ea4:	bb 1b       	sub	r27, r27
     ea6:	fd 01       	movw	r30, r26
     ea8:	0d c0       	rjmp	.+26     	; 0xec4 <__udivmodsi4_ep>

00000eaa <__udivmodsi4_loop>:
     eaa:	aa 1f       	adc	r26, r26
     eac:	bb 1f       	adc	r27, r27
     eae:	ee 1f       	adc	r30, r30
     eb0:	ff 1f       	adc	r31, r31
     eb2:	a2 17       	cp	r26, r18
     eb4:	b3 07       	cpc	r27, r19
     eb6:	e4 07       	cpc	r30, r20
     eb8:	f5 07       	cpc	r31, r21
     eba:	20 f0       	brcs	.+8      	; 0xec4 <__udivmodsi4_ep>
     ebc:	a2 1b       	sub	r26, r18
     ebe:	b3 0b       	sbc	r27, r19
     ec0:	e4 0b       	sbc	r30, r20
     ec2:	f5 0b       	sbc	r31, r21

00000ec4 <__udivmodsi4_ep>:
     ec4:	66 1f       	adc	r22, r22
     ec6:	77 1f       	adc	r23, r23
     ec8:	88 1f       	adc	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	1a 94       	dec	r1
     ece:	69 f7       	brne	.-38     	; 0xeaa <__udivmodsi4_loop>
     ed0:	60 95       	com	r22
     ed2:	70 95       	com	r23
     ed4:	80 95       	com	r24
     ed6:	90 95       	com	r25
     ed8:	9b 01       	movw	r18, r22
     eda:	ac 01       	movw	r20, r24
     edc:	bd 01       	movw	r22, r26
     ede:	cf 01       	movw	r24, r30
     ee0:	08 95       	ret

00000ee2 <__muluhisi3>:
     ee2:	0e 94 7c 07 	call	0xef8	; 0xef8 <__umulhisi3>
     ee6:	a5 9f       	mul	r26, r21
     ee8:	90 0d       	add	r25, r0
     eea:	b4 9f       	mul	r27, r20
     eec:	90 0d       	add	r25, r0
     eee:	a4 9f       	mul	r26, r20
     ef0:	80 0d       	add	r24, r0
     ef2:	91 1d       	adc	r25, r1
     ef4:	11 24       	eor	r1, r1
     ef6:	08 95       	ret

00000ef8 <__umulhisi3>:
     ef8:	a2 9f       	mul	r26, r18
     efa:	b0 01       	movw	r22, r0
     efc:	b3 9f       	mul	r27, r19
     efe:	c0 01       	movw	r24, r0
     f00:	a3 9f       	mul	r26, r19
     f02:	70 0d       	add	r23, r0
     f04:	81 1d       	adc	r24, r1
     f06:	11 24       	eor	r1, r1
     f08:	91 1d       	adc	r25, r1
     f0a:	b2 9f       	mul	r27, r18
     f0c:	70 0d       	add	r23, r0
     f0e:	81 1d       	adc	r24, r1
     f10:	11 24       	eor	r1, r1
     f12:	91 1d       	adc	r25, r1
     f14:	08 95       	ret

00000f16 <sprintf>:
     f16:	ae e0       	ldi	r26, 0x0E	; 14
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e1 e9       	ldi	r30, 0x91	; 145
     f1c:	f7 e0       	ldi	r31, 0x07	; 7
     f1e:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__prologue_saves__+0x1c>
     f22:	0d 89       	ldd	r16, Y+21	; 0x15
     f24:	1e 89       	ldd	r17, Y+22	; 0x16
     f26:	86 e0       	ldi	r24, 0x06	; 6
     f28:	8c 83       	std	Y+4, r24	; 0x04
     f2a:	1a 83       	std	Y+2, r17	; 0x02
     f2c:	09 83       	std	Y+1, r16	; 0x01
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	9f e7       	ldi	r25, 0x7F	; 127
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	8d 83       	std	Y+5, r24	; 0x05
     f36:	ae 01       	movw	r20, r28
     f38:	47 5e       	subi	r20, 0xE7	; 231
     f3a:	5f 4f       	sbci	r21, 0xFF	; 255
     f3c:	6f 89       	ldd	r22, Y+23	; 0x17
     f3e:	78 8d       	ldd	r23, Y+24	; 0x18
     f40:	ce 01       	movw	r24, r28
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vfprintf>
     f48:	ef 81       	ldd	r30, Y+7	; 0x07
     f4a:	f8 85       	ldd	r31, Y+8	; 0x08
     f4c:	e0 0f       	add	r30, r16
     f4e:	f1 1f       	adc	r31, r17
     f50:	10 82       	st	Z, r1
     f52:	2e 96       	adiw	r28, 0x0e	; 14
     f54:	e4 e0       	ldi	r30, 0x04	; 4
     f56:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__epilogue_restores__+0x1c>

00000f5a <vfprintf>:
     f5a:	ab e0       	ldi	r26, 0x0B	; 11
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e3 eb       	ldi	r30, 0xB3	; 179
     f60:	f7 e0       	ldi	r31, 0x07	; 7
     f62:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__prologue_saves__>
     f66:	6c 01       	movw	r12, r24
     f68:	7b 01       	movw	r14, r22
     f6a:	8a 01       	movw	r16, r20
     f6c:	fc 01       	movw	r30, r24
     f6e:	17 82       	std	Z+7, r1	; 0x07
     f70:	16 82       	std	Z+6, r1	; 0x06
     f72:	83 81       	ldd	r24, Z+3	; 0x03
     f74:	81 ff       	sbrs	r24, 1
     f76:	cc c1       	rjmp	.+920    	; 0x1310 <vfprintf+0x3b6>
     f78:	ce 01       	movw	r24, r28
     f7a:	01 96       	adiw	r24, 0x01	; 1
     f7c:	3c 01       	movw	r6, r24
     f7e:	f6 01       	movw	r30, r12
     f80:	93 81       	ldd	r25, Z+3	; 0x03
     f82:	f7 01       	movw	r30, r14
     f84:	93 fd       	sbrc	r25, 3
     f86:	85 91       	lpm	r24, Z+
     f88:	93 ff       	sbrs	r25, 3
     f8a:	81 91       	ld	r24, Z+
     f8c:	7f 01       	movw	r14, r30
     f8e:	88 23       	and	r24, r24
     f90:	09 f4       	brne	.+2      	; 0xf94 <vfprintf+0x3a>
     f92:	ba c1       	rjmp	.+884    	; 0x1308 <vfprintf+0x3ae>
     f94:	85 32       	cpi	r24, 0x25	; 37
     f96:	39 f4       	brne	.+14     	; 0xfa6 <vfprintf+0x4c>
     f98:	93 fd       	sbrc	r25, 3
     f9a:	85 91       	lpm	r24, Z+
     f9c:	93 ff       	sbrs	r25, 3
     f9e:	81 91       	ld	r24, Z+
     fa0:	7f 01       	movw	r14, r30
     fa2:	85 32       	cpi	r24, 0x25	; 37
     fa4:	29 f4       	brne	.+10     	; 0xfb0 <vfprintf+0x56>
     fa6:	b6 01       	movw	r22, r12
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 a4 09 	call	0x1348	; 0x1348 <fputc>
     fae:	e7 cf       	rjmp	.-50     	; 0xf7e <vfprintf+0x24>
     fb0:	91 2c       	mov	r9, r1
     fb2:	21 2c       	mov	r2, r1
     fb4:	31 2c       	mov	r3, r1
     fb6:	ff e1       	ldi	r31, 0x1F	; 31
     fb8:	f3 15       	cp	r31, r3
     fba:	d8 f0       	brcs	.+54     	; 0xff2 <vfprintf+0x98>
     fbc:	8b 32       	cpi	r24, 0x2B	; 43
     fbe:	79 f0       	breq	.+30     	; 0xfde <vfprintf+0x84>
     fc0:	38 f4       	brcc	.+14     	; 0xfd0 <vfprintf+0x76>
     fc2:	80 32       	cpi	r24, 0x20	; 32
     fc4:	79 f0       	breq	.+30     	; 0xfe4 <vfprintf+0x8a>
     fc6:	83 32       	cpi	r24, 0x23	; 35
     fc8:	a1 f4       	brne	.+40     	; 0xff2 <vfprintf+0x98>
     fca:	23 2d       	mov	r18, r3
     fcc:	20 61       	ori	r18, 0x10	; 16
     fce:	1d c0       	rjmp	.+58     	; 0x100a <vfprintf+0xb0>
     fd0:	8d 32       	cpi	r24, 0x2D	; 45
     fd2:	61 f0       	breq	.+24     	; 0xfec <vfprintf+0x92>
     fd4:	80 33       	cpi	r24, 0x30	; 48
     fd6:	69 f4       	brne	.+26     	; 0xff2 <vfprintf+0x98>
     fd8:	23 2d       	mov	r18, r3
     fda:	21 60       	ori	r18, 0x01	; 1
     fdc:	16 c0       	rjmp	.+44     	; 0x100a <vfprintf+0xb0>
     fde:	83 2d       	mov	r24, r3
     fe0:	82 60       	ori	r24, 0x02	; 2
     fe2:	38 2e       	mov	r3, r24
     fe4:	e3 2d       	mov	r30, r3
     fe6:	e4 60       	ori	r30, 0x04	; 4
     fe8:	3e 2e       	mov	r3, r30
     fea:	2a c0       	rjmp	.+84     	; 0x1040 <vfprintf+0xe6>
     fec:	f3 2d       	mov	r31, r3
     fee:	f8 60       	ori	r31, 0x08	; 8
     ff0:	1d c0       	rjmp	.+58     	; 0x102c <vfprintf+0xd2>
     ff2:	37 fc       	sbrc	r3, 7
     ff4:	2d c0       	rjmp	.+90     	; 0x1050 <vfprintf+0xf6>
     ff6:	20 ed       	ldi	r18, 0xD0	; 208
     ff8:	28 0f       	add	r18, r24
     ffa:	2a 30       	cpi	r18, 0x0A	; 10
     ffc:	40 f0       	brcs	.+16     	; 0x100e <vfprintf+0xb4>
     ffe:	8e 32       	cpi	r24, 0x2E	; 46
    1000:	b9 f4       	brne	.+46     	; 0x1030 <vfprintf+0xd6>
    1002:	36 fc       	sbrc	r3, 6
    1004:	81 c1       	rjmp	.+770    	; 0x1308 <vfprintf+0x3ae>
    1006:	23 2d       	mov	r18, r3
    1008:	20 64       	ori	r18, 0x40	; 64
    100a:	32 2e       	mov	r3, r18
    100c:	19 c0       	rjmp	.+50     	; 0x1040 <vfprintf+0xe6>
    100e:	36 fe       	sbrs	r3, 6
    1010:	06 c0       	rjmp	.+12     	; 0x101e <vfprintf+0xc4>
    1012:	8a e0       	ldi	r24, 0x0A	; 10
    1014:	98 9e       	mul	r9, r24
    1016:	20 0d       	add	r18, r0
    1018:	11 24       	eor	r1, r1
    101a:	92 2e       	mov	r9, r18
    101c:	11 c0       	rjmp	.+34     	; 0x1040 <vfprintf+0xe6>
    101e:	ea e0       	ldi	r30, 0x0A	; 10
    1020:	2e 9e       	mul	r2, r30
    1022:	20 0d       	add	r18, r0
    1024:	11 24       	eor	r1, r1
    1026:	22 2e       	mov	r2, r18
    1028:	f3 2d       	mov	r31, r3
    102a:	f0 62       	ori	r31, 0x20	; 32
    102c:	3f 2e       	mov	r3, r31
    102e:	08 c0       	rjmp	.+16     	; 0x1040 <vfprintf+0xe6>
    1030:	8c 36       	cpi	r24, 0x6C	; 108
    1032:	21 f4       	brne	.+8      	; 0x103c <vfprintf+0xe2>
    1034:	83 2d       	mov	r24, r3
    1036:	80 68       	ori	r24, 0x80	; 128
    1038:	38 2e       	mov	r3, r24
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <vfprintf+0xe6>
    103c:	88 36       	cpi	r24, 0x68	; 104
    103e:	41 f4       	brne	.+16     	; 0x1050 <vfprintf+0xf6>
    1040:	f7 01       	movw	r30, r14
    1042:	93 fd       	sbrc	r25, 3
    1044:	85 91       	lpm	r24, Z+
    1046:	93 ff       	sbrs	r25, 3
    1048:	81 91       	ld	r24, Z+
    104a:	7f 01       	movw	r14, r30
    104c:	81 11       	cpse	r24, r1
    104e:	b3 cf       	rjmp	.-154    	; 0xfb6 <vfprintf+0x5c>
    1050:	98 2f       	mov	r25, r24
    1052:	9f 7d       	andi	r25, 0xDF	; 223
    1054:	95 54       	subi	r25, 0x45	; 69
    1056:	93 30       	cpi	r25, 0x03	; 3
    1058:	28 f4       	brcc	.+10     	; 0x1064 <vfprintf+0x10a>
    105a:	0c 5f       	subi	r16, 0xFC	; 252
    105c:	1f 4f       	sbci	r17, 0xFF	; 255
    105e:	9f e3       	ldi	r25, 0x3F	; 63
    1060:	99 83       	std	Y+1, r25	; 0x01
    1062:	0d c0       	rjmp	.+26     	; 0x107e <vfprintf+0x124>
    1064:	83 36       	cpi	r24, 0x63	; 99
    1066:	31 f0       	breq	.+12     	; 0x1074 <vfprintf+0x11a>
    1068:	83 37       	cpi	r24, 0x73	; 115
    106a:	71 f0       	breq	.+28     	; 0x1088 <vfprintf+0x12e>
    106c:	83 35       	cpi	r24, 0x53	; 83
    106e:	09 f0       	breq	.+2      	; 0x1072 <vfprintf+0x118>
    1070:	59 c0       	rjmp	.+178    	; 0x1124 <vfprintf+0x1ca>
    1072:	21 c0       	rjmp	.+66     	; 0x10b6 <vfprintf+0x15c>
    1074:	f8 01       	movw	r30, r16
    1076:	80 81       	ld	r24, Z
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	0e 5f       	subi	r16, 0xFE	; 254
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	88 24       	eor	r8, r8
    1080:	83 94       	inc	r8
    1082:	91 2c       	mov	r9, r1
    1084:	53 01       	movw	r10, r6
    1086:	13 c0       	rjmp	.+38     	; 0x10ae <vfprintf+0x154>
    1088:	28 01       	movw	r4, r16
    108a:	f2 e0       	ldi	r31, 0x02	; 2
    108c:	4f 0e       	add	r4, r31
    108e:	51 1c       	adc	r5, r1
    1090:	f8 01       	movw	r30, r16
    1092:	a0 80       	ld	r10, Z
    1094:	b1 80       	ldd	r11, Z+1	; 0x01
    1096:	36 fe       	sbrs	r3, 6
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <vfprintf+0x146>
    109a:	69 2d       	mov	r22, r9
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <vfprintf+0x14a>
    10a0:	6f ef       	ldi	r22, 0xFF	; 255
    10a2:	7f ef       	ldi	r23, 0xFF	; 255
    10a4:	c5 01       	movw	r24, r10
    10a6:	0e 94 99 09 	call	0x1332	; 0x1332 <strnlen>
    10aa:	4c 01       	movw	r8, r24
    10ac:	82 01       	movw	r16, r4
    10ae:	f3 2d       	mov	r31, r3
    10b0:	ff 77       	andi	r31, 0x7F	; 127
    10b2:	3f 2e       	mov	r3, r31
    10b4:	16 c0       	rjmp	.+44     	; 0x10e2 <vfprintf+0x188>
    10b6:	28 01       	movw	r4, r16
    10b8:	22 e0       	ldi	r18, 0x02	; 2
    10ba:	42 0e       	add	r4, r18
    10bc:	51 1c       	adc	r5, r1
    10be:	f8 01       	movw	r30, r16
    10c0:	a0 80       	ld	r10, Z
    10c2:	b1 80       	ldd	r11, Z+1	; 0x01
    10c4:	36 fe       	sbrs	r3, 6
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <vfprintf+0x174>
    10c8:	69 2d       	mov	r22, r9
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <vfprintf+0x178>
    10ce:	6f ef       	ldi	r22, 0xFF	; 255
    10d0:	7f ef       	ldi	r23, 0xFF	; 255
    10d2:	c5 01       	movw	r24, r10
    10d4:	0e 94 8e 09 	call	0x131c	; 0x131c <strnlen_P>
    10d8:	4c 01       	movw	r8, r24
    10da:	f3 2d       	mov	r31, r3
    10dc:	f0 68       	ori	r31, 0x80	; 128
    10de:	3f 2e       	mov	r3, r31
    10e0:	82 01       	movw	r16, r4
    10e2:	33 fc       	sbrc	r3, 3
    10e4:	1b c0       	rjmp	.+54     	; 0x111c <vfprintf+0x1c2>
    10e6:	82 2d       	mov	r24, r2
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	88 16       	cp	r8, r24
    10ec:	99 06       	cpc	r9, r25
    10ee:	b0 f4       	brcc	.+44     	; 0x111c <vfprintf+0x1c2>
    10f0:	b6 01       	movw	r22, r12
    10f2:	80 e2       	ldi	r24, 0x20	; 32
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 a4 09 	call	0x1348	; 0x1348 <fputc>
    10fa:	2a 94       	dec	r2
    10fc:	f4 cf       	rjmp	.-24     	; 0x10e6 <vfprintf+0x18c>
    10fe:	f5 01       	movw	r30, r10
    1100:	37 fc       	sbrc	r3, 7
    1102:	85 91       	lpm	r24, Z+
    1104:	37 fe       	sbrs	r3, 7
    1106:	81 91       	ld	r24, Z+
    1108:	5f 01       	movw	r10, r30
    110a:	b6 01       	movw	r22, r12
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 a4 09 	call	0x1348	; 0x1348 <fputc>
    1112:	21 10       	cpse	r2, r1
    1114:	2a 94       	dec	r2
    1116:	21 e0       	ldi	r18, 0x01	; 1
    1118:	82 1a       	sub	r8, r18
    111a:	91 08       	sbc	r9, r1
    111c:	81 14       	cp	r8, r1
    111e:	91 04       	cpc	r9, r1
    1120:	71 f7       	brne	.-36     	; 0x10fe <vfprintf+0x1a4>
    1122:	e8 c0       	rjmp	.+464    	; 0x12f4 <vfprintf+0x39a>
    1124:	84 36       	cpi	r24, 0x64	; 100
    1126:	11 f0       	breq	.+4      	; 0x112c <vfprintf+0x1d2>
    1128:	89 36       	cpi	r24, 0x69	; 105
    112a:	41 f5       	brne	.+80     	; 0x117c <vfprintf+0x222>
    112c:	f8 01       	movw	r30, r16
    112e:	37 fe       	sbrs	r3, 7
    1130:	07 c0       	rjmp	.+14     	; 0x1140 <vfprintf+0x1e6>
    1132:	60 81       	ld	r22, Z
    1134:	71 81       	ldd	r23, Z+1	; 0x01
    1136:	82 81       	ldd	r24, Z+2	; 0x02
    1138:	93 81       	ldd	r25, Z+3	; 0x03
    113a:	0c 5f       	subi	r16, 0xFC	; 252
    113c:	1f 4f       	sbci	r17, 0xFF	; 255
    113e:	08 c0       	rjmp	.+16     	; 0x1150 <vfprintf+0x1f6>
    1140:	60 81       	ld	r22, Z
    1142:	71 81       	ldd	r23, Z+1	; 0x01
    1144:	07 2e       	mov	r0, r23
    1146:	00 0c       	add	r0, r0
    1148:	88 0b       	sbc	r24, r24
    114a:	99 0b       	sbc	r25, r25
    114c:	0e 5f       	subi	r16, 0xFE	; 254
    114e:	1f 4f       	sbci	r17, 0xFF	; 255
    1150:	f3 2d       	mov	r31, r3
    1152:	ff 76       	andi	r31, 0x6F	; 111
    1154:	3f 2e       	mov	r3, r31
    1156:	97 ff       	sbrs	r25, 7
    1158:	09 c0       	rjmp	.+18     	; 0x116c <vfprintf+0x212>
    115a:	90 95       	com	r25
    115c:	80 95       	com	r24
    115e:	70 95       	com	r23
    1160:	61 95       	neg	r22
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	8f 4f       	sbci	r24, 0xFF	; 255
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	f0 68       	ori	r31, 0x80	; 128
    116a:	3f 2e       	mov	r3, r31
    116c:	2a e0       	ldi	r18, 0x0A	; 10
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	a3 01       	movw	r20, r6
    1172:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__ultoa_invert>
    1176:	88 2e       	mov	r8, r24
    1178:	86 18       	sub	r8, r6
    117a:	45 c0       	rjmp	.+138    	; 0x1206 <vfprintf+0x2ac>
    117c:	85 37       	cpi	r24, 0x75	; 117
    117e:	31 f4       	brne	.+12     	; 0x118c <vfprintf+0x232>
    1180:	23 2d       	mov	r18, r3
    1182:	2f 7e       	andi	r18, 0xEF	; 239
    1184:	b2 2e       	mov	r11, r18
    1186:	2a e0       	ldi	r18, 0x0A	; 10
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	25 c0       	rjmp	.+74     	; 0x11d6 <vfprintf+0x27c>
    118c:	93 2d       	mov	r25, r3
    118e:	99 7f       	andi	r25, 0xF9	; 249
    1190:	b9 2e       	mov	r11, r25
    1192:	8f 36       	cpi	r24, 0x6F	; 111
    1194:	c1 f0       	breq	.+48     	; 0x11c6 <vfprintf+0x26c>
    1196:	18 f4       	brcc	.+6      	; 0x119e <vfprintf+0x244>
    1198:	88 35       	cpi	r24, 0x58	; 88
    119a:	79 f0       	breq	.+30     	; 0x11ba <vfprintf+0x260>
    119c:	b5 c0       	rjmp	.+362    	; 0x1308 <vfprintf+0x3ae>
    119e:	80 37       	cpi	r24, 0x70	; 112
    11a0:	19 f0       	breq	.+6      	; 0x11a8 <vfprintf+0x24e>
    11a2:	88 37       	cpi	r24, 0x78	; 120
    11a4:	21 f0       	breq	.+8      	; 0x11ae <vfprintf+0x254>
    11a6:	b0 c0       	rjmp	.+352    	; 0x1308 <vfprintf+0x3ae>
    11a8:	e9 2f       	mov	r30, r25
    11aa:	e0 61       	ori	r30, 0x10	; 16
    11ac:	be 2e       	mov	r11, r30
    11ae:	b4 fe       	sbrs	r11, 4
    11b0:	0d c0       	rjmp	.+26     	; 0x11cc <vfprintf+0x272>
    11b2:	fb 2d       	mov	r31, r11
    11b4:	f4 60       	ori	r31, 0x04	; 4
    11b6:	bf 2e       	mov	r11, r31
    11b8:	09 c0       	rjmp	.+18     	; 0x11cc <vfprintf+0x272>
    11ba:	34 fe       	sbrs	r3, 4
    11bc:	0a c0       	rjmp	.+20     	; 0x11d2 <vfprintf+0x278>
    11be:	29 2f       	mov	r18, r25
    11c0:	26 60       	ori	r18, 0x06	; 6
    11c2:	b2 2e       	mov	r11, r18
    11c4:	06 c0       	rjmp	.+12     	; 0x11d2 <vfprintf+0x278>
    11c6:	28 e0       	ldi	r18, 0x08	; 8
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	05 c0       	rjmp	.+10     	; 0x11d6 <vfprintf+0x27c>
    11cc:	20 e1       	ldi	r18, 0x10	; 16
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <vfprintf+0x27c>
    11d2:	20 e1       	ldi	r18, 0x10	; 16
    11d4:	32 e0       	ldi	r19, 0x02	; 2
    11d6:	f8 01       	movw	r30, r16
    11d8:	b7 fe       	sbrs	r11, 7
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <vfprintf+0x290>
    11dc:	60 81       	ld	r22, Z
    11de:	71 81       	ldd	r23, Z+1	; 0x01
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	93 81       	ldd	r25, Z+3	; 0x03
    11e4:	0c 5f       	subi	r16, 0xFC	; 252
    11e6:	1f 4f       	sbci	r17, 0xFF	; 255
    11e8:	06 c0       	rjmp	.+12     	; 0x11f6 <vfprintf+0x29c>
    11ea:	60 81       	ld	r22, Z
    11ec:	71 81       	ldd	r23, Z+1	; 0x01
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0e 5f       	subi	r16, 0xFE	; 254
    11f4:	1f 4f       	sbci	r17, 0xFF	; 255
    11f6:	a3 01       	movw	r20, r6
    11f8:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__ultoa_invert>
    11fc:	88 2e       	mov	r8, r24
    11fe:	86 18       	sub	r8, r6
    1200:	fb 2d       	mov	r31, r11
    1202:	ff 77       	andi	r31, 0x7F	; 127
    1204:	3f 2e       	mov	r3, r31
    1206:	36 fe       	sbrs	r3, 6
    1208:	0d c0       	rjmp	.+26     	; 0x1224 <vfprintf+0x2ca>
    120a:	23 2d       	mov	r18, r3
    120c:	2e 7f       	andi	r18, 0xFE	; 254
    120e:	a2 2e       	mov	r10, r18
    1210:	89 14       	cp	r8, r9
    1212:	58 f4       	brcc	.+22     	; 0x122a <vfprintf+0x2d0>
    1214:	34 fe       	sbrs	r3, 4
    1216:	0b c0       	rjmp	.+22     	; 0x122e <vfprintf+0x2d4>
    1218:	32 fc       	sbrc	r3, 2
    121a:	09 c0       	rjmp	.+18     	; 0x122e <vfprintf+0x2d4>
    121c:	83 2d       	mov	r24, r3
    121e:	8e 7e       	andi	r24, 0xEE	; 238
    1220:	a8 2e       	mov	r10, r24
    1222:	05 c0       	rjmp	.+10     	; 0x122e <vfprintf+0x2d4>
    1224:	b8 2c       	mov	r11, r8
    1226:	a3 2c       	mov	r10, r3
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <vfprintf+0x2d6>
    122a:	b8 2c       	mov	r11, r8
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <vfprintf+0x2d6>
    122e:	b9 2c       	mov	r11, r9
    1230:	a4 fe       	sbrs	r10, 4
    1232:	0f c0       	rjmp	.+30     	; 0x1252 <vfprintf+0x2f8>
    1234:	fe 01       	movw	r30, r28
    1236:	e8 0d       	add	r30, r8
    1238:	f1 1d       	adc	r31, r1
    123a:	80 81       	ld	r24, Z
    123c:	80 33       	cpi	r24, 0x30	; 48
    123e:	21 f4       	brne	.+8      	; 0x1248 <vfprintf+0x2ee>
    1240:	9a 2d       	mov	r25, r10
    1242:	99 7e       	andi	r25, 0xE9	; 233
    1244:	a9 2e       	mov	r10, r25
    1246:	09 c0       	rjmp	.+18     	; 0x125a <vfprintf+0x300>
    1248:	a2 fe       	sbrs	r10, 2
    124a:	06 c0       	rjmp	.+12     	; 0x1258 <vfprintf+0x2fe>
    124c:	b3 94       	inc	r11
    124e:	b3 94       	inc	r11
    1250:	04 c0       	rjmp	.+8      	; 0x125a <vfprintf+0x300>
    1252:	8a 2d       	mov	r24, r10
    1254:	86 78       	andi	r24, 0x86	; 134
    1256:	09 f0       	breq	.+2      	; 0x125a <vfprintf+0x300>
    1258:	b3 94       	inc	r11
    125a:	a3 fc       	sbrc	r10, 3
    125c:	11 c0       	rjmp	.+34     	; 0x1280 <vfprintf+0x326>
    125e:	a0 fe       	sbrs	r10, 0
    1260:	06 c0       	rjmp	.+12     	; 0x126e <vfprintf+0x314>
    1262:	b2 14       	cp	r11, r2
    1264:	88 f4       	brcc	.+34     	; 0x1288 <vfprintf+0x32e>
    1266:	28 0c       	add	r2, r8
    1268:	92 2c       	mov	r9, r2
    126a:	9b 18       	sub	r9, r11
    126c:	0e c0       	rjmp	.+28     	; 0x128a <vfprintf+0x330>
    126e:	b2 14       	cp	r11, r2
    1270:	60 f4       	brcc	.+24     	; 0x128a <vfprintf+0x330>
    1272:	b6 01       	movw	r22, r12
    1274:	80 e2       	ldi	r24, 0x20	; 32
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 a4 09 	call	0x1348	; 0x1348 <fputc>
    127c:	b3 94       	inc	r11
    127e:	f7 cf       	rjmp	.-18     	; 0x126e <vfprintf+0x314>
    1280:	b2 14       	cp	r11, r2
    1282:	18 f4       	brcc	.+6      	; 0x128a <vfprintf+0x330>
    1284:	2b 18       	sub	r2, r11
    1286:	02 c0       	rjmp	.+4      	; 0x128c <vfprintf+0x332>
    1288:	98 2c       	mov	r9, r8
    128a:	21 2c       	mov	r2, r1
    128c:	a4 fe       	sbrs	r10, 4
    128e:	10 c0       	rjmp	.+32     	; 0x12b0 <vfprintf+0x356>
    1290:	b6 01       	movw	r22, r12
    1292:	80 e3       	ldi	r24, 0x30	; 48
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 a4 09 	call	0x1348	; 0x1348 <fputc>
    129a:	a2 fe       	sbrs	r10, 2
    129c:	17 c0       	rjmp	.+46     	; 0x12cc <vfprintf+0x372>
    129e:	a1 fc       	sbrc	r10, 1
    12a0:	03 c0       	rjmp	.+6      	; 0x12a8 <vfprintf+0x34e>
    12a2:	88 e7       	ldi	r24, 0x78	; 120
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <vfprintf+0x352>
    12a8:	88 e5       	ldi	r24, 0x58	; 88
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	b6 01       	movw	r22, r12
    12ae:	0c c0       	rjmp	.+24     	; 0x12c8 <vfprintf+0x36e>
    12b0:	8a 2d       	mov	r24, r10
    12b2:	86 78       	andi	r24, 0x86	; 134
    12b4:	59 f0       	breq	.+22     	; 0x12cc <vfprintf+0x372>
    12b6:	a1 fe       	sbrs	r10, 1
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <vfprintf+0x364>
    12ba:	8b e2       	ldi	r24, 0x2B	; 43
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <vfprintf+0x366>
    12be:	80 e2       	ldi	r24, 0x20	; 32
    12c0:	a7 fc       	sbrc	r10, 7
    12c2:	8d e2       	ldi	r24, 0x2D	; 45
    12c4:	b6 01       	movw	r22, r12
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 a4 09 	call	0x1348	; 0x1348 <fputc>
    12cc:	89 14       	cp	r8, r9
    12ce:	38 f4       	brcc	.+14     	; 0x12de <vfprintf+0x384>
    12d0:	b6 01       	movw	r22, r12
    12d2:	80 e3       	ldi	r24, 0x30	; 48
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 a4 09 	call	0x1348	; 0x1348 <fputc>
    12da:	9a 94       	dec	r9
    12dc:	f7 cf       	rjmp	.-18     	; 0x12cc <vfprintf+0x372>
    12de:	8a 94       	dec	r8
    12e0:	f3 01       	movw	r30, r6
    12e2:	e8 0d       	add	r30, r8
    12e4:	f1 1d       	adc	r31, r1
    12e6:	80 81       	ld	r24, Z
    12e8:	b6 01       	movw	r22, r12
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 a4 09 	call	0x1348	; 0x1348 <fputc>
    12f0:	81 10       	cpse	r8, r1
    12f2:	f5 cf       	rjmp	.-22     	; 0x12de <vfprintf+0x384>
    12f4:	22 20       	and	r2, r2
    12f6:	09 f4       	brne	.+2      	; 0x12fa <vfprintf+0x3a0>
    12f8:	42 ce       	rjmp	.-892    	; 0xf7e <vfprintf+0x24>
    12fa:	b6 01       	movw	r22, r12
    12fc:	80 e2       	ldi	r24, 0x20	; 32
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 a4 09 	call	0x1348	; 0x1348 <fputc>
    1304:	2a 94       	dec	r2
    1306:	f6 cf       	rjmp	.-20     	; 0x12f4 <vfprintf+0x39a>
    1308:	f6 01       	movw	r30, r12
    130a:	86 81       	ldd	r24, Z+6	; 0x06
    130c:	97 81       	ldd	r25, Z+7	; 0x07
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <vfprintf+0x3ba>
    1310:	8f ef       	ldi	r24, 0xFF	; 255
    1312:	9f ef       	ldi	r25, 0xFF	; 255
    1314:	2b 96       	adiw	r28, 0x0b	; 11
    1316:	e2 e1       	ldi	r30, 0x12	; 18
    1318:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__epilogue_restores__>

0000131c <strnlen_P>:
    131c:	fc 01       	movw	r30, r24
    131e:	05 90       	lpm	r0, Z+
    1320:	61 50       	subi	r22, 0x01	; 1
    1322:	70 40       	sbci	r23, 0x00	; 0
    1324:	01 10       	cpse	r0, r1
    1326:	d8 f7       	brcc	.-10     	; 0x131e <strnlen_P+0x2>
    1328:	80 95       	com	r24
    132a:	90 95       	com	r25
    132c:	8e 0f       	add	r24, r30
    132e:	9f 1f       	adc	r25, r31
    1330:	08 95       	ret

00001332 <strnlen>:
    1332:	fc 01       	movw	r30, r24
    1334:	61 50       	subi	r22, 0x01	; 1
    1336:	70 40       	sbci	r23, 0x00	; 0
    1338:	01 90       	ld	r0, Z+
    133a:	01 10       	cpse	r0, r1
    133c:	d8 f7       	brcc	.-10     	; 0x1334 <strnlen+0x2>
    133e:	80 95       	com	r24
    1340:	90 95       	com	r25
    1342:	8e 0f       	add	r24, r30
    1344:	9f 1f       	adc	r25, r31
    1346:	08 95       	ret

00001348 <fputc>:
    1348:	0f 93       	push	r16
    134a:	1f 93       	push	r17
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	fb 01       	movw	r30, r22
    1352:	23 81       	ldd	r18, Z+3	; 0x03
    1354:	21 fd       	sbrc	r18, 1
    1356:	03 c0       	rjmp	.+6      	; 0x135e <fputc+0x16>
    1358:	8f ef       	ldi	r24, 0xFF	; 255
    135a:	9f ef       	ldi	r25, 0xFF	; 255
    135c:	2c c0       	rjmp	.+88     	; 0x13b6 <fputc+0x6e>
    135e:	22 ff       	sbrs	r18, 2
    1360:	16 c0       	rjmp	.+44     	; 0x138e <fputc+0x46>
    1362:	46 81       	ldd	r20, Z+6	; 0x06
    1364:	57 81       	ldd	r21, Z+7	; 0x07
    1366:	24 81       	ldd	r18, Z+4	; 0x04
    1368:	35 81       	ldd	r19, Z+5	; 0x05
    136a:	42 17       	cp	r20, r18
    136c:	53 07       	cpc	r21, r19
    136e:	44 f4       	brge	.+16     	; 0x1380 <fputc+0x38>
    1370:	a0 81       	ld	r26, Z
    1372:	b1 81       	ldd	r27, Z+1	; 0x01
    1374:	9d 01       	movw	r18, r26
    1376:	2f 5f       	subi	r18, 0xFF	; 255
    1378:	3f 4f       	sbci	r19, 0xFF	; 255
    137a:	31 83       	std	Z+1, r19	; 0x01
    137c:	20 83       	st	Z, r18
    137e:	8c 93       	st	X, r24
    1380:	26 81       	ldd	r18, Z+6	; 0x06
    1382:	37 81       	ldd	r19, Z+7	; 0x07
    1384:	2f 5f       	subi	r18, 0xFF	; 255
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	37 83       	std	Z+7, r19	; 0x07
    138a:	26 83       	std	Z+6, r18	; 0x06
    138c:	14 c0       	rjmp	.+40     	; 0x13b6 <fputc+0x6e>
    138e:	8b 01       	movw	r16, r22
    1390:	ec 01       	movw	r28, r24
    1392:	fb 01       	movw	r30, r22
    1394:	00 84       	ldd	r0, Z+8	; 0x08
    1396:	f1 85       	ldd	r31, Z+9	; 0x09
    1398:	e0 2d       	mov	r30, r0
    139a:	09 95       	icall
    139c:	89 2b       	or	r24, r25
    139e:	e1 f6       	brne	.-72     	; 0x1358 <fputc+0x10>
    13a0:	d8 01       	movw	r26, r16
    13a2:	16 96       	adiw	r26, 0x06	; 6
    13a4:	8d 91       	ld	r24, X+
    13a6:	9c 91       	ld	r25, X
    13a8:	17 97       	sbiw	r26, 0x07	; 7
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	17 96       	adiw	r26, 0x07	; 7
    13ae:	9c 93       	st	X, r25
    13b0:	8e 93       	st	-X, r24
    13b2:	16 97       	sbiw	r26, 0x06	; 6
    13b4:	ce 01       	movw	r24, r28
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	08 95       	ret

000013c0 <__ultoa_invert>:
    13c0:	fa 01       	movw	r30, r20
    13c2:	aa 27       	eor	r26, r26
    13c4:	28 30       	cpi	r18, 0x08	; 8
    13c6:	51 f1       	breq	.+84     	; 0x141c <__ultoa_invert+0x5c>
    13c8:	20 31       	cpi	r18, 0x10	; 16
    13ca:	81 f1       	breq	.+96     	; 0x142c <__ultoa_invert+0x6c>
    13cc:	e8 94       	clt
    13ce:	6f 93       	push	r22
    13d0:	6e 7f       	andi	r22, 0xFE	; 254
    13d2:	6e 5f       	subi	r22, 0xFE	; 254
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	8f 4f       	sbci	r24, 0xFF	; 255
    13d8:	9f 4f       	sbci	r25, 0xFF	; 255
    13da:	af 4f       	sbci	r26, 0xFF	; 255
    13dc:	b1 e0       	ldi	r27, 0x01	; 1
    13de:	3e d0       	rcall	.+124    	; 0x145c <__ultoa_invert+0x9c>
    13e0:	b4 e0       	ldi	r27, 0x04	; 4
    13e2:	3c d0       	rcall	.+120    	; 0x145c <__ultoa_invert+0x9c>
    13e4:	67 0f       	add	r22, r23
    13e6:	78 1f       	adc	r23, r24
    13e8:	89 1f       	adc	r24, r25
    13ea:	9a 1f       	adc	r25, r26
    13ec:	a1 1d       	adc	r26, r1
    13ee:	68 0f       	add	r22, r24
    13f0:	79 1f       	adc	r23, r25
    13f2:	8a 1f       	adc	r24, r26
    13f4:	91 1d       	adc	r25, r1
    13f6:	a1 1d       	adc	r26, r1
    13f8:	6a 0f       	add	r22, r26
    13fa:	71 1d       	adc	r23, r1
    13fc:	81 1d       	adc	r24, r1
    13fe:	91 1d       	adc	r25, r1
    1400:	a1 1d       	adc	r26, r1
    1402:	20 d0       	rcall	.+64     	; 0x1444 <__ultoa_invert+0x84>
    1404:	09 f4       	brne	.+2      	; 0x1408 <__ultoa_invert+0x48>
    1406:	68 94       	set
    1408:	3f 91       	pop	r19
    140a:	2a e0       	ldi	r18, 0x0A	; 10
    140c:	26 9f       	mul	r18, r22
    140e:	11 24       	eor	r1, r1
    1410:	30 19       	sub	r19, r0
    1412:	30 5d       	subi	r19, 0xD0	; 208
    1414:	31 93       	st	Z+, r19
    1416:	de f6       	brtc	.-74     	; 0x13ce <__ultoa_invert+0xe>
    1418:	cf 01       	movw	r24, r30
    141a:	08 95       	ret
    141c:	46 2f       	mov	r20, r22
    141e:	47 70       	andi	r20, 0x07	; 7
    1420:	40 5d       	subi	r20, 0xD0	; 208
    1422:	41 93       	st	Z+, r20
    1424:	b3 e0       	ldi	r27, 0x03	; 3
    1426:	0f d0       	rcall	.+30     	; 0x1446 <__ultoa_invert+0x86>
    1428:	c9 f7       	brne	.-14     	; 0x141c <__ultoa_invert+0x5c>
    142a:	f6 cf       	rjmp	.-20     	; 0x1418 <__ultoa_invert+0x58>
    142c:	46 2f       	mov	r20, r22
    142e:	4f 70       	andi	r20, 0x0F	; 15
    1430:	40 5d       	subi	r20, 0xD0	; 208
    1432:	4a 33       	cpi	r20, 0x3A	; 58
    1434:	18 f0       	brcs	.+6      	; 0x143c <__ultoa_invert+0x7c>
    1436:	49 5d       	subi	r20, 0xD9	; 217
    1438:	31 fd       	sbrc	r19, 1
    143a:	40 52       	subi	r20, 0x20	; 32
    143c:	41 93       	st	Z+, r20
    143e:	02 d0       	rcall	.+4      	; 0x1444 <__ultoa_invert+0x84>
    1440:	a9 f7       	brne	.-22     	; 0x142c <__ultoa_invert+0x6c>
    1442:	ea cf       	rjmp	.-44     	; 0x1418 <__ultoa_invert+0x58>
    1444:	b4 e0       	ldi	r27, 0x04	; 4
    1446:	a6 95       	lsr	r26
    1448:	97 95       	ror	r25
    144a:	87 95       	ror	r24
    144c:	77 95       	ror	r23
    144e:	67 95       	ror	r22
    1450:	ba 95       	dec	r27
    1452:	c9 f7       	brne	.-14     	; 0x1446 <__ultoa_invert+0x86>
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	61 05       	cpc	r22, r1
    1458:	71 05       	cpc	r23, r1
    145a:	08 95       	ret
    145c:	9b 01       	movw	r18, r22
    145e:	ac 01       	movw	r20, r24
    1460:	0a 2e       	mov	r0, r26
    1462:	06 94       	lsr	r0
    1464:	57 95       	ror	r21
    1466:	47 95       	ror	r20
    1468:	37 95       	ror	r19
    146a:	27 95       	ror	r18
    146c:	ba 95       	dec	r27
    146e:	c9 f7       	brne	.-14     	; 0x1462 <__ultoa_invert+0xa2>
    1470:	62 0f       	add	r22, r18
    1472:	73 1f       	adc	r23, r19
    1474:	84 1f       	adc	r24, r20
    1476:	95 1f       	adc	r25, r21
    1478:	a0 1d       	adc	r26, r0
    147a:	08 95       	ret

0000147c <__prologue_saves__>:
    147c:	2f 92       	push	r2
    147e:	3f 92       	push	r3
    1480:	4f 92       	push	r4
    1482:	5f 92       	push	r5
    1484:	6f 92       	push	r6
    1486:	7f 92       	push	r7
    1488:	8f 92       	push	r8
    148a:	9f 92       	push	r9
    148c:	af 92       	push	r10
    148e:	bf 92       	push	r11
    1490:	cf 92       	push	r12
    1492:	df 92       	push	r13
    1494:	ef 92       	push	r14
    1496:	ff 92       	push	r15
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	ca 1b       	sub	r28, r26
    14a6:	db 0b       	sbc	r29, r27
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	09 94       	ijmp

000014b4 <__epilogue_restores__>:
    14b4:	2a 88       	ldd	r2, Y+18	; 0x12
    14b6:	39 88       	ldd	r3, Y+17	; 0x11
    14b8:	48 88       	ldd	r4, Y+16	; 0x10
    14ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    14bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    14be:	7d 84       	ldd	r7, Y+13	; 0x0d
    14c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    14c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    14c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    14c6:	b9 84       	ldd	r11, Y+9	; 0x09
    14c8:	c8 84       	ldd	r12, Y+8	; 0x08
    14ca:	df 80       	ldd	r13, Y+7	; 0x07
    14cc:	ee 80       	ldd	r14, Y+6	; 0x06
    14ce:	fd 80       	ldd	r15, Y+5	; 0x05
    14d0:	0c 81       	ldd	r16, Y+4	; 0x04
    14d2:	1b 81       	ldd	r17, Y+3	; 0x03
    14d4:	aa 81       	ldd	r26, Y+2	; 0x02
    14d6:	b9 81       	ldd	r27, Y+1	; 0x01
    14d8:	ce 0f       	add	r28, r30
    14da:	d1 1d       	adc	r29, r1
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	ed 01       	movw	r28, r26
    14e8:	08 95       	ret

000014ea <_exit>:
    14ea:	f8 94       	cli

000014ec <__stop_program>:
    14ec:	ff cf       	rjmp	.-2      	; 0x14ec <__stop_program>
