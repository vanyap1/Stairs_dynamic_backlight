
backlight_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  0000156e  00001602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000156e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  008001ec  008001ec  000016ee  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000174c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024de  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011e4  00000000  00000000  00003ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001281  00000000  00000000  00005086  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b0  00000000  00000000  00006308  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ab2  00000000  00000000  000068b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000159e  00000000  00000000  0000736a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00008908  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_1>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__vector_18>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__vector_20>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_21>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 8a 03 	jmp	0x714	; 0x714 <__vector_40>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ee e6       	ldi	r30, 0x6E	; 110
      c8:	f5 e1       	ldi	r31, 0x15	; 21
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ac 3e       	cpi	r26, 0xEC	; 236
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	22 e0       	ldi	r18, 0x02	; 2
      d8:	ac ee       	ldi	r26, 0xEC	; 236
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a5 38       	cpi	r26, 0x85	; 133
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 cc 05 	call	0xb98	; 0xb98 <main>
      ea:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_21>:

uint16_t get_adc(uint8_t source){
	adc_pin_select(source);
	//uint16_t adc_tmp_data = adc_convert();
	return adc_convert();
}
      f2:	1f 92       	push	r1
      f4:	0f 92       	push	r0
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	0f 92       	push	r0
      fa:	11 24       	eor	r1, r1
      fc:	8f 93       	push	r24
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     104:	8f 91       	pop	r24
     106:	0f 90       	pop	r0
     108:	0f be       	out	0x3f, r0	; 63
     10a:	0f 90       	pop	r0
     10c:	1f 90       	pop	r1
     10e:	18 95       	reti

00000110 <adc_init>:
     110:	ec e7       	ldi	r30, 0x7C	; 124
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	80 6c       	ori	r24, 0xC0	; 192
     118:	80 83       	st	Z, r24
     11a:	ea e7       	ldi	r30, 0x7A	; 122
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	8f 68       	ori	r24, 0x8F	; 143
     122:	80 83       	st	Z, r24
     124:	08 95       	ret

00000126 <adc_pin_select>:
     126:	ec e7       	ldi	r30, 0x7C	; 124
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	90 81       	ld	r25, Z
     12c:	90 7f       	andi	r25, 0xF0	; 240
     12e:	90 83       	st	Z, r25
     130:	90 81       	ld	r25, Z
     132:	89 2b       	or	r24, r25
     134:	80 83       	st	Z, r24
     136:	08 95       	ret

00000138 <adc_convert>:
     138:	ea e7       	ldi	r30, 0x7A	; 122
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	80 68       	ori	r24, 0x80	; 128
     140:	80 83       	st	Z, r24
     142:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
     14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     150:	88 23       	and	r24, r24
     152:	e1 f3       	breq	.-8      	; 0x14c <adc_convert+0x14>
     154:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     158:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     15c:	ea e7       	ldi	r30, 0x7A	; 122
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	90 81       	ld	r25, Z
     162:	9f 77       	andi	r25, 0x7F	; 127
     164:	90 83       	st	Z, r25
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	98 2f       	mov	r25, r24
     16a:	88 27       	eor	r24, r24
     16c:	82 2b       	or	r24, r18
     16e:	08 95       	ret

00000170 <get_mVolt>:

uint16_t get_mVolt(uint8_t source){
	adc_pin_select(source);
     170:	0e 94 93 00 	call	0x126	; 0x126 <adc_pin_select>
	//uint16_t adc_tmp_data = adc_convert();
	return ADC_VOLT(adc_convert());
     174:	0e 94 9c 00 	call	0x138	; 0x138 <adc_convert>
     178:	bc 01       	movw	r22, r24
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 94 06 	call	0xd28	; 0xd28 <__floatunsisf>
     182:	2d ec       	ldi	r18, 0xCD	; 205
     184:	3e e1       	ldi	r19, 0x1E	; 30
     186:	48 e9       	ldi	r20, 0x98	; 152
     188:	5f e3       	ldi	r21, 0x3F	; 63
     18a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
     18e:	0e 94 65 06 	call	0xcca	; 0xcca <__fixunssfsi>
}
     192:	cb 01       	movw	r24, r22
     194:	08 95       	ret

00000196 <set_pin_level>:

}


void set_port_level(gpio *GPIOx, const uint8_t mask){
	*GPIOx->port=mask;
     196:	66 23       	and	r22, r22
     198:	99 f0       	breq	.+38     	; 0x1c0 <set_pin_level+0x2a>
     19a:	dc 01       	movw	r26, r24
     19c:	ed 91       	ld	r30, X+
     19e:	fc 91       	ld	r31, X
     1a0:	11 97       	sbiw	r26, 0x01	; 1
     1a2:	21 e0       	ldi	r18, 0x01	; 1
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	a9 01       	movw	r20, r18
     1a8:	12 96       	adiw	r26, 0x02	; 2
     1aa:	0c 90       	ld	r0, X
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <set_pin_level+0x1c>
     1ae:	44 0f       	add	r20, r20
     1b0:	55 1f       	adc	r21, r21
     1b2:	0a 94       	dec	r0
     1b4:	e2 f7       	brpl	.-8      	; 0x1ae <set_pin_level+0x18>
     1b6:	ca 01       	movw	r24, r20
     1b8:	90 81       	ld	r25, Z
     1ba:	89 2b       	or	r24, r25
     1bc:	80 83       	st	Z, r24
     1be:	08 95       	ret
     1c0:	dc 01       	movw	r26, r24
     1c2:	ed 91       	ld	r30, X+
     1c4:	fc 91       	ld	r31, X
     1c6:	11 97       	sbiw	r26, 0x01	; 1
     1c8:	21 e0       	ldi	r18, 0x01	; 1
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	a9 01       	movw	r20, r18
     1ce:	12 96       	adiw	r26, 0x02	; 2
     1d0:	0c 90       	ld	r0, X
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <set_pin_level+0x42>
     1d4:	44 0f       	add	r20, r20
     1d6:	55 1f       	adc	r21, r21
     1d8:	0a 94       	dec	r0
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <set_pin_level+0x3e>
     1dc:	ca 01       	movw	r24, r20
     1de:	80 95       	com	r24
     1e0:	90 81       	ld	r25, Z
     1e2:	89 23       	and	r24, r25
     1e4:	80 83       	st	Z, r24
     1e6:	08 95       	ret

000001e8 <set_pin_dir>:
     1e8:	fc 01       	movw	r30, r24
     1ea:	30 81       	ld	r19, Z
     1ec:	21 81       	ldd	r18, Z+1	; 0x01
     1ee:	61 30       	cpi	r22, 0x01	; 1
     1f0:	99 f0       	breq	.+38     	; 0x218 <set_pin_dir+0x30>
     1f2:	18 f0       	brcs	.+6      	; 0x1fa <set_pin_dir+0x12>
     1f4:	62 30       	cpi	r22, 0x02	; 2
     1f6:	f1 f0       	breq	.+60     	; 0x234 <set_pin_dir+0x4c>
     1f8:	08 95       	ret
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	02 80       	ldd	r0, Z+2	; 0x02
     200:	02 c0       	rjmp	.+4      	; 0x206 <set_pin_dir+0x1e>
     202:	88 0f       	add	r24, r24
     204:	99 1f       	adc	r25, r25
     206:	0a 94       	dec	r0
     208:	e2 f7       	brpl	.-8      	; 0x202 <set_pin_dir+0x1a>
     20a:	e3 2f       	mov	r30, r19
     20c:	f2 2f       	mov	r31, r18
     20e:	80 95       	com	r24
     210:	92 91       	ld	r25, -Z
     212:	89 23       	and	r24, r25
     214:	80 83       	st	Z, r24
     216:	08 95       	ret
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 80       	ldd	r0, Z+2	; 0x02
     21e:	02 c0       	rjmp	.+4      	; 0x224 <set_pin_dir+0x3c>
     220:	88 0f       	add	r24, r24
     222:	99 1f       	adc	r25, r25
     224:	0a 94       	dec	r0
     226:	e2 f7       	brpl	.-8      	; 0x220 <set_pin_dir+0x38>
     228:	e3 2f       	mov	r30, r19
     22a:	f2 2f       	mov	r31, r18
     22c:	92 91       	ld	r25, -Z
     22e:	89 2b       	or	r24, r25
     230:	80 83       	st	Z, r24
     232:	08 95       	ret
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	ac 01       	movw	r20, r24
     23a:	02 80       	ldd	r0, Z+2	; 0x02
     23c:	02 c0       	rjmp	.+4      	; 0x242 <set_pin_dir+0x5a>
     23e:	44 0f       	add	r20, r20
     240:	55 1f       	adc	r21, r21
     242:	0a 94       	dec	r0
     244:	e2 f7       	brpl	.-8      	; 0x23e <set_pin_dir+0x56>
     246:	a3 2f       	mov	r26, r19
     248:	b2 2f       	mov	r27, r18
     24a:	40 95       	com	r20
     24c:	2e 91       	ld	r18, -X
     24e:	42 23       	and	r20, r18
     250:	4c 93       	st	X, r20
     252:	a0 81       	ld	r26, Z
     254:	b1 81       	ldd	r27, Z+1	; 0x01
     256:	02 80       	ldd	r0, Z+2	; 0x02
     258:	02 c0       	rjmp	.+4      	; 0x25e <set_pin_dir+0x76>
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	0a 94       	dec	r0
     260:	e2 f7       	brpl	.-8      	; 0x25a <set_pin_dir+0x72>
     262:	80 95       	com	r24
     264:	9c 91       	ld	r25, X
     266:	89 23       	and	r24, r25
     268:	8c 93       	st	X, r24
     26a:	08 95       	ret

0000026c <toggle_pin_level>:
}

void toggle_pin_level(gpio *GPIOx)
{
	uint8_t *tmp_port = GPIOx->port-2;
     26c:	dc 01       	movw	r26, r24
     26e:	ed 91       	ld	r30, X+
     270:	fc 91       	ld	r31, X
     272:	11 97       	sbiw	r26, 0x01	; 1
	*tmp_port = 1 << GPIOx->pin;
     274:	21 e0       	ldi	r18, 0x01	; 1
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	a9 01       	movw	r20, r18
     27a:	12 96       	adiw	r26, 0x02	; 2
     27c:	0c 90       	ld	r0, X
     27e:	02 c0       	rjmp	.+4      	; 0x284 <toggle_pin_level+0x18>
     280:	44 0f       	add	r20, r20
     282:	55 1f       	adc	r21, r21
     284:	0a 94       	dec	r0
     286:	e2 f7       	brpl	.-8      	; 0x280 <toggle_pin_level+0x14>
     288:	32 97       	sbiw	r30, 0x02	; 2
     28a:	40 83       	st	Z, r20
     28c:	08 95       	ret

0000028e <rtc_int_enable>:
};



void rtc_int_enable(rtc_date *RTCx , const uint16_t int_time){
	rtc_config_3[0] |= (1 << TIE);
     28e:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
     292:	80 61       	ori	r24, 0x10	; 16
     294:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
	rtc_config_2[0] |= (1 << TD) | (1 << TE);
     298:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <rtc_config_2>
     29c:	81 61       	ori	r24, 0x11	; 17
     29e:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <rtc_config_2>
	
	twi_write(RTC_ADDR,TIMER_COUNTER0_REG,rtc_config_1,sizeof(rtc_config_1));
     2a2:	22 e0       	ldi	r18, 0x02	; 2
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	41 e0       	ldi	r20, 0x01	; 1
     2a8:	51 e0       	ldi	r21, 0x01	; 1
     2aa:	6b e0       	ldi	r22, 0x0B	; 11
     2ac:	82 e3       	ldi	r24, 0x32	; 50
     2ae:	0e 94 16 04 	call	0x82c	; 0x82c <twi_write>
	twi_write(RTC_ADDR,EXT_REG,rtc_config_2,sizeof(rtc_config_2));
     2b2:	21 e0       	ldi	r18, 0x01	; 1
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	4d ee       	ldi	r20, 0xED	; 237
     2b8:	51 e0       	ldi	r21, 0x01	; 1
     2ba:	6d e0       	ldi	r22, 0x0D	; 13
     2bc:	82 e3       	ldi	r24, 0x32	; 50
     2be:	0e 94 16 04 	call	0x82c	; 0x82c <twi_write>
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
     2c2:	21 e0       	ldi	r18, 0x01	; 1
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	4c ee       	ldi	r20, 0xEC	; 236
     2c8:	51 e0       	ldi	r21, 0x01	; 1
     2ca:	6f e0       	ldi	r22, 0x0F	; 15
     2cc:	82 e3       	ldi	r24, 0x32	; 50
     2ce:	0e 94 16 04 	call	0x82c	; 0x82c <twi_write>
     2d2:	08 95       	ret

000002d4 <BCDtoDEC>:
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
}

uint8_t BCDtoDEC(uint8_t val)
{
	return ((val / 0x10) * 10) + (val % 0x10);
     2d4:	98 2f       	mov	r25, r24
     2d6:	92 95       	swap	r25
     2d8:	9f 70       	andi	r25, 0x0F	; 15
     2da:	99 0f       	add	r25, r25
     2dc:	29 2f       	mov	r18, r25
     2de:	22 0f       	add	r18, r18
     2e0:	22 0f       	add	r18, r18
     2e2:	92 0f       	add	r25, r18
     2e4:	8f 70       	andi	r24, 0x0F	; 15
}
     2e6:	89 0f       	add	r24, r25
     2e8:	08 95       	ret

000002ea <rtc_sync>:
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
	
	
}

void rtc_sync(rtc_date *RTCx){
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	27 97       	sbiw	r28, 0x07	; 7
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	cd bf       	out	0x3d, r28	; 61
     302:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	twi_read(RTC_ADDR, 0x00, rtc_raw, sizeof(rtc_raw));
     304:	27 e0       	ldi	r18, 0x07	; 7
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	ae 01       	movw	r20, r28
     30a:	4f 5f       	subi	r20, 0xFF	; 255
     30c:	5f 4f       	sbci	r21, 0xFF	; 255
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	82 e3       	ldi	r24, 0x32	; 50
     312:	0e 94 9b 03 	call	0x736	; 0x736 <twi_read>
	RTCx->second=BCDtoDEC(rtc_raw[0]);
     316:	89 81       	ldd	r24, Y+1	; 0x01
     318:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     31c:	f8 01       	movw	r30, r16
     31e:	80 83       	st	Z, r24
	RTCx->minute=BCDtoDEC(rtc_raw[1]);
     320:	8a 81       	ldd	r24, Y+2	; 0x02
     322:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     326:	f8 01       	movw	r30, r16
     328:	81 83       	std	Z+1, r24	; 0x01
	RTCx->hour=BCDtoDEC(rtc_raw[2]);
     32a:	8b 81       	ldd	r24, Y+3	; 0x03
     32c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     330:	f8 01       	movw	r30, r16
     332:	82 83       	std	Z+2, r24	; 0x02
	RTCx->dayofweek=rtc_raw[3];
     334:	8c 81       	ldd	r24, Y+4	; 0x04
     336:	87 83       	std	Z+7, r24	; 0x07
	RTCx->date=BCDtoDEC(rtc_raw[4]);
     338:	8d 81       	ldd	r24, Y+5	; 0x05
     33a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     33e:	f8 01       	movw	r30, r16
     340:	83 83       	std	Z+3, r24	; 0x03
	RTCx->month=BCDtoDEC(rtc_raw[5]);
     342:	8e 81       	ldd	r24, Y+6	; 0x06
     344:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     348:	f8 01       	movw	r30, r16
     34a:	84 83       	std	Z+4, r24	; 0x04
	RTCx->year=BCDtoDEC(rtc_raw[6]);
     34c:	8f 81       	ldd	r24, Y+7	; 0x07
     34e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	f8 01       	movw	r30, r16
     356:	96 83       	std	Z+6, r25	; 0x06
     358:	85 83       	std	Z+5, r24	; 0x05
}
     35a:	27 96       	adiw	r28, 0x07	; 7
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	08 95       	ret

00000370 <DECtoBCD>:
}

// BCDtoDEC -- convert decimal to binary-coded decimal (BCD)
uint8_t DECtoBCD(uint8_t val)
{
	return ((val / 10) * 0x10) + (val % 10);
     370:	9d ec       	ldi	r25, 0xCD	; 205
     372:	89 9f       	mul	r24, r25
     374:	91 2d       	mov	r25, r1
     376:	11 24       	eor	r1, r1
     378:	96 95       	lsr	r25
     37a:	96 95       	lsr	r25
     37c:	96 95       	lsr	r25
     37e:	39 2f       	mov	r19, r25
     380:	33 0f       	add	r19, r19
     382:	23 2f       	mov	r18, r19
     384:	22 0f       	add	r18, r18
     386:	22 0f       	add	r18, r18
     388:	23 0f       	add	r18, r19
     38a:	82 1b       	sub	r24, r18
     38c:	20 e1       	ldi	r18, 0x10	; 16
     38e:	92 9f       	mul	r25, r18
     390:	80 0d       	add	r24, r0
     392:	11 24       	eor	r1, r1
     394:	08 95       	ret

00000396 <rtc_set>:
	RTCx->dayofweek=rtc_raw[3];
	RTCx->date=BCDtoDEC(rtc_raw[4]);
	RTCx->month=BCDtoDEC(rtc_raw[5]);
	RTCx->year=BCDtoDEC(rtc_raw[6]);
}
void rtc_set(rtc_date *RTCx){
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	27 97       	sbiw	r28, 0x07	; 7
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	rtc_raw[0]=DECtoBCD(RTCx->second);
     3b0:	fc 01       	movw	r30, r24
     3b2:	80 81       	ld	r24, Z
     3b4:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3b8:	89 83       	std	Y+1, r24	; 0x01
	rtc_raw[1]=DECtoBCD(RTCx->minute);
     3ba:	f8 01       	movw	r30, r16
     3bc:	81 81       	ldd	r24, Z+1	; 0x01
     3be:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3c2:	8a 83       	std	Y+2, r24	; 0x02
	rtc_raw[2]=DECtoBCD(RTCx->hour);
     3c4:	f8 01       	movw	r30, r16
     3c6:	82 81       	ldd	r24, Z+2	; 0x02
     3c8:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3cc:	8b 83       	std	Y+3, r24	; 0x03
	rtc_raw[3]=RTCx->dayofweek;
     3ce:	f8 01       	movw	r30, r16
     3d0:	87 81       	ldd	r24, Z+7	; 0x07
     3d2:	8c 83       	std	Y+4, r24	; 0x04
	rtc_raw[4]=DECtoBCD(RTCx->date);
     3d4:	83 81       	ldd	r24, Z+3	; 0x03
     3d6:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3da:	8d 83       	std	Y+5, r24	; 0x05
	rtc_raw[5]=DECtoBCD(RTCx->month);
     3dc:	f8 01       	movw	r30, r16
     3de:	84 81       	ldd	r24, Z+4	; 0x04
     3e0:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3e4:	8e 83       	std	Y+6, r24	; 0x06
	rtc_raw[6]=DECtoBCD(RTCx->year);
     3e6:	f8 01       	movw	r30, r16
     3e8:	85 81       	ldd	r24, Z+5	; 0x05
     3ea:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3ee:	8f 83       	std	Y+7, r24	; 0x07
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
     3f0:	27 e0       	ldi	r18, 0x07	; 7
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	ae 01       	movw	r20, r28
     3f6:	4f 5f       	subi	r20, 0xFF	; 255
     3f8:	5f 4f       	sbci	r21, 0xFF	; 255
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	82 e3       	ldi	r24, 0x32	; 50
     3fe:	0e 94 16 04 	call	0x82c	; 0x82c <twi_write>
}
     402:	27 96       	adiw	r28, 0x07	; 7
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	08 95       	ret

00000418 <led_board_sw_reset>:

void led_write_batch(uint8_t board_address, int *pwmChannels, uint8_t channels_num){
	twi_write_batch_by_reg(board_address, PWM0 | 0xA0, pwmChannels, channels_num);
}

void led_write_single(uint8_t board_address, uint8_t led_num, uint8_t brightness){
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	63 97       	sbiw	r28, 0x13	; 19
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	18 2f       	mov	r17, r24
     432:	85 ea       	ldi	r24, 0xA5	; 165
     434:	89 83       	std	Y+1, r24	; 0x01
     436:	8a e5       	ldi	r24, 0x5A	; 90
     438:	8a 83       	std	Y+2, r24	; 0x02
     43a:	00 e1       	ldi	r16, 0x10	; 16
     43c:	ae 01       	movw	r20, r28
     43e:	4d 5f       	subi	r20, 0xFD	; 253
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	fa 01       	movw	r30, r20
     444:	80 2f       	mov	r24, r16
     446:	11 92       	st	Z+, r1
     448:	8a 95       	dec	r24
     44a:	e9 f7       	brne	.-6      	; 0x446 <led_board_sw_reset+0x2e>
     44c:	20 e1       	ldi	r18, 0x10	; 16
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	62 ea       	ldi	r22, 0xA2	; 162
     452:	81 2f       	mov	r24, r17
     454:	0e 94 a3 04 	call	0x946	; 0x946 <twi_write_batch_by_reg>
     458:	42 e0       	ldi	r20, 0x02	; 2
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	be 01       	movw	r22, r28
     45e:	6f 5f       	subi	r22, 0xFF	; 255
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	81 2f       	mov	r24, r17
     464:	0e 94 63 04 	call	0x8c6	; 0x8c6 <twi_write_batch>
     468:	0b 8b       	std	Y+19, r16	; 0x13
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	ae 01       	movw	r20, r28
     470:	4d 5e       	subi	r20, 0xED	; 237
     472:	5f 4f       	sbci	r21, 0xFF	; 255
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	81 2f       	mov	r24, r17
     478:	0e 94 16 04 	call	0x82c	; 0x82c <twi_write>
     47c:	63 96       	adiw	r28, 0x13	; 19
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	08 95       	ret

00000492 <led_board_init>:
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	61 97       	sbiw	r28, 0x11	; 17
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	f8 94       	cli
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	18 2f       	mov	r17, r24
     4b0:	ce 01       	movw	r24, r28
     4b2:	01 96       	adiw	r24, 0x01	; 1
     4b4:	7c 01       	movw	r14, r24
     4b6:	80 e1       	ldi	r24, 0x10	; 16
     4b8:	f7 01       	movw	r30, r14
     4ba:	11 92       	st	Z+, r1
     4bc:	8a 95       	dec	r24
     4be:	e9 f7       	brne	.-6      	; 0x4ba <led_board_init+0x28>
     4c0:	19 8a       	std	Y+17, r1	; 0x11
     4c2:	21 e0       	ldi	r18, 0x01	; 1
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	ae 01       	movw	r20, r28
     4c8:	4f 5e       	subi	r20, 0xEF	; 239
     4ca:	5f 4f       	sbci	r21, 0xFF	; 255
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	81 2f       	mov	r24, r17
     4d0:	0e 94 16 04 	call	0x82c	; 0x82c <twi_write>
     4d4:	21 e0       	ldi	r18, 0x01	; 1
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	ae 01       	movw	r20, r28
     4da:	4f 5e       	subi	r20, 0xEF	; 239
     4dc:	5f 4f       	sbci	r21, 0xFF	; 255
     4de:	61 e0       	ldi	r22, 0x01	; 1
     4e0:	81 2f       	mov	r24, r17
     4e2:	0e 94 16 04 	call	0x82c	; 0x82c <twi_write>
     4e6:	20 e1       	ldi	r18, 0x10	; 16
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	a7 01       	movw	r20, r14
     4ec:	62 ea       	ldi	r22, 0xA2	; 162
     4ee:	81 2f       	mov	r24, r17
     4f0:	0e 94 a3 04 	call	0x946	; 0x946 <twi_write_batch_by_reg>
     4f4:	19 8a       	std	Y+17, r1	; 0x11
     4f6:	21 e0       	ldi	r18, 0x01	; 1
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	ae 01       	movw	r20, r28
     4fc:	4f 5e       	subi	r20, 0xEF	; 239
     4fe:	5f 4f       	sbci	r21, 0xFF	; 255
     500:	62 e1       	ldi	r22, 0x12	; 18
     502:	81 2f       	mov	r24, r17
     504:	0e 94 16 04 	call	0x82c	; 0x82c <twi_write>
     508:	8f ef       	ldi	r24, 0xFF	; 255
     50a:	89 8b       	std	Y+17, r24	; 0x11
     50c:	21 e0       	ldi	r18, 0x01	; 1
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	ae 01       	movw	r20, r28
     512:	4f 5e       	subi	r20, 0xEF	; 239
     514:	5f 4f       	sbci	r21, 0xFF	; 255
     516:	63 e1       	ldi	r22, 0x13	; 19
     518:	81 2f       	mov	r24, r17
     51a:	0e 94 16 04 	call	0x82c	; 0x82c <twi_write>
     51e:	0a ea       	ldi	r16, 0xAA	; 170
     520:	09 8b       	std	Y+17, r16	; 0x11
     522:	21 e0       	ldi	r18, 0x01	; 1
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	ae 01       	movw	r20, r28
     528:	4f 5e       	subi	r20, 0xEF	; 239
     52a:	5f 4f       	sbci	r21, 0xFF	; 255
     52c:	64 e1       	ldi	r22, 0x14	; 20
     52e:	81 2f       	mov	r24, r17
     530:	0e 94 16 04 	call	0x82c	; 0x82c <twi_write>
     534:	09 8b       	std	Y+17, r16	; 0x11
     536:	21 e0       	ldi	r18, 0x01	; 1
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	ae 01       	movw	r20, r28
     53c:	4f 5e       	subi	r20, 0xEF	; 239
     53e:	5f 4f       	sbci	r21, 0xFF	; 255
     540:	65 e1       	ldi	r22, 0x15	; 21
     542:	81 2f       	mov	r24, r17
     544:	0e 94 16 04 	call	0x82c	; 0x82c <twi_write>
     548:	09 8b       	std	Y+17, r16	; 0x11
     54a:	21 e0       	ldi	r18, 0x01	; 1
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	ae 01       	movw	r20, r28
     550:	4f 5e       	subi	r20, 0xEF	; 239
     552:	5f 4f       	sbci	r21, 0xFF	; 255
     554:	66 e1       	ldi	r22, 0x16	; 22
     556:	81 2f       	mov	r24, r17
     558:	0e 94 16 04 	call	0x82c	; 0x82c <twi_write>
     55c:	09 8b       	std	Y+17, r16	; 0x11
     55e:	21 e0       	ldi	r18, 0x01	; 1
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	ae 01       	movw	r20, r28
     564:	4f 5e       	subi	r20, 0xEF	; 239
     566:	5f 4f       	sbci	r21, 0xFF	; 255
     568:	67 e1       	ldi	r22, 0x17	; 23
     56a:	81 2f       	mov	r24, r17
     56c:	0e 94 16 04 	call	0x82c	; 0x82c <twi_write>
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	61 96       	adiw	r28, 0x11	; 17
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	ff 90       	pop	r15
     588:	ef 90       	pop	r14
     58a:	08 95       	ret

0000058c <led_write_batch>:
     58c:	24 2f       	mov	r18, r20
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	ab 01       	movw	r20, r22
     592:	62 ea       	ldi	r22, 0xA2	; 162
     594:	0e 94 a3 04 	call	0x946	; 0x946 <twi_write_batch_by_reg>
     598:	08 95       	ret

0000059a <run_wave>:
	
}

void run_wave(uint8_t *brightness, uint8_t *pwmChannels) {
     59a:	ff 92       	push	r15
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	8c 01       	movw	r16, r24
     5a6:	eb 01       	movw	r28, r22
				
//uint8_t temp[16];
uint8_t i;
uint8_t shifts;

for (shifts = 0; shifts < 16; shifts++) {
     5a8:	f1 2c       	mov	r15, r1
     5aa:	20 c0       	rjmp	.+64     	; 0x5ec <run_wave+0x52>
	for (i = 0; i < 16; i++) {
		pwmChannels[i] = brightness[i+shifts];
     5ac:	82 2f       	mov	r24, r18
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	de 01       	movw	r26, r28
     5b2:	a8 0f       	add	r26, r24
     5b4:	b9 1f       	adc	r27, r25
     5b6:	8f 0d       	add	r24, r15
     5b8:	91 1d       	adc	r25, r1
     5ba:	f8 01       	movw	r30, r16
     5bc:	e8 0f       	add	r30, r24
     5be:	f9 1f       	adc	r31, r25
     5c0:	80 81       	ld	r24, Z
     5c2:	8c 93       	st	X, r24
//uint8_t temp[16];
uint8_t i;
uint8_t shifts;

for (shifts = 0; shifts < 16; shifts++) {
	for (i = 0; i < 16; i++) {
     5c4:	2f 5f       	subi	r18, 0xFF	; 255
     5c6:	01 c0       	rjmp	.+2      	; 0x5ca <run_wave+0x30>
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	20 31       	cpi	r18, 0x10	; 16
     5cc:	78 f3       	brcs	.-34     	; 0x5ac <run_wave+0x12>
		pwmChannels[i] = brightness[i+shifts];
	}
	led_write_batch(TLC_ADDR, pwmChannels,16);
     5ce:	40 e1       	ldi	r20, 0x10	; 16
     5d0:	be 01       	movw	r22, r28
     5d2:	84 e6       	ldi	r24, 0x64	; 100
     5d4:	0e 94 c6 02 	call	0x58c	; 0x58c <led_write_batch>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d8:	2f e7       	ldi	r18, 0x7F	; 127
     5da:	88 e3       	ldi	r24, 0x38	; 56
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	21 50       	subi	r18, 0x01	; 1
     5e0:	80 40       	sbci	r24, 0x00	; 0
     5e2:	90 40       	sbci	r25, 0x00	; 0
     5e4:	e1 f7       	brne	.-8      	; 0x5de <run_wave+0x44>
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <run_wave+0x4e>
     5e8:	00 00       	nop
				
//uint8_t temp[16];
uint8_t i;
uint8_t shifts;

for (shifts = 0; shifts < 16; shifts++) {
     5ea:	f3 94       	inc	r15
     5ec:	2f e0       	ldi	r18, 0x0F	; 15
     5ee:	2f 15       	cp	r18, r15
     5f0:	58 f7       	brcc	.-42     	; 0x5c8 <run_wave+0x2e>





}
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	08 95       	ret

000005fe <twi_start>:
	status = (TWSR1 & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     5fe:	85 ea       	ldi	r24, 0xA5	; 165
     600:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
ISR(TWI1_vect){
	status = (TWSR1 & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     608:	05 c0       	rjmp	.+10     	; 0x614 <twi_start+0x16>
		i++;
     60a:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     60c:	80 34       	cpi	r24, 0x40	; 64
     60e:	26 e0       	ldi	r18, 0x06	; 6
     610:	92 07       	cpc	r25, r18
     612:	30 f4       	brcc	.+12     	; 0x620 <twi_start+0x22>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     614:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     618:	28 30       	cpi	r18, 0x08	; 8
     61a:	b9 f7       	brne	.-18     	; 0x60a <twi_start+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	08 95       	ret
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     620:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     622:	08 95       	ret

00000624 <twi_stop>:

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     624:	85 e9       	ldi	r24, 0x95	; 149
     626:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     62a:	08 95       	ret

0000062c <twi_restart>:
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     62c:	85 ea       	ldi	r24, 0xA5	; 165
     62e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     636:	05 c0       	rjmp	.+10     	; 0x642 <twi_restart+0x16>
		i++;
     638:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     63a:	80 34       	cpi	r24, 0x40	; 64
     63c:	26 e0       	ldi	r18, 0x06	; 6
     63e:	92 07       	cpc	r25, r18
     640:	30 f4       	brcc	.+12     	; 0x64e <twi_restart+0x22>

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     642:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     646:	20 31       	cpi	r18, 0x10	; 16
     648:	b9 f7       	brne	.-18     	; 0x638 <twi_restart+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	08 95       	ret
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     64e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     650:	08 95       	ret

00000652 <twi_addr_write_ack>:

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     652:	85 e8       	ldi	r24, 0x85	; 133
     654:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	}
	return TWI_OK;
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     65c:	05 c0       	rjmp	.+10     	; 0x668 <twi_addr_write_ack+0x16>
		i++;
     65e:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     660:	80 34       	cpi	r24, 0x40	; 64
     662:	26 e0       	ldi	r18, 0x06	; 6
     664:	92 07       	cpc	r25, r18
     666:	30 f4       	brcc	.+12     	; 0x674 <twi_addr_write_ack+0x22>

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     668:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     66c:	28 31       	cpi	r18, 0x18	; 24
     66e:	b9 f7       	brne	.-18     	; 0x65e <twi_addr_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     674:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     676:	08 95       	ret

00000678 <twi_data_write_ack>:


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     678:	85 e8       	ldi	r24, 0x85	; 133
     67a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     682:	05 c0       	rjmp	.+10     	; 0x68e <twi_data_write_ack+0x16>
		i++;
     684:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     686:	80 34       	cpi	r24, 0x40	; 64
     688:	26 e0       	ldi	r18, 0x06	; 6
     68a:	92 07       	cpc	r25, r18
     68c:	30 f4       	brcc	.+12     	; 0x69a <twi_data_write_ack+0x22>

static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     68e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     692:	28 32       	cpi	r18, 0x28	; 40
     694:	b9 f7       	brne	.-18     	; 0x684 <twi_data_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     69a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     69c:	08 95       	ret

0000069e <twi_addr_read_ack>:


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     69e:	85 e8       	ldi	r24, 0x85	; 133
     6a0:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <twi_addr_read_ack+0x16>
		i++;
     6aa:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     6ac:	80 34       	cpi	r24, 0x40	; 64
     6ae:	26 e0       	ldi	r18, 0x06	; 6
     6b0:	92 07       	cpc	r25, r18
     6b2:	30 f4       	brcc	.+12     	; 0x6c0 <twi_addr_read_ack+0x22>

static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     6b4:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     6b8:	20 34       	cpi	r18, 0x40	; 64
     6ba:	b9 f7       	brne	.-18     	; 0x6aa <twi_addr_read_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     6c2:	08 95       	ret

000006c4 <twi_data_read_ack>:


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
     6c4:	88 23       	and	r24, r24
     6c6:	89 f0       	breq	.+34     	; 0x6ea <twi_data_read_ack+0x26>
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
     6c8:	85 ec       	ldi	r24, 0xC5	; 197
     6ca:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <twi_data_read_ack+0x1a>
			i++;
     6d4:	01 96       	adiw	r24, 0x01	; 1
			if(i >= TWI_TIMEOUT){
     6d6:	80 34       	cpi	r24, 0x40	; 64
     6d8:	26 e0       	ldi	r18, 0x06	; 6
     6da:	92 07       	cpc	r25, r18
     6dc:	b8 f4       	brcc	.+46     	; 0x70c <twi_data_read_ack+0x48>

static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     6de:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     6e2:	20 35       	cpi	r18, 0x50	; 80
     6e4:	b9 f7       	brne	.-18     	; 0x6d4 <twi_data_read_ack+0x10>
				return TWI_ERROR_START;
			}
		}
		
	}
	return TWI_OK;
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	08 95       	ret
				return TWI_ERROR_START;
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     6ea:	85 e8       	ldi	r24, 0x85	; 133
     6ec:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     6f4:	05 c0       	rjmp	.+10     	; 0x700 <twi_data_read_ack+0x3c>
			i++;
     6f6:	01 96       	adiw	r24, 0x01	; 1
			if(i >= TWI_TIMEOUT){
     6f8:	80 34       	cpi	r24, 0x40	; 64
     6fa:	26 e0       	ldi	r18, 0x06	; 6
     6fc:	92 07       	cpc	r25, r18
     6fe:	40 f4       	brcc	.+16     	; 0x710 <twi_data_read_ack+0x4c>
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     700:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     704:	28 35       	cpi	r18, 0x58	; 88
     706:	b9 f7       	brne	.-18     	; 0x6f6 <twi_data_read_ack+0x32>
				return TWI_ERROR_START;
			}
		}
		
	}
	return TWI_OK;
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	08 95       	ret
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	08 95       	ret
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     710:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		
	}
	return TWI_OK;
}
     712:	08 95       	ret

00000714 <__vector_40>:

#include "twi_hal.h"

volatile uint8_t status = 0xF8;

ISR(TWI1_vect){
     714:	1f 92       	push	r1
     716:	0f 92       	push	r0
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	8f 93       	push	r24
	status = (TWSR1 & 0xF8);
     720:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
     724:	88 7f       	andi	r24, 0xF8	; 248
     726:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <status>
}
     72a:	8f 91       	pop	r24
     72c:	0f 90       	pop	r0
     72e:	0f be       	out	0x3f, r0	; 63
     730:	0f 90       	pop	r0
     732:	1f 90       	pop	r1
     734:	18 95       	reti

00000736 <twi_read>:
		
	}
	return TWI_OK;
}

uint8_t twi_read(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     736:	cf 92       	push	r12
     738:	df 92       	push	r13
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	d8 2e       	mov	r13, r24
     746:	c6 2e       	mov	r12, r22
     748:	7a 01       	movw	r14, r20
     74a:	89 01       	movw	r16, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     74c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <twi_start>
     750:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     752:	88 23       	and	r24, r24
     754:	21 f0       	breq	.+8      	; 0x75e <twi_read+0x28>
		twi_stop();
     756:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
		return err;
     75a:	8c 2f       	mov	r24, r28
     75c:	5f c0       	rjmp	.+190    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	}
	TWDR1 = (addr << 1) | 0;
     75e:	8d 2d       	mov	r24, r13
     760:	88 0f       	add	r24, r24
     762:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
     766:	0e 94 29 03 	call	0x652	; 0x652 <twi_addr_write_ack>
     76a:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     76c:	88 23       	and	r24, r24
     76e:	21 f0       	breq	.+8      	; 0x778 <twi_read+0x42>
		twi_stop();
     770:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
		return err;
     774:	8c 2f       	mov	r24, r28
     776:	52 c0       	rjmp	.+164    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	}
	
	TWDR1 = reg;
     778:	c0 92 db 00 	sts	0x00DB, r12	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	err = twi_data_write_ack();
     77c:	0e 94 3c 03 	call	0x678	; 0x678 <twi_data_write_ack>
     780:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     782:	88 23       	and	r24, r24
     784:	21 f0       	breq	.+8      	; 0x78e <twi_read+0x58>
		twi_stop();
     786:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
		return err;
     78a:	8c 2f       	mov	r24, r28
     78c:	47 c0       	rjmp	.+142    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	}
	
	err = twi_restart();
     78e:	0e 94 16 03 	call	0x62c	; 0x62c <twi_restart>
     792:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     794:	88 23       	and	r24, r24
     796:	21 f0       	breq	.+8      	; 0x7a0 <twi_read+0x6a>
		twi_stop();
     798:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
		return err;
     79c:	8c 2f       	mov	r24, r28
     79e:	3e c0       	rjmp	.+124    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	}
	
	TWDR1 = (addr << 1) | 1;
     7a0:	8d 2d       	mov	r24, r13
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	81 60       	ori	r24, 0x01	; 1
     7aa:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>

	err = twi_addr_read_ack();
     7ae:	0e 94 4f 03 	call	0x69e	; 0x69e <twi_addr_read_ack>
     7b2:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     7b4:	88 23       	and	r24, r24
     7b6:	c1 f0       	breq	.+48     	; 0x7e8 <twi_read+0xb2>
		twi_stop();
     7b8:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
		return err;
     7bc:	8c 2f       	mov	r24, r28
     7be:	2e c0       	rjmp	.+92     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	}
	
	for(i = 0; i < (len - 1);i++){
		err = twi_data_read_ack(1);
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <twi_data_read_ack>
     7c6:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     7c8:	88 23       	and	r24, r24
     7ca:	21 f0       	breq	.+8      	; 0x7d4 <twi_read+0x9e>
			twi_stop();
     7cc:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
			return err;
     7d0:	8c 2f       	mov	r24, r28
     7d2:	24 c0       	rjmp	.+72     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
		}
		data[i] = TWDR1;
     7d4:	f7 01       	movw	r30, r14
     7d6:	ec 0d       	add	r30, r12
     7d8:	fd 1d       	adc	r31, r13
     7da:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     7de:	80 83       	st	Z, r24
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	c8 1a       	sub	r12, r24
     7e4:	d8 0a       	sbc	r13, r24
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <twi_read+0xb6>
     7e8:	c1 2c       	mov	r12, r1
     7ea:	d1 2c       	mov	r13, r1
     7ec:	c8 01       	movw	r24, r16
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	c8 16       	cp	r12, r24
     7f2:	d9 06       	cpc	r13, r25
     7f4:	28 f3       	brcs	.-54     	; 0x7c0 <twi_read+0x8a>
			return err;
		}
		data[i] = TWDR1;
	}
	
	err = twi_data_read_ack(0);
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <twi_data_read_ack>
     7fc:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     7fe:	88 23       	and	r24, r24
     800:	21 f0       	breq	.+8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		twi_stop();
     802:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
		return err;
     806:	8c 2f       	mov	r24, r28
     808:	09 c0       	rjmp	.+18     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	}
	data[i] = TWDR1;
     80a:	f7 01       	movw	r30, r14
     80c:	ec 0d       	add	r30, r12
     80e:	fd 1d       	adc	r31, r13
     810:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     814:	80 83       	st	Z, r24
	
	twi_stop();
     816:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
	
	return err;
     81a:	8c 2f       	mov	r24, r28
}
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
     826:	df 90       	pop	r13
     828:	cf 90       	pop	r12
     82a:	08 95       	ret

0000082c <twi_write>:


uint8_t twi_write(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     82c:	cf 92       	push	r12
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	18 2f       	mov	r17, r24
     83c:	06 2f       	mov	r16, r22
     83e:	6a 01       	movw	r12, r20
     840:	79 01       	movw	r14, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     842:	0e 94 ff 02 	call	0x5fe	; 0x5fe <twi_start>
     846:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     848:	88 23       	and	r24, r24
     84a:	21 f0       	breq	.+8      	; 0x854 <twi_write+0x28>
		twi_stop();
     84c:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
		return err;
     850:	8c 2f       	mov	r24, r28
     852:	31 c0       	rjmp	.+98     	; 0x8b6 <twi_write+0x8a>
	}
	TWDR1 = (addr << 1) | 0;
     854:	11 0f       	add	r17, r17
     856:	10 93 db 00 	sts	0x00DB, r17	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
     85a:	0e 94 29 03 	call	0x652	; 0x652 <twi_addr_write_ack>
     85e:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     860:	88 23       	and	r24, r24
     862:	21 f0       	breq	.+8      	; 0x86c <twi_write+0x40>
		twi_stop();
     864:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
		return err;
     868:	8c 2f       	mov	r24, r28
     86a:	25 c0       	rjmp	.+74     	; 0x8b6 <twi_write+0x8a>
	}
	
	TWDR1 = reg;
     86c:	00 93 db 00 	sts	0x00DB, r16	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	err = twi_data_write_ack();
     870:	0e 94 3c 03 	call	0x678	; 0x678 <twi_data_write_ack>
     874:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     876:	88 23       	and	r24, r24
     878:	b1 f0       	breq	.+44     	; 0x8a6 <twi_write+0x7a>
		twi_stop();
     87a:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
		return err;
     87e:	8c 2f       	mov	r24, r28
     880:	1a c0       	rjmp	.+52     	; 0x8b6 <twi_write+0x8a>
	}
	
	for(i = 0; i < len;i++){
		TWDR1 = data[i];
     882:	f6 01       	movw	r30, r12
     884:	e0 0f       	add	r30, r16
     886:	f1 1f       	adc	r31, r17
     888:	80 81       	ld	r24, Z
     88a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		err = twi_data_write_ack();
     88e:	0e 94 3c 03 	call	0x678	; 0x678 <twi_data_write_ack>
     892:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     894:	88 23       	and	r24, r24
     896:	21 f0       	breq	.+8      	; 0x8a0 <twi_write+0x74>
			twi_stop();
     898:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
			return err;
     89c:	8c 2f       	mov	r24, r28
     89e:	0b c0       	rjmp	.+22     	; 0x8b6 <twi_write+0x8a>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
     8a0:	0f 5f       	subi	r16, 0xFF	; 255
     8a2:	1f 4f       	sbci	r17, 0xFF	; 255
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <twi_write+0x7e>
     8a6:	00 e0       	ldi	r16, 0x00	; 0
     8a8:	10 e0       	ldi	r17, 0x00	; 0
     8aa:	0e 15       	cp	r16, r14
     8ac:	1f 05       	cpc	r17, r15
     8ae:	48 f3       	brcs	.-46     	; 0x882 <twi_write+0x56>
			return err;
		}
	}
	
	
	twi_stop();
     8b0:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
	
	return err;
     8b4:	8c 2f       	mov	r24, r28
}
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	df 90       	pop	r13
     8c2:	cf 90       	pop	r12
     8c4:	08 95       	ret

000008c6 <twi_write_batch>:
uint8_t twi_write_batch(uint8_t addr, uint8_t *data,uint16_t len){
     8c6:	cf 92       	push	r12
     8c8:	df 92       	push	r13
     8ca:	ef 92       	push	r14
     8cc:	ff 92       	push	r15
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	c8 2f       	mov	r28, r24
     8d6:	6b 01       	movw	r12, r22
     8d8:	7a 01       	movw	r14, r20
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     8da:	0e 94 ff 02 	call	0x5fe	; 0x5fe <twi_start>
     8de:	18 2f       	mov	r17, r24
	if(err != TWI_OK){
     8e0:	88 23       	and	r24, r24
     8e2:	21 f0       	breq	.+8      	; 0x8ec <twi_write_batch+0x26>
		twi_stop();
     8e4:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
		return err;
     8e8:	81 2f       	mov	r24, r17
     8ea:	25 c0       	rjmp	.+74     	; 0x936 <__stack+0x37>
	}
	TWDR1 = (addr << 1) | 0;
     8ec:	cc 0f       	add	r28, r28
     8ee:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
     8f2:	0e 94 29 03 	call	0x652	; 0x652 <twi_addr_write_ack>
     8f6:	18 2f       	mov	r17, r24
	if(err != TWI_OK){
     8f8:	88 23       	and	r24, r24
     8fa:	a9 f0       	breq	.+42     	; 0x926 <__stack+0x27>
		twi_stop();
     8fc:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
		return err;
     900:	81 2f       	mov	r24, r17
     902:	19 c0       	rjmp	.+50     	; 0x936 <__stack+0x37>
	}
	
	
	
	for(i = 0; i < len;i++){
		TWDR1 = data[i];
     904:	f6 01       	movw	r30, r12
     906:	ec 0f       	add	r30, r28
     908:	fd 1f       	adc	r31, r29
     90a:	80 81       	ld	r24, Z
     90c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		err = twi_data_write_ack();
     910:	0e 94 3c 03 	call	0x678	; 0x678 <twi_data_write_ack>
     914:	18 2f       	mov	r17, r24
		if(err != TWI_OK){
     916:	88 23       	and	r24, r24
     918:	21 f0       	breq	.+8      	; 0x922 <__stack+0x23>
			twi_stop();
     91a:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
			return err;
     91e:	81 2f       	mov	r24, r17
     920:	0a c0       	rjmp	.+20     	; 0x936 <__stack+0x37>
		return err;
	}
	
	
	
	for(i = 0; i < len;i++){
     922:	21 96       	adiw	r28, 0x01	; 1
     924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0x2b>
     926:	c0 e0       	ldi	r28, 0x00	; 0
     928:	d0 e0       	ldi	r29, 0x00	; 0
     92a:	ce 15       	cp	r28, r14
     92c:	df 05       	cpc	r29, r15
     92e:	50 f3       	brcs	.-44     	; 0x904 <__stack+0x5>
			return err;
		}
	}
	
	
	twi_stop();
     930:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
	
	return err;
     934:	81 2f       	mov	r24, r17
}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	ff 90       	pop	r15
     93e:	ef 90       	pop	r14
     940:	df 90       	pop	r13
     942:	cf 90       	pop	r12
     944:	08 95       	ret

00000946 <twi_write_batch_by_reg>:



uint8_t twi_write_batch_by_reg(uint8_t addr,uint8_t reg, uint8_t *data,uint16_t len){
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	18 2f       	mov	r17, r24
     956:	06 2f       	mov	r16, r22
     958:	6a 01       	movw	r12, r20
     95a:	79 01       	movw	r14, r18
		
		uint16_t i = 0;
		uint8_t err = TWI_OK;
		
		err = twi_start();
     95c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <twi_start>
     960:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     962:	88 23       	and	r24, r24
     964:	21 f0       	breq	.+8      	; 0x96e <twi_write_batch_by_reg+0x28>
			twi_stop();
     966:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
			return err;
     96a:	8c 2f       	mov	r24, r28
     96c:	31 c0       	rjmp	.+98     	; 0x9d0 <twi_write_batch_by_reg+0x8a>
		}
		TWDR1 = (addr << 1) | 0;
     96e:	11 0f       	add	r17, r17
     970:	10 93 db 00 	sts	0x00DB, r17	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		
		
		err = twi_addr_write_ack();
     974:	0e 94 29 03 	call	0x652	; 0x652 <twi_addr_write_ack>
     978:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     97a:	88 23       	and	r24, r24
     97c:	21 f0       	breq	.+8      	; 0x986 <twi_write_batch_by_reg+0x40>
			twi_stop();
     97e:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
			return err;
     982:	8c 2f       	mov	r24, r28
     984:	25 c0       	rjmp	.+74     	; 0x9d0 <twi_write_batch_by_reg+0x8a>
		}
		
		
		TWDR1 = reg;
     986:	00 93 db 00 	sts	0x00DB, r16	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		err = twi_data_write_ack();
     98a:	0e 94 3c 03 	call	0x678	; 0x678 <twi_data_write_ack>
     98e:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     990:	88 23       	and	r24, r24
     992:	b1 f0       	breq	.+44     	; 0x9c0 <twi_write_batch_by_reg+0x7a>
			twi_stop();
     994:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
			return err;
     998:	8c 2f       	mov	r24, r28
     99a:	1a c0       	rjmp	.+52     	; 0x9d0 <twi_write_batch_by_reg+0x8a>
		}
		
		for(i = 0; i < len;i++){
			TWDR1 = data[i];
     99c:	f6 01       	movw	r30, r12
     99e:	e0 0f       	add	r30, r16
     9a0:	f1 1f       	adc	r31, r17
     9a2:	80 81       	ld	r24, Z
     9a4:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
			err = twi_data_write_ack();
     9a8:	0e 94 3c 03 	call	0x678	; 0x678 <twi_data_write_ack>
     9ac:	c8 2f       	mov	r28, r24
			if(err != TWI_OK){
     9ae:	88 23       	and	r24, r24
     9b0:	21 f0       	breq	.+8      	; 0x9ba <twi_write_batch_by_reg+0x74>
				twi_stop();
     9b2:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
				return err;
     9b6:	8c 2f       	mov	r24, r28
     9b8:	0b c0       	rjmp	.+22     	; 0x9d0 <twi_write_batch_by_reg+0x8a>
		if(err != TWI_OK){
			twi_stop();
			return err;
		}
		
		for(i = 0; i < len;i++){
     9ba:	0f 5f       	subi	r16, 0xFF	; 255
     9bc:	1f 4f       	sbci	r17, 0xFF	; 255
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <twi_write_batch_by_reg+0x7e>
     9c0:	00 e0       	ldi	r16, 0x00	; 0
     9c2:	10 e0       	ldi	r17, 0x00	; 0
     9c4:	0e 15       	cp	r16, r14
     9c6:	1f 05       	cpc	r17, r15
     9c8:	48 f3       	brcs	.-46     	; 0x99c <twi_write_batch_by_reg+0x56>
				return err;
			}
		}
		
		
		twi_stop();
     9ca:	0e 94 12 03 	call	0x624	; 0x624 <twi_stop>
		
		return err;
     9ce:	8c 2f       	mov	r24, r28
}
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	cf 90       	pop	r12
     9de:	08 95       	ret

000009e0 <twi_init>:





void twi_init(uint32_t speed){
     9e0:	9b 01       	movw	r18, r22
     9e2:	ac 01       	movw	r20, r24
	
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	72 e1       	ldi	r23, 0x12	; 18
     9e8:	8a e7       	ldi	r24, 0x7A	; 122
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__udivmodsi4>
     9f0:	da 01       	movw	r26, r20
     9f2:	c9 01       	movw	r24, r18
     9f4:	40 97       	sbiw	r24, 0x10	; 16
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	b6 95       	lsr	r27
     9fc:	a7 95       	ror	r26
     9fe:	97 95       	ror	r25
     a00:	87 95       	ror	r24
	TWBR1 = gen_t & 0xFF;
     a02:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	TWCR1 = (1 << TWEN) | (1 << TWIE);
     a06:	85 e0       	ldi	r24, 0x05	; 5
     a08:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     a0c:	08 95       	ret

00000a0e <__vector_18>:

void uart_send_array(uint8_t *c,uint16_t len){
	for(uint16_t i = 0; i < len;i++){
		uart_send_byte(c[i]);
	}
}
     a0e:	1f 92       	push	r1
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	0f 92       	push	r0
     a16:	11 24       	eor	r1, r1
     a18:	8f 93       	push	r24
     a1a:	9f 93       	push	r25
     a1c:	ef 93       	push	r30
     a1e:	ff 93       	push	r31
     a20:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <rx_count>
     a24:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <rx_count+0x1>
     a28:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     a2c:	e2 51       	subi	r30, 0x12	; 18
     a2e:	fe 4f       	sbci	r31, 0xFE	; 254
     a30:	80 83       	st	Z, r24
     a32:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <rx_count>
     a36:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <rx_count+0x1>
     a3a:	e2 51       	subi	r30, 0x12	; 18
     a3c:	fe 4f       	sbci	r31, 0xFE	; 254
     a3e:	80 81       	ld	r24, Z
     a40:	8d 30       	cpi	r24, 0x0D	; 13
     a42:	51 f4       	brne	.+20     	; 0xa58 <__vector_18+0x4a>
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <read_complete>
     a4a:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <rx_count>
     a4e:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <rx_count+0x1>
     a52:	e1 51       	subi	r30, 0x11	; 17
     a54:	fe 4f       	sbci	r31, 0xFE	; 254
     a56:	10 82       	st	Z, r1
     a58:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <rx_count>
     a5c:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <rx_count+0x1>
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <rx_count+0x1>
     a66:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <rx_count>
     a6a:	ff 91       	pop	r31
     a6c:	ef 91       	pop	r30
     a6e:	9f 91       	pop	r25
     a70:	8f 91       	pop	r24
     a72:	0f 90       	pop	r0
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	0f 90       	pop	r0
     a78:	1f 90       	pop	r1
     a7a:	18 95       	reti

00000a7c <__vector_20>:
     a7c:	1f 92       	push	r1
     a7e:	0f 92       	push	r0
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	0f 92       	push	r0
     a84:	11 24       	eor	r1, r1
     a86:	8f 93       	push	r24
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <uart_tx_busy>
     a8e:	8f 91       	pop	r24
     a90:	0f 90       	pop	r0
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	0f 90       	pop	r0
     a96:	1f 90       	pop	r1
     a98:	18 95       	reti

00000a9a <uart_init>:
     a9a:	44 23       	and	r20, r20
     a9c:	39 f0       	breq	.+14     	; 0xaac <uart_init+0x12>
     a9e:	e0 ec       	ldi	r30, 0xC0	; 192
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	20 81       	ld	r18, Z
     aa4:	22 60       	ori	r18, 0x02	; 2
     aa6:	20 83       	st	Z, r18
     aa8:	a8 e0       	ldi	r26, 0x08	; 8
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <uart_init+0x14>
     aac:	a0 e1       	ldi	r26, 0x10	; 16
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	9b 01       	movw	r18, r22
     ab2:	ac 01       	movw	r20, r24
     ab4:	0e 94 b1 07 	call	0xf62	; 0xf62 <__muluhisi3>
     ab8:	9b 01       	movw	r18, r22
     aba:	ac 01       	movw	r20, r24
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	72 e1       	ldi	r23, 0x12	; 18
     ac0:	8a e7       	ldi	r24, 0x7A	; 122
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__udivmodsi4>
     ac8:	ba 01       	movw	r22, r20
     aca:	a9 01       	movw	r20, r18
     acc:	41 50       	subi	r20, 0x01	; 1
     ace:	51 09       	sbc	r21, r1
     ad0:	61 09       	sbc	r22, r1
     ad2:	71 09       	sbc	r23, r1
     ad4:	db 01       	movw	r26, r22
     ad6:	ca 01       	movw	r24, r20
     ad8:	88 27       	eor	r24, r24
     ada:	9f 70       	andi	r25, 0x0F	; 15
     adc:	aa 27       	eor	r26, r26
     ade:	bb 27       	eor	r27, r27
     ae0:	89 2f       	mov	r24, r25
     ae2:	9a 2f       	mov	r25, r26
     ae4:	ab 2f       	mov	r26, r27
     ae6:	bb 27       	eor	r27, r27
     ae8:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     aec:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     af0:	e1 ec       	ldi	r30, 0xC1	; 193
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	88 6d       	ori	r24, 0xD8	; 216
     af8:	80 83       	st	Z, r24
     afa:	86 e8       	ldi	r24, 0x86	; 134
     afc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     b00:	08 95       	ret

00000b02 <uart_send_byte>:
     b02:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <uart_tx_busy>
     b06:	99 23       	and	r25, r25
     b08:	e1 f3       	breq	.-8      	; 0xb02 <uart_send_byte>
     b0a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <uart_tx_busy>
     b0e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     b12:	08 95       	ret

00000b14 <uart_send_string>:

void uart_send_string(uint8_t *c){
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	8c 01       	movw	r16, r24
	uint16_t i = 0;
     b1e:	c0 e0       	ldi	r28, 0x00	; 0
     b20:	d0 e0       	ldi	r29, 0x00	; 0
	do{
		uart_send_byte(c[i]);
     b22:	f8 01       	movw	r30, r16
     b24:	ec 0f       	add	r30, r28
     b26:	fd 1f       	adc	r31, r29
     b28:	80 81       	ld	r24, Z
     b2a:	0e 94 81 05 	call	0xb02	; 0xb02 <uart_send_byte>
		i++;
     b2e:	21 96       	adiw	r28, 0x01	; 1
		
	}while(c[i] != '\0');
     b30:	f8 01       	movw	r30, r16
     b32:	ec 0f       	add	r30, r28
     b34:	fd 1f       	adc	r31, r29
     b36:	80 81       	ld	r24, Z
     b38:	81 11       	cpse	r24, r1
     b3a:	f3 cf       	rjmp	.-26     	; 0xb22 <uart_send_string+0xe>
	//uart_send_byte(c[i]);
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	08 95       	ret

00000b46 <__vector_1>:
	uint8_t brightness[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 100, 250, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100};
	//uint8_t LEDs[16]; 
	uint8_t pwmChannels[16];
	
		
ISR(INT0_vect){
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
	rtc_int_request=1;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <rtc_int_request>
	toggle_pin_level(&ld1);
     b6e:	82 e3       	ldi	r24, 0x32	; 50
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	0e 94 36 01 	call	0x26c	; 0x26c <toggle_pin_level>
}	
     b76:	ff 91       	pop	r31
     b78:	ef 91       	pop	r30
     b7a:	bf 91       	pop	r27
     b7c:	af 91       	pop	r26
     b7e:	9f 91       	pop	r25
     b80:	8f 91       	pop	r24
     b82:	7f 91       	pop	r23
     b84:	6f 91       	pop	r22
     b86:	5f 91       	pop	r21
     b88:	4f 91       	pop	r20
     b8a:	3f 91       	pop	r19
     b8c:	2f 91       	pop	r18
     b8e:	0f 90       	pop	r0
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	0f 90       	pop	r0
     b94:	1f 90       	pop	r1
     b96:	18 95       	reti

00000b98 <main>:
int main(void)
{
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	c0 58       	subi	r28, 0x80	; 128
     ba2:	d1 09       	sbc	r29, r1
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	cd bf       	out	0x3d, r28	; 61
	char char_array[128]="\0";
     bae:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rtc_int+0x3>
     bb2:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <rtc_int+0x4>
     bb6:	9a 83       	std	Y+2, r25	; 0x02
     bb8:	89 83       	std	Y+1, r24	; 0x01
     bba:	fe 01       	movw	r30, r28
     bbc:	33 96       	adiw	r30, 0x03	; 3
     bbe:	8e e7       	ldi	r24, 0x7E	; 126
     bc0:	df 01       	movw	r26, r30
     bc2:	1d 92       	st	X+, r1
     bc4:	8a 95       	dec	r24
     bc6:	e9 f7       	brne	.-6      	; 0xbc2 <main+0x2a>
	uart_init(9600,1);
     bc8:	41 e0       	ldi	r20, 0x01	; 1
     bca:	60 e8       	ldi	r22, 0x80	; 128
     bcc:	75 e2       	ldi	r23, 0x25	; 37
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 4d 05 	call	0xa9a	; 0xa9a <uart_init>
	twi_init(400000);
     bd6:	60 e8       	ldi	r22, 0x80	; 128
     bd8:	7a e1       	ldi	r23, 0x1A	; 26
     bda:	86 e0       	ldi	r24, 0x06	; 6
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <twi_init>
	
	EICRA |= (0b10 << ISC00);
     be2:	e9 e6       	ldi	r30, 0x69	; 105
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	82 60       	ori	r24, 0x02	; 2
     bea:	80 83       	st	Z, r24
	EIMSK = 0x01; //0b00000001
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8d bb       	out	0x1d, r24	; 29
	
	set_pin_dir(&ld1 , PORT_DIR_OUT); set_pin_level(&ld1, true);
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	82 e3       	ldi	r24, 0x32	; 50
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <set_pin_dir>
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	82 e3       	ldi	r24, 0x32	; 50
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 cb 00 	call	0x196	; 0x196 <set_pin_level>
	set_pin_dir(&rtc_int, PORT_DIR_IN);
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	85 e3       	ldi	r24, 0x35	; 53
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <set_pin_dir>
	
	sei();
     c0e:	78 94       	sei
	rtc_set(&sys_rtc);
     c10:	8a e2       	ldi	r24, 0x2A	; 42
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	0e 94 cb 01 	call	0x396	; 0x396 <rtc_set>
	rtc_int_enable(&sys_rtc ,0);
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	8a e2       	ldi	r24, 0x2A	; 42
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	0e 94 47 01 	call	0x28e	; 0x28e <rtc_int_enable>
	adc_init();
     c24:	0e 94 88 00 	call	0x110	; 0x110 <adc_init>
	

	led_board_sw_reset(panel_addr);
     c28:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <panel_addr>
     c2c:	0e 94 0c 02 	call	0x418	; 0x418 <led_board_sw_reset>
	led_board_init(panel_addr);
     c30:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <panel_addr>
     c34:	0e 94 49 02 	call	0x492	; 0x492 <led_board_init>

	
	uart_send_string((uint8_t *)"RUN\n\r");
     c38:	88 eb       	ldi	r24, 0xB8	; 184
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	0e 94 8a 05 	call	0xb14	; 0xb14 <uart_send_string>
    while (1) 
    {
		
		
		
		if (rtc_int_request != 0){
     c40:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <rtc_int_request>
     c44:	88 23       	and	r24, r24
     c46:	e1 f3       	breq	.-8      	; 0xc40 <main+0xa8>
			rtc_sync(&sys_rtc);
     c48:	8a e2       	ldi	r24, 0x2A	; 42
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	0e 94 75 01 	call	0x2ea	; 0x2ea <rtc_sync>
			BAT_VOLT = get_mVolt(ADC4_PIN);
     c50:	84 e0       	ldi	r24, 0x04	; 4
     c52:	0e 94 b8 00 	call	0x170	; 0x170 <get_mVolt>
     c56:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <BAT_VOLT+0x1>
     c5a:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <BAT_VOLT>
			LIGHT_LEVEL = get_mVolt(ADC5_PIN);			
     c5e:	85 e0       	ldi	r24, 0x05	; 5
     c60:	0e 94 b8 00 	call	0x170	; 0x170 <get_mVolt>
     c64:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <LIGHT_LEVEL>
     c68:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <LIGHT_LEVEL+0x1>
			sprintf(char_array, "%02d:%02d:%02d; bat:%umV; l=%u; init: %02X \r\n", sys_rtc.hour, sys_rtc.minute, sys_rtc.second, BAT_VOLT, LIGHT_LEVEL);
     c6c:	ea e2       	ldi	r30, 0x2A	; 42
     c6e:	f1 e0       	ldi	r31, 0x01	; 1
     c70:	40 81       	ld	r20, Z
     c72:	31 81       	ldd	r19, Z+1	; 0x01
     c74:	22 81       	ldd	r18, Z+2	; 0x02
     c76:	9f 93       	push	r25
     c78:	8f 93       	push	r24
     c7a:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <BAT_VOLT+0x1>
     c7e:	8f 93       	push	r24
     c80:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <BAT_VOLT>
     c84:	8f 93       	push	r24
     c86:	1f 92       	push	r1
     c88:	4f 93       	push	r20
     c8a:	1f 92       	push	r1
     c8c:	3f 93       	push	r19
     c8e:	1f 92       	push	r1
     c90:	2f 93       	push	r18
     c92:	8e eb       	ldi	r24, 0xBE	; 190
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	9f 93       	push	r25
     c98:	8f 93       	push	r24
     c9a:	8e 01       	movw	r16, r28
     c9c:	0f 5f       	subi	r16, 0xFF	; 255
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	1f 93       	push	r17
     ca2:	0f 93       	push	r16
     ca4:	0e 94 cb 07 	call	0xf96	; 0xf96 <sprintf>
			uart_send_string((uint8_t *)char_array);
     ca8:	c8 01       	movw	r24, r16
     caa:	0e 94 8a 05 	call	0xb14	; 0xb14 <uart_send_string>
			rtc_int_request = 0;
     cae:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <rtc_int_request>
			
			//led_write_batch(panel_addr, led_pattern_1,sizeof(led_pattern_1));
			//_delay_ms(250);
			//led_write_batch(panel_addr, led_pattern_2,sizeof(led_pattern_2));
			run_wave(brightness, pwmChannels);
     cb2:	65 e7       	ldi	r22, 0x75	; 117
     cb4:	72 e0       	ldi	r23, 0x02	; 2
     cb6:	86 e0       	ldi	r24, 0x06	; 6
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0e 94 cd 02 	call	0x59a	; 0x59a <run_wave>
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	bb cf       	rjmp	.-138    	; 0xc40 <main+0xa8>

00000cca <__fixunssfsi>:
     cca:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__fp_splitA>
     cce:	88 f0       	brcs	.+34     	; 0xcf2 <__fixunssfsi+0x28>
     cd0:	9f 57       	subi	r25, 0x7F	; 127
     cd2:	98 f0       	brcs	.+38     	; 0xcfa <__fixunssfsi+0x30>
     cd4:	b9 2f       	mov	r27, r25
     cd6:	99 27       	eor	r25, r25
     cd8:	b7 51       	subi	r27, 0x17	; 23
     cda:	b0 f0       	brcs	.+44     	; 0xd08 <__fixunssfsi+0x3e>
     cdc:	e1 f0       	breq	.+56     	; 0xd16 <__fixunssfsi+0x4c>
     cde:	66 0f       	add	r22, r22
     ce0:	77 1f       	adc	r23, r23
     ce2:	88 1f       	adc	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	1a f0       	brmi	.+6      	; 0xcee <__fixunssfsi+0x24>
     ce8:	ba 95       	dec	r27
     cea:	c9 f7       	brne	.-14     	; 0xcde <__fixunssfsi+0x14>
     cec:	14 c0       	rjmp	.+40     	; 0xd16 <__fixunssfsi+0x4c>
     cee:	b1 30       	cpi	r27, 0x01	; 1
     cf0:	91 f0       	breq	.+36     	; 0xd16 <__fixunssfsi+0x4c>
     cf2:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_zero>
     cf6:	b1 e0       	ldi	r27, 0x01	; 1
     cf8:	08 95       	ret
     cfa:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_zero>
     cfe:	67 2f       	mov	r22, r23
     d00:	78 2f       	mov	r23, r24
     d02:	88 27       	eor	r24, r24
     d04:	b8 5f       	subi	r27, 0xF8	; 248
     d06:	39 f0       	breq	.+14     	; 0xd16 <__fixunssfsi+0x4c>
     d08:	b9 3f       	cpi	r27, 0xF9	; 249
     d0a:	cc f3       	brlt	.-14     	; 0xcfe <__fixunssfsi+0x34>
     d0c:	86 95       	lsr	r24
     d0e:	77 95       	ror	r23
     d10:	67 95       	ror	r22
     d12:	b3 95       	inc	r27
     d14:	d9 f7       	brne	.-10     	; 0xd0c <__fixunssfsi+0x42>
     d16:	3e f4       	brtc	.+14     	; 0xd26 <__fixunssfsi+0x5c>
     d18:	90 95       	com	r25
     d1a:	80 95       	com	r24
     d1c:	70 95       	com	r23
     d1e:	61 95       	neg	r22
     d20:	7f 4f       	sbci	r23, 0xFF	; 255
     d22:	8f 4f       	sbci	r24, 0xFF	; 255
     d24:	9f 4f       	sbci	r25, 0xFF	; 255
     d26:	08 95       	ret

00000d28 <__floatunsisf>:
     d28:	e8 94       	clt
     d2a:	09 c0       	rjmp	.+18     	; 0xd3e <__floatsisf+0x12>

00000d2c <__floatsisf>:
     d2c:	97 fb       	bst	r25, 7
     d2e:	3e f4       	brtc	.+14     	; 0xd3e <__floatsisf+0x12>
     d30:	90 95       	com	r25
     d32:	80 95       	com	r24
     d34:	70 95       	com	r23
     d36:	61 95       	neg	r22
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	8f 4f       	sbci	r24, 0xFF	; 255
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	99 23       	and	r25, r25
     d40:	a9 f0       	breq	.+42     	; 0xd6c <__floatsisf+0x40>
     d42:	f9 2f       	mov	r31, r25
     d44:	96 e9       	ldi	r25, 0x96	; 150
     d46:	bb 27       	eor	r27, r27
     d48:	93 95       	inc	r25
     d4a:	f6 95       	lsr	r31
     d4c:	87 95       	ror	r24
     d4e:	77 95       	ror	r23
     d50:	67 95       	ror	r22
     d52:	b7 95       	ror	r27
     d54:	f1 11       	cpse	r31, r1
     d56:	f8 cf       	rjmp	.-16     	; 0xd48 <__floatsisf+0x1c>
     d58:	fa f4       	brpl	.+62     	; 0xd98 <__floatsisf+0x6c>
     d5a:	bb 0f       	add	r27, r27
     d5c:	11 f4       	brne	.+4      	; 0xd62 <__floatsisf+0x36>
     d5e:	60 ff       	sbrs	r22, 0
     d60:	1b c0       	rjmp	.+54     	; 0xd98 <__floatsisf+0x6c>
     d62:	6f 5f       	subi	r22, 0xFF	; 255
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	8f 4f       	sbci	r24, 0xFF	; 255
     d68:	9f 4f       	sbci	r25, 0xFF	; 255
     d6a:	16 c0       	rjmp	.+44     	; 0xd98 <__floatsisf+0x6c>
     d6c:	88 23       	and	r24, r24
     d6e:	11 f0       	breq	.+4      	; 0xd74 <__floatsisf+0x48>
     d70:	96 e9       	ldi	r25, 0x96	; 150
     d72:	11 c0       	rjmp	.+34     	; 0xd96 <__floatsisf+0x6a>
     d74:	77 23       	and	r23, r23
     d76:	21 f0       	breq	.+8      	; 0xd80 <__floatsisf+0x54>
     d78:	9e e8       	ldi	r25, 0x8E	; 142
     d7a:	87 2f       	mov	r24, r23
     d7c:	76 2f       	mov	r23, r22
     d7e:	05 c0       	rjmp	.+10     	; 0xd8a <__floatsisf+0x5e>
     d80:	66 23       	and	r22, r22
     d82:	71 f0       	breq	.+28     	; 0xda0 <__floatsisf+0x74>
     d84:	96 e8       	ldi	r25, 0x86	; 134
     d86:	86 2f       	mov	r24, r22
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	2a f0       	brmi	.+10     	; 0xd98 <__floatsisf+0x6c>
     d8e:	9a 95       	dec	r25
     d90:	66 0f       	add	r22, r22
     d92:	77 1f       	adc	r23, r23
     d94:	88 1f       	adc	r24, r24
     d96:	da f7       	brpl	.-10     	; 0xd8e <__floatsisf+0x62>
     d98:	88 0f       	add	r24, r24
     d9a:	96 95       	lsr	r25
     d9c:	87 95       	ror	r24
     d9e:	97 f9       	bld	r25, 7
     da0:	08 95       	ret

00000da2 <__fp_split3>:
     da2:	57 fd       	sbrc	r21, 7
     da4:	90 58       	subi	r25, 0x80	; 128
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	59 f0       	breq	.+22     	; 0xdc2 <__fp_splitA+0x10>
     dac:	5f 3f       	cpi	r21, 0xFF	; 255
     dae:	71 f0       	breq	.+28     	; 0xdcc <__fp_splitA+0x1a>
     db0:	47 95       	ror	r20

00000db2 <__fp_splitA>:
     db2:	88 0f       	add	r24, r24
     db4:	97 fb       	bst	r25, 7
     db6:	99 1f       	adc	r25, r25
     db8:	61 f0       	breq	.+24     	; 0xdd2 <__fp_splitA+0x20>
     dba:	9f 3f       	cpi	r25, 0xFF	; 255
     dbc:	79 f0       	breq	.+30     	; 0xddc <__fp_splitA+0x2a>
     dbe:	87 95       	ror	r24
     dc0:	08 95       	ret
     dc2:	12 16       	cp	r1, r18
     dc4:	13 06       	cpc	r1, r19
     dc6:	14 06       	cpc	r1, r20
     dc8:	55 1f       	adc	r21, r21
     dca:	f2 cf       	rjmp	.-28     	; 0xdb0 <__fp_split3+0xe>
     dcc:	46 95       	lsr	r20
     dce:	f1 df       	rcall	.-30     	; 0xdb2 <__fp_splitA>
     dd0:	08 c0       	rjmp	.+16     	; 0xde2 <__fp_splitA+0x30>
     dd2:	16 16       	cp	r1, r22
     dd4:	17 06       	cpc	r1, r23
     dd6:	18 06       	cpc	r1, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	f1 cf       	rjmp	.-30     	; 0xdbe <__fp_splitA+0xc>
     ddc:	86 95       	lsr	r24
     dde:	71 05       	cpc	r23, r1
     de0:	61 05       	cpc	r22, r1
     de2:	08 94       	sec
     de4:	08 95       	ret

00000de6 <__fp_zero>:
     de6:	e8 94       	clt

00000de8 <__fp_szero>:
     de8:	bb 27       	eor	r27, r27
     dea:	66 27       	eor	r22, r22
     dec:	77 27       	eor	r23, r23
     dee:	cb 01       	movw	r24, r22
     df0:	97 f9       	bld	r25, 7
     df2:	08 95       	ret

00000df4 <__mulsf3>:
     df4:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__mulsf3x>
     df8:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__fp_round>
     dfc:	0e 94 70 07 	call	0xee0	; 0xee0 <__fp_pscA>
     e00:	38 f0       	brcs	.+14     	; 0xe10 <__mulsf3+0x1c>
     e02:	0e 94 77 07 	call	0xeee	; 0xeee <__fp_pscB>
     e06:	20 f0       	brcs	.+8      	; 0xe10 <__mulsf3+0x1c>
     e08:	95 23       	and	r25, r21
     e0a:	11 f0       	breq	.+4      	; 0xe10 <__mulsf3+0x1c>
     e0c:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_inf>
     e10:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_nan>
     e14:	11 24       	eor	r1, r1
     e16:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_szero>

00000e1a <__mulsf3x>:
     e1a:	0e 94 d1 06 	call	0xda2	; 0xda2 <__fp_split3>
     e1e:	70 f3       	brcs	.-36     	; 0xdfc <__mulsf3+0x8>

00000e20 <__mulsf3_pse>:
     e20:	95 9f       	mul	r25, r21
     e22:	c1 f3       	breq	.-16     	; 0xe14 <__mulsf3+0x20>
     e24:	95 0f       	add	r25, r21
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	55 1f       	adc	r21, r21
     e2a:	62 9f       	mul	r22, r18
     e2c:	f0 01       	movw	r30, r0
     e2e:	72 9f       	mul	r23, r18
     e30:	bb 27       	eor	r27, r27
     e32:	f0 0d       	add	r31, r0
     e34:	b1 1d       	adc	r27, r1
     e36:	63 9f       	mul	r22, r19
     e38:	aa 27       	eor	r26, r26
     e3a:	f0 0d       	add	r31, r0
     e3c:	b1 1d       	adc	r27, r1
     e3e:	aa 1f       	adc	r26, r26
     e40:	64 9f       	mul	r22, r20
     e42:	66 27       	eor	r22, r22
     e44:	b0 0d       	add	r27, r0
     e46:	a1 1d       	adc	r26, r1
     e48:	66 1f       	adc	r22, r22
     e4a:	82 9f       	mul	r24, r18
     e4c:	22 27       	eor	r18, r18
     e4e:	b0 0d       	add	r27, r0
     e50:	a1 1d       	adc	r26, r1
     e52:	62 1f       	adc	r22, r18
     e54:	73 9f       	mul	r23, r19
     e56:	b0 0d       	add	r27, r0
     e58:	a1 1d       	adc	r26, r1
     e5a:	62 1f       	adc	r22, r18
     e5c:	83 9f       	mul	r24, r19
     e5e:	a0 0d       	add	r26, r0
     e60:	61 1d       	adc	r22, r1
     e62:	22 1f       	adc	r18, r18
     e64:	74 9f       	mul	r23, r20
     e66:	33 27       	eor	r19, r19
     e68:	a0 0d       	add	r26, r0
     e6a:	61 1d       	adc	r22, r1
     e6c:	23 1f       	adc	r18, r19
     e6e:	84 9f       	mul	r24, r20
     e70:	60 0d       	add	r22, r0
     e72:	21 1d       	adc	r18, r1
     e74:	82 2f       	mov	r24, r18
     e76:	76 2f       	mov	r23, r22
     e78:	6a 2f       	mov	r22, r26
     e7a:	11 24       	eor	r1, r1
     e7c:	9f 57       	subi	r25, 0x7F	; 127
     e7e:	50 40       	sbci	r21, 0x00	; 0
     e80:	9a f0       	brmi	.+38     	; 0xea8 <__mulsf3_pse+0x88>
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__mulsf3_pse+0xa0>
     e84:	88 23       	and	r24, r24
     e86:	4a f0       	brmi	.+18     	; 0xe9a <__mulsf3_pse+0x7a>
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	bb 1f       	adc	r27, r27
     e8e:	66 1f       	adc	r22, r22
     e90:	77 1f       	adc	r23, r23
     e92:	88 1f       	adc	r24, r24
     e94:	91 50       	subi	r25, 0x01	; 1
     e96:	50 40       	sbci	r21, 0x00	; 0
     e98:	a9 f7       	brne	.-22     	; 0xe84 <__mulsf3_pse+0x64>
     e9a:	9e 3f       	cpi	r25, 0xFE	; 254
     e9c:	51 05       	cpc	r21, r1
     e9e:	80 f0       	brcs	.+32     	; 0xec0 <__mulsf3_pse+0xa0>
     ea0:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_inf>
     ea4:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_szero>
     ea8:	5f 3f       	cpi	r21, 0xFF	; 255
     eaa:	e4 f3       	brlt	.-8      	; 0xea4 <__mulsf3_pse+0x84>
     eac:	98 3e       	cpi	r25, 0xE8	; 232
     eae:	d4 f3       	brlt	.-12     	; 0xea4 <__mulsf3_pse+0x84>
     eb0:	86 95       	lsr	r24
     eb2:	77 95       	ror	r23
     eb4:	67 95       	ror	r22
     eb6:	b7 95       	ror	r27
     eb8:	f7 95       	ror	r31
     eba:	e7 95       	ror	r30
     ebc:	9f 5f       	subi	r25, 0xFF	; 255
     ebe:	c1 f7       	brne	.-16     	; 0xeb0 <__mulsf3_pse+0x90>
     ec0:	fe 2b       	or	r31, r30
     ec2:	88 0f       	add	r24, r24
     ec4:	91 1d       	adc	r25, r1
     ec6:	96 95       	lsr	r25
     ec8:	87 95       	ror	r24
     eca:	97 f9       	bld	r25, 7
     ecc:	08 95       	ret

00000ece <__fp_inf>:
     ece:	97 f9       	bld	r25, 7
     ed0:	9f 67       	ori	r25, 0x7F	; 127
     ed2:	80 e8       	ldi	r24, 0x80	; 128
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	08 95       	ret

00000eda <__fp_nan>:
     eda:	9f ef       	ldi	r25, 0xFF	; 255
     edc:	80 ec       	ldi	r24, 0xC0	; 192
     ede:	08 95       	ret

00000ee0 <__fp_pscA>:
     ee0:	00 24       	eor	r0, r0
     ee2:	0a 94       	dec	r0
     ee4:	16 16       	cp	r1, r22
     ee6:	17 06       	cpc	r1, r23
     ee8:	18 06       	cpc	r1, r24
     eea:	09 06       	cpc	r0, r25
     eec:	08 95       	ret

00000eee <__fp_pscB>:
     eee:	00 24       	eor	r0, r0
     ef0:	0a 94       	dec	r0
     ef2:	12 16       	cp	r1, r18
     ef4:	13 06       	cpc	r1, r19
     ef6:	14 06       	cpc	r1, r20
     ef8:	05 06       	cpc	r0, r21
     efa:	08 95       	ret

00000efc <__fp_round>:
     efc:	09 2e       	mov	r0, r25
     efe:	03 94       	inc	r0
     f00:	00 0c       	add	r0, r0
     f02:	11 f4       	brne	.+4      	; 0xf08 <__fp_round+0xc>
     f04:	88 23       	and	r24, r24
     f06:	52 f0       	brmi	.+20     	; 0xf1c <__fp_round+0x20>
     f08:	bb 0f       	add	r27, r27
     f0a:	40 f4       	brcc	.+16     	; 0xf1c <__fp_round+0x20>
     f0c:	bf 2b       	or	r27, r31
     f0e:	11 f4       	brne	.+4      	; 0xf14 <__fp_round+0x18>
     f10:	60 ff       	sbrs	r22, 0
     f12:	04 c0       	rjmp	.+8      	; 0xf1c <__fp_round+0x20>
     f14:	6f 5f       	subi	r22, 0xFF	; 255
     f16:	7f 4f       	sbci	r23, 0xFF	; 255
     f18:	8f 4f       	sbci	r24, 0xFF	; 255
     f1a:	9f 4f       	sbci	r25, 0xFF	; 255
     f1c:	08 95       	ret

00000f1e <__udivmodsi4>:
     f1e:	a1 e2       	ldi	r26, 0x21	; 33
     f20:	1a 2e       	mov	r1, r26
     f22:	aa 1b       	sub	r26, r26
     f24:	bb 1b       	sub	r27, r27
     f26:	fd 01       	movw	r30, r26
     f28:	0d c0       	rjmp	.+26     	; 0xf44 <__udivmodsi4_ep>

00000f2a <__udivmodsi4_loop>:
     f2a:	aa 1f       	adc	r26, r26
     f2c:	bb 1f       	adc	r27, r27
     f2e:	ee 1f       	adc	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	a2 17       	cp	r26, r18
     f34:	b3 07       	cpc	r27, r19
     f36:	e4 07       	cpc	r30, r20
     f38:	f5 07       	cpc	r31, r21
     f3a:	20 f0       	brcs	.+8      	; 0xf44 <__udivmodsi4_ep>
     f3c:	a2 1b       	sub	r26, r18
     f3e:	b3 0b       	sbc	r27, r19
     f40:	e4 0b       	sbc	r30, r20
     f42:	f5 0b       	sbc	r31, r21

00000f44 <__udivmodsi4_ep>:
     f44:	66 1f       	adc	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	88 1f       	adc	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	1a 94       	dec	r1
     f4e:	69 f7       	brne	.-38     	; 0xf2a <__udivmodsi4_loop>
     f50:	60 95       	com	r22
     f52:	70 95       	com	r23
     f54:	80 95       	com	r24
     f56:	90 95       	com	r25
     f58:	9b 01       	movw	r18, r22
     f5a:	ac 01       	movw	r20, r24
     f5c:	bd 01       	movw	r22, r26
     f5e:	cf 01       	movw	r24, r30
     f60:	08 95       	ret

00000f62 <__muluhisi3>:
     f62:	0e 94 bc 07 	call	0xf78	; 0xf78 <__umulhisi3>
     f66:	a5 9f       	mul	r26, r21
     f68:	90 0d       	add	r25, r0
     f6a:	b4 9f       	mul	r27, r20
     f6c:	90 0d       	add	r25, r0
     f6e:	a4 9f       	mul	r26, r20
     f70:	80 0d       	add	r24, r0
     f72:	91 1d       	adc	r25, r1
     f74:	11 24       	eor	r1, r1
     f76:	08 95       	ret

00000f78 <__umulhisi3>:
     f78:	a2 9f       	mul	r26, r18
     f7a:	b0 01       	movw	r22, r0
     f7c:	b3 9f       	mul	r27, r19
     f7e:	c0 01       	movw	r24, r0
     f80:	a3 9f       	mul	r26, r19
     f82:	70 0d       	add	r23, r0
     f84:	81 1d       	adc	r24, r1
     f86:	11 24       	eor	r1, r1
     f88:	91 1d       	adc	r25, r1
     f8a:	b2 9f       	mul	r27, r18
     f8c:	70 0d       	add	r23, r0
     f8e:	81 1d       	adc	r24, r1
     f90:	11 24       	eor	r1, r1
     f92:	91 1d       	adc	r25, r1
     f94:	08 95       	ret

00000f96 <sprintf>:
     f96:	ae e0       	ldi	r26, 0x0E	; 14
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e1 ed       	ldi	r30, 0xD1	; 209
     f9c:	f7 e0       	ldi	r31, 0x07	; 7
     f9e:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__prologue_saves__+0x1c>
     fa2:	0d 89       	ldd	r16, Y+21	; 0x15
     fa4:	1e 89       	ldd	r17, Y+22	; 0x16
     fa6:	86 e0       	ldi	r24, 0x06	; 6
     fa8:	8c 83       	std	Y+4, r24	; 0x04
     faa:	1a 83       	std	Y+2, r17	; 0x02
     fac:	09 83       	std	Y+1, r16	; 0x01
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	9f e7       	ldi	r25, 0x7F	; 127
     fb2:	9e 83       	std	Y+6, r25	; 0x06
     fb4:	8d 83       	std	Y+5, r24	; 0x05
     fb6:	ae 01       	movw	r20, r28
     fb8:	47 5e       	subi	r20, 0xE7	; 231
     fba:	5f 4f       	sbci	r21, 0xFF	; 255
     fbc:	6f 89       	ldd	r22, Y+23	; 0x17
     fbe:	78 8d       	ldd	r23, Y+24	; 0x18
     fc0:	ce 01       	movw	r24, r28
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	0e 94 ed 07 	call	0xfda	; 0xfda <vfprintf>
     fc8:	ef 81       	ldd	r30, Y+7	; 0x07
     fca:	f8 85       	ldd	r31, Y+8	; 0x08
     fcc:	e0 0f       	add	r30, r16
     fce:	f1 1f       	adc	r31, r17
     fd0:	10 82       	st	Z, r1
     fd2:	2e 96       	adiw	r28, 0x0e	; 14
     fd4:	e4 e0       	ldi	r30, 0x04	; 4
     fd6:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__epilogue_restores__+0x1c>

00000fda <vfprintf>:
     fda:	ab e0       	ldi	r26, 0x0B	; 11
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e3 ef       	ldi	r30, 0xF3	; 243
     fe0:	f7 e0       	ldi	r31, 0x07	; 7
     fe2:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__prologue_saves__>
     fe6:	6c 01       	movw	r12, r24
     fe8:	7b 01       	movw	r14, r22
     fea:	8a 01       	movw	r16, r20
     fec:	fc 01       	movw	r30, r24
     fee:	17 82       	std	Z+7, r1	; 0x07
     ff0:	16 82       	std	Z+6, r1	; 0x06
     ff2:	83 81       	ldd	r24, Z+3	; 0x03
     ff4:	81 ff       	sbrs	r24, 1
     ff6:	cc c1       	rjmp	.+920    	; 0x1390 <vfprintf+0x3b6>
     ff8:	ce 01       	movw	r24, r28
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	3c 01       	movw	r6, r24
     ffe:	f6 01       	movw	r30, r12
    1000:	93 81       	ldd	r25, Z+3	; 0x03
    1002:	f7 01       	movw	r30, r14
    1004:	93 fd       	sbrc	r25, 3
    1006:	85 91       	lpm	r24, Z+
    1008:	93 ff       	sbrs	r25, 3
    100a:	81 91       	ld	r24, Z+
    100c:	7f 01       	movw	r14, r30
    100e:	88 23       	and	r24, r24
    1010:	09 f4       	brne	.+2      	; 0x1014 <vfprintf+0x3a>
    1012:	ba c1       	rjmp	.+884    	; 0x1388 <vfprintf+0x3ae>
    1014:	85 32       	cpi	r24, 0x25	; 37
    1016:	39 f4       	brne	.+14     	; 0x1026 <vfprintf+0x4c>
    1018:	93 fd       	sbrc	r25, 3
    101a:	85 91       	lpm	r24, Z+
    101c:	93 ff       	sbrs	r25, 3
    101e:	81 91       	ld	r24, Z+
    1020:	7f 01       	movw	r14, r30
    1022:	85 32       	cpi	r24, 0x25	; 37
    1024:	29 f4       	brne	.+10     	; 0x1030 <vfprintf+0x56>
    1026:	b6 01       	movw	r22, r12
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    102e:	e7 cf       	rjmp	.-50     	; 0xffe <vfprintf+0x24>
    1030:	91 2c       	mov	r9, r1
    1032:	21 2c       	mov	r2, r1
    1034:	31 2c       	mov	r3, r1
    1036:	ff e1       	ldi	r31, 0x1F	; 31
    1038:	f3 15       	cp	r31, r3
    103a:	d8 f0       	brcs	.+54     	; 0x1072 <vfprintf+0x98>
    103c:	8b 32       	cpi	r24, 0x2B	; 43
    103e:	79 f0       	breq	.+30     	; 0x105e <vfprintf+0x84>
    1040:	38 f4       	brcc	.+14     	; 0x1050 <vfprintf+0x76>
    1042:	80 32       	cpi	r24, 0x20	; 32
    1044:	79 f0       	breq	.+30     	; 0x1064 <vfprintf+0x8a>
    1046:	83 32       	cpi	r24, 0x23	; 35
    1048:	a1 f4       	brne	.+40     	; 0x1072 <vfprintf+0x98>
    104a:	23 2d       	mov	r18, r3
    104c:	20 61       	ori	r18, 0x10	; 16
    104e:	1d c0       	rjmp	.+58     	; 0x108a <vfprintf+0xb0>
    1050:	8d 32       	cpi	r24, 0x2D	; 45
    1052:	61 f0       	breq	.+24     	; 0x106c <vfprintf+0x92>
    1054:	80 33       	cpi	r24, 0x30	; 48
    1056:	69 f4       	brne	.+26     	; 0x1072 <vfprintf+0x98>
    1058:	23 2d       	mov	r18, r3
    105a:	21 60       	ori	r18, 0x01	; 1
    105c:	16 c0       	rjmp	.+44     	; 0x108a <vfprintf+0xb0>
    105e:	83 2d       	mov	r24, r3
    1060:	82 60       	ori	r24, 0x02	; 2
    1062:	38 2e       	mov	r3, r24
    1064:	e3 2d       	mov	r30, r3
    1066:	e4 60       	ori	r30, 0x04	; 4
    1068:	3e 2e       	mov	r3, r30
    106a:	2a c0       	rjmp	.+84     	; 0x10c0 <vfprintf+0xe6>
    106c:	f3 2d       	mov	r31, r3
    106e:	f8 60       	ori	r31, 0x08	; 8
    1070:	1d c0       	rjmp	.+58     	; 0x10ac <vfprintf+0xd2>
    1072:	37 fc       	sbrc	r3, 7
    1074:	2d c0       	rjmp	.+90     	; 0x10d0 <vfprintf+0xf6>
    1076:	20 ed       	ldi	r18, 0xD0	; 208
    1078:	28 0f       	add	r18, r24
    107a:	2a 30       	cpi	r18, 0x0A	; 10
    107c:	40 f0       	brcs	.+16     	; 0x108e <vfprintf+0xb4>
    107e:	8e 32       	cpi	r24, 0x2E	; 46
    1080:	b9 f4       	brne	.+46     	; 0x10b0 <vfprintf+0xd6>
    1082:	36 fc       	sbrc	r3, 6
    1084:	81 c1       	rjmp	.+770    	; 0x1388 <vfprintf+0x3ae>
    1086:	23 2d       	mov	r18, r3
    1088:	20 64       	ori	r18, 0x40	; 64
    108a:	32 2e       	mov	r3, r18
    108c:	19 c0       	rjmp	.+50     	; 0x10c0 <vfprintf+0xe6>
    108e:	36 fe       	sbrs	r3, 6
    1090:	06 c0       	rjmp	.+12     	; 0x109e <vfprintf+0xc4>
    1092:	8a e0       	ldi	r24, 0x0A	; 10
    1094:	98 9e       	mul	r9, r24
    1096:	20 0d       	add	r18, r0
    1098:	11 24       	eor	r1, r1
    109a:	92 2e       	mov	r9, r18
    109c:	11 c0       	rjmp	.+34     	; 0x10c0 <vfprintf+0xe6>
    109e:	ea e0       	ldi	r30, 0x0A	; 10
    10a0:	2e 9e       	mul	r2, r30
    10a2:	20 0d       	add	r18, r0
    10a4:	11 24       	eor	r1, r1
    10a6:	22 2e       	mov	r2, r18
    10a8:	f3 2d       	mov	r31, r3
    10aa:	f0 62       	ori	r31, 0x20	; 32
    10ac:	3f 2e       	mov	r3, r31
    10ae:	08 c0       	rjmp	.+16     	; 0x10c0 <vfprintf+0xe6>
    10b0:	8c 36       	cpi	r24, 0x6C	; 108
    10b2:	21 f4       	brne	.+8      	; 0x10bc <vfprintf+0xe2>
    10b4:	83 2d       	mov	r24, r3
    10b6:	80 68       	ori	r24, 0x80	; 128
    10b8:	38 2e       	mov	r3, r24
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <vfprintf+0xe6>
    10bc:	88 36       	cpi	r24, 0x68	; 104
    10be:	41 f4       	brne	.+16     	; 0x10d0 <vfprintf+0xf6>
    10c0:	f7 01       	movw	r30, r14
    10c2:	93 fd       	sbrc	r25, 3
    10c4:	85 91       	lpm	r24, Z+
    10c6:	93 ff       	sbrs	r25, 3
    10c8:	81 91       	ld	r24, Z+
    10ca:	7f 01       	movw	r14, r30
    10cc:	81 11       	cpse	r24, r1
    10ce:	b3 cf       	rjmp	.-154    	; 0x1036 <vfprintf+0x5c>
    10d0:	98 2f       	mov	r25, r24
    10d2:	9f 7d       	andi	r25, 0xDF	; 223
    10d4:	95 54       	subi	r25, 0x45	; 69
    10d6:	93 30       	cpi	r25, 0x03	; 3
    10d8:	28 f4       	brcc	.+10     	; 0x10e4 <vfprintf+0x10a>
    10da:	0c 5f       	subi	r16, 0xFC	; 252
    10dc:	1f 4f       	sbci	r17, 0xFF	; 255
    10de:	9f e3       	ldi	r25, 0x3F	; 63
    10e0:	99 83       	std	Y+1, r25	; 0x01
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <vfprintf+0x124>
    10e4:	83 36       	cpi	r24, 0x63	; 99
    10e6:	31 f0       	breq	.+12     	; 0x10f4 <vfprintf+0x11a>
    10e8:	83 37       	cpi	r24, 0x73	; 115
    10ea:	71 f0       	breq	.+28     	; 0x1108 <vfprintf+0x12e>
    10ec:	83 35       	cpi	r24, 0x53	; 83
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <vfprintf+0x118>
    10f0:	59 c0       	rjmp	.+178    	; 0x11a4 <vfprintf+0x1ca>
    10f2:	21 c0       	rjmp	.+66     	; 0x1136 <vfprintf+0x15c>
    10f4:	f8 01       	movw	r30, r16
    10f6:	80 81       	ld	r24, Z
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	0e 5f       	subi	r16, 0xFE	; 254
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	88 24       	eor	r8, r8
    1100:	83 94       	inc	r8
    1102:	91 2c       	mov	r9, r1
    1104:	53 01       	movw	r10, r6
    1106:	13 c0       	rjmp	.+38     	; 0x112e <vfprintf+0x154>
    1108:	28 01       	movw	r4, r16
    110a:	f2 e0       	ldi	r31, 0x02	; 2
    110c:	4f 0e       	add	r4, r31
    110e:	51 1c       	adc	r5, r1
    1110:	f8 01       	movw	r30, r16
    1112:	a0 80       	ld	r10, Z
    1114:	b1 80       	ldd	r11, Z+1	; 0x01
    1116:	36 fe       	sbrs	r3, 6
    1118:	03 c0       	rjmp	.+6      	; 0x1120 <vfprintf+0x146>
    111a:	69 2d       	mov	r22, r9
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <vfprintf+0x14a>
    1120:	6f ef       	ldi	r22, 0xFF	; 255
    1122:	7f ef       	ldi	r23, 0xFF	; 255
    1124:	c5 01       	movw	r24, r10
    1126:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <strnlen>
    112a:	4c 01       	movw	r8, r24
    112c:	82 01       	movw	r16, r4
    112e:	f3 2d       	mov	r31, r3
    1130:	ff 77       	andi	r31, 0x7F	; 127
    1132:	3f 2e       	mov	r3, r31
    1134:	16 c0       	rjmp	.+44     	; 0x1162 <vfprintf+0x188>
    1136:	28 01       	movw	r4, r16
    1138:	22 e0       	ldi	r18, 0x02	; 2
    113a:	42 0e       	add	r4, r18
    113c:	51 1c       	adc	r5, r1
    113e:	f8 01       	movw	r30, r16
    1140:	a0 80       	ld	r10, Z
    1142:	b1 80       	ldd	r11, Z+1	; 0x01
    1144:	36 fe       	sbrs	r3, 6
    1146:	03 c0       	rjmp	.+6      	; 0x114e <vfprintf+0x174>
    1148:	69 2d       	mov	r22, r9
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <vfprintf+0x178>
    114e:	6f ef       	ldi	r22, 0xFF	; 255
    1150:	7f ef       	ldi	r23, 0xFF	; 255
    1152:	c5 01       	movw	r24, r10
    1154:	0e 94 ce 09 	call	0x139c	; 0x139c <strnlen_P>
    1158:	4c 01       	movw	r8, r24
    115a:	f3 2d       	mov	r31, r3
    115c:	f0 68       	ori	r31, 0x80	; 128
    115e:	3f 2e       	mov	r3, r31
    1160:	82 01       	movw	r16, r4
    1162:	33 fc       	sbrc	r3, 3
    1164:	1b c0       	rjmp	.+54     	; 0x119c <vfprintf+0x1c2>
    1166:	82 2d       	mov	r24, r2
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	88 16       	cp	r8, r24
    116c:	99 06       	cpc	r9, r25
    116e:	b0 f4       	brcc	.+44     	; 0x119c <vfprintf+0x1c2>
    1170:	b6 01       	movw	r22, r12
    1172:	80 e2       	ldi	r24, 0x20	; 32
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    117a:	2a 94       	dec	r2
    117c:	f4 cf       	rjmp	.-24     	; 0x1166 <vfprintf+0x18c>
    117e:	f5 01       	movw	r30, r10
    1180:	37 fc       	sbrc	r3, 7
    1182:	85 91       	lpm	r24, Z+
    1184:	37 fe       	sbrs	r3, 7
    1186:	81 91       	ld	r24, Z+
    1188:	5f 01       	movw	r10, r30
    118a:	b6 01       	movw	r22, r12
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    1192:	21 10       	cpse	r2, r1
    1194:	2a 94       	dec	r2
    1196:	21 e0       	ldi	r18, 0x01	; 1
    1198:	82 1a       	sub	r8, r18
    119a:	91 08       	sbc	r9, r1
    119c:	81 14       	cp	r8, r1
    119e:	91 04       	cpc	r9, r1
    11a0:	71 f7       	brne	.-36     	; 0x117e <vfprintf+0x1a4>
    11a2:	e8 c0       	rjmp	.+464    	; 0x1374 <vfprintf+0x39a>
    11a4:	84 36       	cpi	r24, 0x64	; 100
    11a6:	11 f0       	breq	.+4      	; 0x11ac <vfprintf+0x1d2>
    11a8:	89 36       	cpi	r24, 0x69	; 105
    11aa:	41 f5       	brne	.+80     	; 0x11fc <vfprintf+0x222>
    11ac:	f8 01       	movw	r30, r16
    11ae:	37 fe       	sbrs	r3, 7
    11b0:	07 c0       	rjmp	.+14     	; 0x11c0 <vfprintf+0x1e6>
    11b2:	60 81       	ld	r22, Z
    11b4:	71 81       	ldd	r23, Z+1	; 0x01
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
    11b8:	93 81       	ldd	r25, Z+3	; 0x03
    11ba:	0c 5f       	subi	r16, 0xFC	; 252
    11bc:	1f 4f       	sbci	r17, 0xFF	; 255
    11be:	08 c0       	rjmp	.+16     	; 0x11d0 <vfprintf+0x1f6>
    11c0:	60 81       	ld	r22, Z
    11c2:	71 81       	ldd	r23, Z+1	; 0x01
    11c4:	07 2e       	mov	r0, r23
    11c6:	00 0c       	add	r0, r0
    11c8:	88 0b       	sbc	r24, r24
    11ca:	99 0b       	sbc	r25, r25
    11cc:	0e 5f       	subi	r16, 0xFE	; 254
    11ce:	1f 4f       	sbci	r17, 0xFF	; 255
    11d0:	f3 2d       	mov	r31, r3
    11d2:	ff 76       	andi	r31, 0x6F	; 111
    11d4:	3f 2e       	mov	r3, r31
    11d6:	97 ff       	sbrs	r25, 7
    11d8:	09 c0       	rjmp	.+18     	; 0x11ec <vfprintf+0x212>
    11da:	90 95       	com	r25
    11dc:	80 95       	com	r24
    11de:	70 95       	com	r23
    11e0:	61 95       	neg	r22
    11e2:	7f 4f       	sbci	r23, 0xFF	; 255
    11e4:	8f 4f       	sbci	r24, 0xFF	; 255
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	f0 68       	ori	r31, 0x80	; 128
    11ea:	3f 2e       	mov	r3, r31
    11ec:	2a e0       	ldi	r18, 0x0A	; 10
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	a3 01       	movw	r20, r6
    11f2:	0e 94 20 0a 	call	0x1440	; 0x1440 <__ultoa_invert>
    11f6:	88 2e       	mov	r8, r24
    11f8:	86 18       	sub	r8, r6
    11fa:	45 c0       	rjmp	.+138    	; 0x1286 <vfprintf+0x2ac>
    11fc:	85 37       	cpi	r24, 0x75	; 117
    11fe:	31 f4       	brne	.+12     	; 0x120c <vfprintf+0x232>
    1200:	23 2d       	mov	r18, r3
    1202:	2f 7e       	andi	r18, 0xEF	; 239
    1204:	b2 2e       	mov	r11, r18
    1206:	2a e0       	ldi	r18, 0x0A	; 10
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	25 c0       	rjmp	.+74     	; 0x1256 <vfprintf+0x27c>
    120c:	93 2d       	mov	r25, r3
    120e:	99 7f       	andi	r25, 0xF9	; 249
    1210:	b9 2e       	mov	r11, r25
    1212:	8f 36       	cpi	r24, 0x6F	; 111
    1214:	c1 f0       	breq	.+48     	; 0x1246 <vfprintf+0x26c>
    1216:	18 f4       	brcc	.+6      	; 0x121e <vfprintf+0x244>
    1218:	88 35       	cpi	r24, 0x58	; 88
    121a:	79 f0       	breq	.+30     	; 0x123a <vfprintf+0x260>
    121c:	b5 c0       	rjmp	.+362    	; 0x1388 <vfprintf+0x3ae>
    121e:	80 37       	cpi	r24, 0x70	; 112
    1220:	19 f0       	breq	.+6      	; 0x1228 <vfprintf+0x24e>
    1222:	88 37       	cpi	r24, 0x78	; 120
    1224:	21 f0       	breq	.+8      	; 0x122e <vfprintf+0x254>
    1226:	b0 c0       	rjmp	.+352    	; 0x1388 <vfprintf+0x3ae>
    1228:	e9 2f       	mov	r30, r25
    122a:	e0 61       	ori	r30, 0x10	; 16
    122c:	be 2e       	mov	r11, r30
    122e:	b4 fe       	sbrs	r11, 4
    1230:	0d c0       	rjmp	.+26     	; 0x124c <vfprintf+0x272>
    1232:	fb 2d       	mov	r31, r11
    1234:	f4 60       	ori	r31, 0x04	; 4
    1236:	bf 2e       	mov	r11, r31
    1238:	09 c0       	rjmp	.+18     	; 0x124c <vfprintf+0x272>
    123a:	34 fe       	sbrs	r3, 4
    123c:	0a c0       	rjmp	.+20     	; 0x1252 <vfprintf+0x278>
    123e:	29 2f       	mov	r18, r25
    1240:	26 60       	ori	r18, 0x06	; 6
    1242:	b2 2e       	mov	r11, r18
    1244:	06 c0       	rjmp	.+12     	; 0x1252 <vfprintf+0x278>
    1246:	28 e0       	ldi	r18, 0x08	; 8
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	05 c0       	rjmp	.+10     	; 0x1256 <vfprintf+0x27c>
    124c:	20 e1       	ldi	r18, 0x10	; 16
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <vfprintf+0x27c>
    1252:	20 e1       	ldi	r18, 0x10	; 16
    1254:	32 e0       	ldi	r19, 0x02	; 2
    1256:	f8 01       	movw	r30, r16
    1258:	b7 fe       	sbrs	r11, 7
    125a:	07 c0       	rjmp	.+14     	; 0x126a <vfprintf+0x290>
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	0c 5f       	subi	r16, 0xFC	; 252
    1266:	1f 4f       	sbci	r17, 0xFF	; 255
    1268:	06 c0       	rjmp	.+12     	; 0x1276 <vfprintf+0x29c>
    126a:	60 81       	ld	r22, Z
    126c:	71 81       	ldd	r23, Z+1	; 0x01
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	0e 5f       	subi	r16, 0xFE	; 254
    1274:	1f 4f       	sbci	r17, 0xFF	; 255
    1276:	a3 01       	movw	r20, r6
    1278:	0e 94 20 0a 	call	0x1440	; 0x1440 <__ultoa_invert>
    127c:	88 2e       	mov	r8, r24
    127e:	86 18       	sub	r8, r6
    1280:	fb 2d       	mov	r31, r11
    1282:	ff 77       	andi	r31, 0x7F	; 127
    1284:	3f 2e       	mov	r3, r31
    1286:	36 fe       	sbrs	r3, 6
    1288:	0d c0       	rjmp	.+26     	; 0x12a4 <vfprintf+0x2ca>
    128a:	23 2d       	mov	r18, r3
    128c:	2e 7f       	andi	r18, 0xFE	; 254
    128e:	a2 2e       	mov	r10, r18
    1290:	89 14       	cp	r8, r9
    1292:	58 f4       	brcc	.+22     	; 0x12aa <vfprintf+0x2d0>
    1294:	34 fe       	sbrs	r3, 4
    1296:	0b c0       	rjmp	.+22     	; 0x12ae <vfprintf+0x2d4>
    1298:	32 fc       	sbrc	r3, 2
    129a:	09 c0       	rjmp	.+18     	; 0x12ae <vfprintf+0x2d4>
    129c:	83 2d       	mov	r24, r3
    129e:	8e 7e       	andi	r24, 0xEE	; 238
    12a0:	a8 2e       	mov	r10, r24
    12a2:	05 c0       	rjmp	.+10     	; 0x12ae <vfprintf+0x2d4>
    12a4:	b8 2c       	mov	r11, r8
    12a6:	a3 2c       	mov	r10, r3
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <vfprintf+0x2d6>
    12aa:	b8 2c       	mov	r11, r8
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <vfprintf+0x2d6>
    12ae:	b9 2c       	mov	r11, r9
    12b0:	a4 fe       	sbrs	r10, 4
    12b2:	0f c0       	rjmp	.+30     	; 0x12d2 <vfprintf+0x2f8>
    12b4:	fe 01       	movw	r30, r28
    12b6:	e8 0d       	add	r30, r8
    12b8:	f1 1d       	adc	r31, r1
    12ba:	80 81       	ld	r24, Z
    12bc:	80 33       	cpi	r24, 0x30	; 48
    12be:	21 f4       	brne	.+8      	; 0x12c8 <vfprintf+0x2ee>
    12c0:	9a 2d       	mov	r25, r10
    12c2:	99 7e       	andi	r25, 0xE9	; 233
    12c4:	a9 2e       	mov	r10, r25
    12c6:	09 c0       	rjmp	.+18     	; 0x12da <vfprintf+0x300>
    12c8:	a2 fe       	sbrs	r10, 2
    12ca:	06 c0       	rjmp	.+12     	; 0x12d8 <vfprintf+0x2fe>
    12cc:	b3 94       	inc	r11
    12ce:	b3 94       	inc	r11
    12d0:	04 c0       	rjmp	.+8      	; 0x12da <vfprintf+0x300>
    12d2:	8a 2d       	mov	r24, r10
    12d4:	86 78       	andi	r24, 0x86	; 134
    12d6:	09 f0       	breq	.+2      	; 0x12da <vfprintf+0x300>
    12d8:	b3 94       	inc	r11
    12da:	a3 fc       	sbrc	r10, 3
    12dc:	11 c0       	rjmp	.+34     	; 0x1300 <vfprintf+0x326>
    12de:	a0 fe       	sbrs	r10, 0
    12e0:	06 c0       	rjmp	.+12     	; 0x12ee <vfprintf+0x314>
    12e2:	b2 14       	cp	r11, r2
    12e4:	88 f4       	brcc	.+34     	; 0x1308 <vfprintf+0x32e>
    12e6:	28 0c       	add	r2, r8
    12e8:	92 2c       	mov	r9, r2
    12ea:	9b 18       	sub	r9, r11
    12ec:	0e c0       	rjmp	.+28     	; 0x130a <vfprintf+0x330>
    12ee:	b2 14       	cp	r11, r2
    12f0:	60 f4       	brcc	.+24     	; 0x130a <vfprintf+0x330>
    12f2:	b6 01       	movw	r22, r12
    12f4:	80 e2       	ldi	r24, 0x20	; 32
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    12fc:	b3 94       	inc	r11
    12fe:	f7 cf       	rjmp	.-18     	; 0x12ee <vfprintf+0x314>
    1300:	b2 14       	cp	r11, r2
    1302:	18 f4       	brcc	.+6      	; 0x130a <vfprintf+0x330>
    1304:	2b 18       	sub	r2, r11
    1306:	02 c0       	rjmp	.+4      	; 0x130c <vfprintf+0x332>
    1308:	98 2c       	mov	r9, r8
    130a:	21 2c       	mov	r2, r1
    130c:	a4 fe       	sbrs	r10, 4
    130e:	10 c0       	rjmp	.+32     	; 0x1330 <vfprintf+0x356>
    1310:	b6 01       	movw	r22, r12
    1312:	80 e3       	ldi	r24, 0x30	; 48
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    131a:	a2 fe       	sbrs	r10, 2
    131c:	17 c0       	rjmp	.+46     	; 0x134c <vfprintf+0x372>
    131e:	a1 fc       	sbrc	r10, 1
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <vfprintf+0x34e>
    1322:	88 e7       	ldi	r24, 0x78	; 120
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 c0       	rjmp	.+4      	; 0x132c <vfprintf+0x352>
    1328:	88 e5       	ldi	r24, 0x58	; 88
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	b6 01       	movw	r22, r12
    132e:	0c c0       	rjmp	.+24     	; 0x1348 <vfprintf+0x36e>
    1330:	8a 2d       	mov	r24, r10
    1332:	86 78       	andi	r24, 0x86	; 134
    1334:	59 f0       	breq	.+22     	; 0x134c <vfprintf+0x372>
    1336:	a1 fe       	sbrs	r10, 1
    1338:	02 c0       	rjmp	.+4      	; 0x133e <vfprintf+0x364>
    133a:	8b e2       	ldi	r24, 0x2B	; 43
    133c:	01 c0       	rjmp	.+2      	; 0x1340 <vfprintf+0x366>
    133e:	80 e2       	ldi	r24, 0x20	; 32
    1340:	a7 fc       	sbrc	r10, 7
    1342:	8d e2       	ldi	r24, 0x2D	; 45
    1344:	b6 01       	movw	r22, r12
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    134c:	89 14       	cp	r8, r9
    134e:	38 f4       	brcc	.+14     	; 0x135e <vfprintf+0x384>
    1350:	b6 01       	movw	r22, r12
    1352:	80 e3       	ldi	r24, 0x30	; 48
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    135a:	9a 94       	dec	r9
    135c:	f7 cf       	rjmp	.-18     	; 0x134c <vfprintf+0x372>
    135e:	8a 94       	dec	r8
    1360:	f3 01       	movw	r30, r6
    1362:	e8 0d       	add	r30, r8
    1364:	f1 1d       	adc	r31, r1
    1366:	80 81       	ld	r24, Z
    1368:	b6 01       	movw	r22, r12
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    1370:	81 10       	cpse	r8, r1
    1372:	f5 cf       	rjmp	.-22     	; 0x135e <vfprintf+0x384>
    1374:	22 20       	and	r2, r2
    1376:	09 f4       	brne	.+2      	; 0x137a <vfprintf+0x3a0>
    1378:	42 ce       	rjmp	.-892    	; 0xffe <vfprintf+0x24>
    137a:	b6 01       	movw	r22, r12
    137c:	80 e2       	ldi	r24, 0x20	; 32
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    1384:	2a 94       	dec	r2
    1386:	f6 cf       	rjmp	.-20     	; 0x1374 <vfprintf+0x39a>
    1388:	f6 01       	movw	r30, r12
    138a:	86 81       	ldd	r24, Z+6	; 0x06
    138c:	97 81       	ldd	r25, Z+7	; 0x07
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <vfprintf+0x3ba>
    1390:	8f ef       	ldi	r24, 0xFF	; 255
    1392:	9f ef       	ldi	r25, 0xFF	; 255
    1394:	2b 96       	adiw	r28, 0x0b	; 11
    1396:	e2 e1       	ldi	r30, 0x12	; 18
    1398:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__epilogue_restores__>

0000139c <strnlen_P>:
    139c:	fc 01       	movw	r30, r24
    139e:	05 90       	lpm	r0, Z+
    13a0:	61 50       	subi	r22, 0x01	; 1
    13a2:	70 40       	sbci	r23, 0x00	; 0
    13a4:	01 10       	cpse	r0, r1
    13a6:	d8 f7       	brcc	.-10     	; 0x139e <strnlen_P+0x2>
    13a8:	80 95       	com	r24
    13aa:	90 95       	com	r25
    13ac:	8e 0f       	add	r24, r30
    13ae:	9f 1f       	adc	r25, r31
    13b0:	08 95       	ret

000013b2 <strnlen>:
    13b2:	fc 01       	movw	r30, r24
    13b4:	61 50       	subi	r22, 0x01	; 1
    13b6:	70 40       	sbci	r23, 0x00	; 0
    13b8:	01 90       	ld	r0, Z+
    13ba:	01 10       	cpse	r0, r1
    13bc:	d8 f7       	brcc	.-10     	; 0x13b4 <strnlen+0x2>
    13be:	80 95       	com	r24
    13c0:	90 95       	com	r25
    13c2:	8e 0f       	add	r24, r30
    13c4:	9f 1f       	adc	r25, r31
    13c6:	08 95       	ret

000013c8 <fputc>:
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	fb 01       	movw	r30, r22
    13d2:	23 81       	ldd	r18, Z+3	; 0x03
    13d4:	21 fd       	sbrc	r18, 1
    13d6:	03 c0       	rjmp	.+6      	; 0x13de <fputc+0x16>
    13d8:	8f ef       	ldi	r24, 0xFF	; 255
    13da:	9f ef       	ldi	r25, 0xFF	; 255
    13dc:	2c c0       	rjmp	.+88     	; 0x1436 <fputc+0x6e>
    13de:	22 ff       	sbrs	r18, 2
    13e0:	16 c0       	rjmp	.+44     	; 0x140e <fputc+0x46>
    13e2:	46 81       	ldd	r20, Z+6	; 0x06
    13e4:	57 81       	ldd	r21, Z+7	; 0x07
    13e6:	24 81       	ldd	r18, Z+4	; 0x04
    13e8:	35 81       	ldd	r19, Z+5	; 0x05
    13ea:	42 17       	cp	r20, r18
    13ec:	53 07       	cpc	r21, r19
    13ee:	44 f4       	brge	.+16     	; 0x1400 <fputc+0x38>
    13f0:	a0 81       	ld	r26, Z
    13f2:	b1 81       	ldd	r27, Z+1	; 0x01
    13f4:	9d 01       	movw	r18, r26
    13f6:	2f 5f       	subi	r18, 0xFF	; 255
    13f8:	3f 4f       	sbci	r19, 0xFF	; 255
    13fa:	31 83       	std	Z+1, r19	; 0x01
    13fc:	20 83       	st	Z, r18
    13fe:	8c 93       	st	X, r24
    1400:	26 81       	ldd	r18, Z+6	; 0x06
    1402:	37 81       	ldd	r19, Z+7	; 0x07
    1404:	2f 5f       	subi	r18, 0xFF	; 255
    1406:	3f 4f       	sbci	r19, 0xFF	; 255
    1408:	37 83       	std	Z+7, r19	; 0x07
    140a:	26 83       	std	Z+6, r18	; 0x06
    140c:	14 c0       	rjmp	.+40     	; 0x1436 <fputc+0x6e>
    140e:	8b 01       	movw	r16, r22
    1410:	ec 01       	movw	r28, r24
    1412:	fb 01       	movw	r30, r22
    1414:	00 84       	ldd	r0, Z+8	; 0x08
    1416:	f1 85       	ldd	r31, Z+9	; 0x09
    1418:	e0 2d       	mov	r30, r0
    141a:	09 95       	icall
    141c:	89 2b       	or	r24, r25
    141e:	e1 f6       	brne	.-72     	; 0x13d8 <fputc+0x10>
    1420:	d8 01       	movw	r26, r16
    1422:	16 96       	adiw	r26, 0x06	; 6
    1424:	8d 91       	ld	r24, X+
    1426:	9c 91       	ld	r25, X
    1428:	17 97       	sbiw	r26, 0x07	; 7
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	17 96       	adiw	r26, 0x07	; 7
    142e:	9c 93       	st	X, r25
    1430:	8e 93       	st	-X, r24
    1432:	16 97       	sbiw	r26, 0x06	; 6
    1434:	ce 01       	movw	r24, r28
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	08 95       	ret

00001440 <__ultoa_invert>:
    1440:	fa 01       	movw	r30, r20
    1442:	aa 27       	eor	r26, r26
    1444:	28 30       	cpi	r18, 0x08	; 8
    1446:	51 f1       	breq	.+84     	; 0x149c <__ultoa_invert+0x5c>
    1448:	20 31       	cpi	r18, 0x10	; 16
    144a:	81 f1       	breq	.+96     	; 0x14ac <__ultoa_invert+0x6c>
    144c:	e8 94       	clt
    144e:	6f 93       	push	r22
    1450:	6e 7f       	andi	r22, 0xFE	; 254
    1452:	6e 5f       	subi	r22, 0xFE	; 254
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	8f 4f       	sbci	r24, 0xFF	; 255
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	af 4f       	sbci	r26, 0xFF	; 255
    145c:	b1 e0       	ldi	r27, 0x01	; 1
    145e:	3e d0       	rcall	.+124    	; 0x14dc <__ultoa_invert+0x9c>
    1460:	b4 e0       	ldi	r27, 0x04	; 4
    1462:	3c d0       	rcall	.+120    	; 0x14dc <__ultoa_invert+0x9c>
    1464:	67 0f       	add	r22, r23
    1466:	78 1f       	adc	r23, r24
    1468:	89 1f       	adc	r24, r25
    146a:	9a 1f       	adc	r25, r26
    146c:	a1 1d       	adc	r26, r1
    146e:	68 0f       	add	r22, r24
    1470:	79 1f       	adc	r23, r25
    1472:	8a 1f       	adc	r24, r26
    1474:	91 1d       	adc	r25, r1
    1476:	a1 1d       	adc	r26, r1
    1478:	6a 0f       	add	r22, r26
    147a:	71 1d       	adc	r23, r1
    147c:	81 1d       	adc	r24, r1
    147e:	91 1d       	adc	r25, r1
    1480:	a1 1d       	adc	r26, r1
    1482:	20 d0       	rcall	.+64     	; 0x14c4 <__ultoa_invert+0x84>
    1484:	09 f4       	brne	.+2      	; 0x1488 <__ultoa_invert+0x48>
    1486:	68 94       	set
    1488:	3f 91       	pop	r19
    148a:	2a e0       	ldi	r18, 0x0A	; 10
    148c:	26 9f       	mul	r18, r22
    148e:	11 24       	eor	r1, r1
    1490:	30 19       	sub	r19, r0
    1492:	30 5d       	subi	r19, 0xD0	; 208
    1494:	31 93       	st	Z+, r19
    1496:	de f6       	brtc	.-74     	; 0x144e <__ultoa_invert+0xe>
    1498:	cf 01       	movw	r24, r30
    149a:	08 95       	ret
    149c:	46 2f       	mov	r20, r22
    149e:	47 70       	andi	r20, 0x07	; 7
    14a0:	40 5d       	subi	r20, 0xD0	; 208
    14a2:	41 93       	st	Z+, r20
    14a4:	b3 e0       	ldi	r27, 0x03	; 3
    14a6:	0f d0       	rcall	.+30     	; 0x14c6 <__ultoa_invert+0x86>
    14a8:	c9 f7       	brne	.-14     	; 0x149c <__ultoa_invert+0x5c>
    14aa:	f6 cf       	rjmp	.-20     	; 0x1498 <__ultoa_invert+0x58>
    14ac:	46 2f       	mov	r20, r22
    14ae:	4f 70       	andi	r20, 0x0F	; 15
    14b0:	40 5d       	subi	r20, 0xD0	; 208
    14b2:	4a 33       	cpi	r20, 0x3A	; 58
    14b4:	18 f0       	brcs	.+6      	; 0x14bc <__ultoa_invert+0x7c>
    14b6:	49 5d       	subi	r20, 0xD9	; 217
    14b8:	31 fd       	sbrc	r19, 1
    14ba:	40 52       	subi	r20, 0x20	; 32
    14bc:	41 93       	st	Z+, r20
    14be:	02 d0       	rcall	.+4      	; 0x14c4 <__ultoa_invert+0x84>
    14c0:	a9 f7       	brne	.-22     	; 0x14ac <__ultoa_invert+0x6c>
    14c2:	ea cf       	rjmp	.-44     	; 0x1498 <__ultoa_invert+0x58>
    14c4:	b4 e0       	ldi	r27, 0x04	; 4
    14c6:	a6 95       	lsr	r26
    14c8:	97 95       	ror	r25
    14ca:	87 95       	ror	r24
    14cc:	77 95       	ror	r23
    14ce:	67 95       	ror	r22
    14d0:	ba 95       	dec	r27
    14d2:	c9 f7       	brne	.-14     	; 0x14c6 <__ultoa_invert+0x86>
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	61 05       	cpc	r22, r1
    14d8:	71 05       	cpc	r23, r1
    14da:	08 95       	ret
    14dc:	9b 01       	movw	r18, r22
    14de:	ac 01       	movw	r20, r24
    14e0:	0a 2e       	mov	r0, r26
    14e2:	06 94       	lsr	r0
    14e4:	57 95       	ror	r21
    14e6:	47 95       	ror	r20
    14e8:	37 95       	ror	r19
    14ea:	27 95       	ror	r18
    14ec:	ba 95       	dec	r27
    14ee:	c9 f7       	brne	.-14     	; 0x14e2 <__ultoa_invert+0xa2>
    14f0:	62 0f       	add	r22, r18
    14f2:	73 1f       	adc	r23, r19
    14f4:	84 1f       	adc	r24, r20
    14f6:	95 1f       	adc	r25, r21
    14f8:	a0 1d       	adc	r26, r0
    14fa:	08 95       	ret

000014fc <__prologue_saves__>:
    14fc:	2f 92       	push	r2
    14fe:	3f 92       	push	r3
    1500:	4f 92       	push	r4
    1502:	5f 92       	push	r5
    1504:	6f 92       	push	r6
    1506:	7f 92       	push	r7
    1508:	8f 92       	push	r8
    150a:	9f 92       	push	r9
    150c:	af 92       	push	r10
    150e:	bf 92       	push	r11
    1510:	cf 92       	push	r12
    1512:	df 92       	push	r13
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	ca 1b       	sub	r28, r26
    1526:	db 0b       	sbc	r29, r27
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	09 94       	ijmp

00001534 <__epilogue_restores__>:
    1534:	2a 88       	ldd	r2, Y+18	; 0x12
    1536:	39 88       	ldd	r3, Y+17	; 0x11
    1538:	48 88       	ldd	r4, Y+16	; 0x10
    153a:	5f 84       	ldd	r5, Y+15	; 0x0f
    153c:	6e 84       	ldd	r6, Y+14	; 0x0e
    153e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1540:	8c 84       	ldd	r8, Y+12	; 0x0c
    1542:	9b 84       	ldd	r9, Y+11	; 0x0b
    1544:	aa 84       	ldd	r10, Y+10	; 0x0a
    1546:	b9 84       	ldd	r11, Y+9	; 0x09
    1548:	c8 84       	ldd	r12, Y+8	; 0x08
    154a:	df 80       	ldd	r13, Y+7	; 0x07
    154c:	ee 80       	ldd	r14, Y+6	; 0x06
    154e:	fd 80       	ldd	r15, Y+5	; 0x05
    1550:	0c 81       	ldd	r16, Y+4	; 0x04
    1552:	1b 81       	ldd	r17, Y+3	; 0x03
    1554:	aa 81       	ldd	r26, Y+2	; 0x02
    1556:	b9 81       	ldd	r27, Y+1	; 0x01
    1558:	ce 0f       	add	r28, r30
    155a:	d1 1d       	adc	r29, r1
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	ed 01       	movw	r28, r26
    1568:	08 95       	ret

0000156a <_exit>:
    156a:	f8 94       	cli

0000156c <__stop_program>:
    156c:	ff cf       	rjmp	.-2      	; 0x156c <__stop_program>
