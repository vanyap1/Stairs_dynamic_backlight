
backlight_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000112  00800100  000015ee  00001682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  00800212  00800212  00001794  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025b0  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000120d  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000136b  00000000  00000000  00005225  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a0  00000000  00000000  00006590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000adb  00000000  00000000  00006b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001662  00000000  00000000  0000760b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00008c6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__vector_1>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__vector_18>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__vector_20>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_21>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 c4 03 	jmp	0x788	; 0x788 <__vector_40>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	12 e0       	ldi	r17, 0x02	; 2
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ee ee       	ldi	r30, 0xEE	; 238
      c8:	f5 e1       	ldi	r31, 0x15	; 21
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a2 31       	cpi	r26, 0x12	; 18
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	22 e0       	ldi	r18, 0x02	; 2
      d8:	a2 e1       	ldi	r26, 0x12	; 18
      da:	b2 e0       	ldi	r27, 0x02	; 2
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	ab 3a       	cpi	r26, 0xAB	; 171
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 06 06 	call	0xc0c	; 0xc0c <main>
      ea:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_21>:

uint16_t get_adc(uint8_t source){
	adc_pin_select(source);
	//uint16_t adc_tmp_data = adc_convert();
	return adc_convert();
}
      f2:	1f 92       	push	r1
      f4:	0f 92       	push	r0
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	0f 92       	push	r0
      fa:	11 24       	eor	r1, r1
      fc:	8f 93       	push	r24
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     104:	8f 91       	pop	r24
     106:	0f 90       	pop	r0
     108:	0f be       	out	0x3f, r0	; 63
     10a:	0f 90       	pop	r0
     10c:	1f 90       	pop	r1
     10e:	18 95       	reti

00000110 <adc_init>:
     110:	ec e7       	ldi	r30, 0x7C	; 124
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	80 6c       	ori	r24, 0xC0	; 192
     118:	80 83       	st	Z, r24
     11a:	ea e7       	ldi	r30, 0x7A	; 122
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	8f 68       	ori	r24, 0x8F	; 143
     122:	80 83       	st	Z, r24
     124:	08 95       	ret

00000126 <adc_pin_select>:
     126:	ec e7       	ldi	r30, 0x7C	; 124
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	90 81       	ld	r25, Z
     12c:	90 7f       	andi	r25, 0xF0	; 240
     12e:	90 83       	st	Z, r25
     130:	90 81       	ld	r25, Z
     132:	89 2b       	or	r24, r25
     134:	80 83       	st	Z, r24
     136:	08 95       	ret

00000138 <adc_convert>:
     138:	ea e7       	ldi	r30, 0x7A	; 122
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	80 68       	ori	r24, 0x80	; 128
     140:	80 83       	st	Z, r24
     142:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
     14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     150:	88 23       	and	r24, r24
     152:	e1 f3       	breq	.-8      	; 0x14c <adc_convert+0x14>
     154:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     158:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     15c:	ea e7       	ldi	r30, 0x7A	; 122
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	90 81       	ld	r25, Z
     162:	9f 77       	andi	r25, 0x7F	; 127
     164:	90 83       	st	Z, r25
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	98 2f       	mov	r25, r24
     16a:	88 27       	eor	r24, r24
     16c:	82 2b       	or	r24, r18
     16e:	08 95       	ret

00000170 <get_mVolt>:

uint16_t get_mVolt(uint8_t source){
	adc_pin_select(source);
     170:	0e 94 93 00 	call	0x126	; 0x126 <adc_pin_select>
	//uint16_t adc_tmp_data = adc_convert();
	return ADC_VOLT(adc_convert());
     174:	0e 94 9c 00 	call	0x138	; 0x138 <adc_convert>
     178:	bc 01       	movw	r22, r24
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__floatunsisf>
     182:	2d ec       	ldi	r18, 0xCD	; 205
     184:	3e e1       	ldi	r19, 0x1E	; 30
     186:	48 e9       	ldi	r20, 0x98	; 152
     188:	5f e3       	ldi	r21, 0x3F	; 63
     18a:	0e 94 3a 07 	call	0xe74	; 0xe74 <__mulsf3>
     18e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__fixunssfsi>
}
     192:	cb 01       	movw	r24, r22
     194:	08 95       	ret

00000196 <set_pin_level>:

}


void set_port_level(gpio *GPIOx, const uint8_t mask){
	*GPIOx->port=mask;
     196:	66 23       	and	r22, r22
     198:	99 f0       	breq	.+38     	; 0x1c0 <set_pin_level+0x2a>
     19a:	dc 01       	movw	r26, r24
     19c:	ed 91       	ld	r30, X+
     19e:	fc 91       	ld	r31, X
     1a0:	11 97       	sbiw	r26, 0x01	; 1
     1a2:	21 e0       	ldi	r18, 0x01	; 1
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	a9 01       	movw	r20, r18
     1a8:	12 96       	adiw	r26, 0x02	; 2
     1aa:	0c 90       	ld	r0, X
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <set_pin_level+0x1c>
     1ae:	44 0f       	add	r20, r20
     1b0:	55 1f       	adc	r21, r21
     1b2:	0a 94       	dec	r0
     1b4:	e2 f7       	brpl	.-8      	; 0x1ae <set_pin_level+0x18>
     1b6:	ca 01       	movw	r24, r20
     1b8:	90 81       	ld	r25, Z
     1ba:	89 2b       	or	r24, r25
     1bc:	80 83       	st	Z, r24
     1be:	08 95       	ret
     1c0:	dc 01       	movw	r26, r24
     1c2:	ed 91       	ld	r30, X+
     1c4:	fc 91       	ld	r31, X
     1c6:	11 97       	sbiw	r26, 0x01	; 1
     1c8:	21 e0       	ldi	r18, 0x01	; 1
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	a9 01       	movw	r20, r18
     1ce:	12 96       	adiw	r26, 0x02	; 2
     1d0:	0c 90       	ld	r0, X
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <set_pin_level+0x42>
     1d4:	44 0f       	add	r20, r20
     1d6:	55 1f       	adc	r21, r21
     1d8:	0a 94       	dec	r0
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <set_pin_level+0x3e>
     1dc:	ca 01       	movw	r24, r20
     1de:	80 95       	com	r24
     1e0:	90 81       	ld	r25, Z
     1e2:	89 23       	and	r24, r25
     1e4:	80 83       	st	Z, r24
     1e6:	08 95       	ret

000001e8 <set_pin_dir>:
     1e8:	fc 01       	movw	r30, r24
     1ea:	30 81       	ld	r19, Z
     1ec:	21 81       	ldd	r18, Z+1	; 0x01
     1ee:	61 30       	cpi	r22, 0x01	; 1
     1f0:	99 f0       	breq	.+38     	; 0x218 <set_pin_dir+0x30>
     1f2:	18 f0       	brcs	.+6      	; 0x1fa <set_pin_dir+0x12>
     1f4:	62 30       	cpi	r22, 0x02	; 2
     1f6:	f1 f0       	breq	.+60     	; 0x234 <set_pin_dir+0x4c>
     1f8:	08 95       	ret
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	02 80       	ldd	r0, Z+2	; 0x02
     200:	02 c0       	rjmp	.+4      	; 0x206 <set_pin_dir+0x1e>
     202:	88 0f       	add	r24, r24
     204:	99 1f       	adc	r25, r25
     206:	0a 94       	dec	r0
     208:	e2 f7       	brpl	.-8      	; 0x202 <set_pin_dir+0x1a>
     20a:	e3 2f       	mov	r30, r19
     20c:	f2 2f       	mov	r31, r18
     20e:	80 95       	com	r24
     210:	92 91       	ld	r25, -Z
     212:	89 23       	and	r24, r25
     214:	80 83       	st	Z, r24
     216:	08 95       	ret
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 80       	ldd	r0, Z+2	; 0x02
     21e:	02 c0       	rjmp	.+4      	; 0x224 <set_pin_dir+0x3c>
     220:	88 0f       	add	r24, r24
     222:	99 1f       	adc	r25, r25
     224:	0a 94       	dec	r0
     226:	e2 f7       	brpl	.-8      	; 0x220 <set_pin_dir+0x38>
     228:	e3 2f       	mov	r30, r19
     22a:	f2 2f       	mov	r31, r18
     22c:	92 91       	ld	r25, -Z
     22e:	89 2b       	or	r24, r25
     230:	80 83       	st	Z, r24
     232:	08 95       	ret
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	ac 01       	movw	r20, r24
     23a:	02 80       	ldd	r0, Z+2	; 0x02
     23c:	02 c0       	rjmp	.+4      	; 0x242 <set_pin_dir+0x5a>
     23e:	44 0f       	add	r20, r20
     240:	55 1f       	adc	r21, r21
     242:	0a 94       	dec	r0
     244:	e2 f7       	brpl	.-8      	; 0x23e <set_pin_dir+0x56>
     246:	a3 2f       	mov	r26, r19
     248:	b2 2f       	mov	r27, r18
     24a:	40 95       	com	r20
     24c:	2e 91       	ld	r18, -X
     24e:	42 23       	and	r20, r18
     250:	4c 93       	st	X, r20
     252:	a0 81       	ld	r26, Z
     254:	b1 81       	ldd	r27, Z+1	; 0x01
     256:	02 80       	ldd	r0, Z+2	; 0x02
     258:	02 c0       	rjmp	.+4      	; 0x25e <set_pin_dir+0x76>
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	0a 94       	dec	r0
     260:	e2 f7       	brpl	.-8      	; 0x25a <set_pin_dir+0x72>
     262:	80 95       	com	r24
     264:	9c 91       	ld	r25, X
     266:	89 23       	and	r24, r25
     268:	8c 93       	st	X, r24
     26a:	08 95       	ret

0000026c <toggle_pin_level>:
}

void toggle_pin_level(gpio *GPIOx)
{
	uint8_t *tmp_port = GPIOx->port-2;
     26c:	dc 01       	movw	r26, r24
     26e:	ed 91       	ld	r30, X+
     270:	fc 91       	ld	r31, X
     272:	11 97       	sbiw	r26, 0x01	; 1
	*tmp_port = 1 << GPIOx->pin;
     274:	21 e0       	ldi	r18, 0x01	; 1
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	a9 01       	movw	r20, r18
     27a:	12 96       	adiw	r26, 0x02	; 2
     27c:	0c 90       	ld	r0, X
     27e:	02 c0       	rjmp	.+4      	; 0x284 <toggle_pin_level+0x18>
     280:	44 0f       	add	r20, r20
     282:	55 1f       	adc	r21, r21
     284:	0a 94       	dec	r0
     286:	e2 f7       	brpl	.-8      	; 0x280 <toggle_pin_level+0x14>
     288:	32 97       	sbiw	r30, 0x02	; 2
     28a:	40 83       	st	Z, r20
     28c:	08 95       	ret

0000028e <rtc_int_enable>:
};



void rtc_int_enable(rtc_date *RTCx , const uint16_t int_time){
	rtc_config_3[0] |= (1 << TIE);
     28e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     292:	80 61       	ori	r24, 0x10	; 16
     294:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
	rtc_config_2[0] |= (1 << TD) | (1 << TE);
     298:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <rtc_config_2>
     29c:	81 61       	ori	r24, 0x11	; 17
     29e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <rtc_config_2>
	
	twi_write(RTC_ADDR,TIMER_COUNTER0_REG,rtc_config_1,sizeof(rtc_config_1));
     2a2:	22 e0       	ldi	r18, 0x02	; 2
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	41 e0       	ldi	r20, 0x01	; 1
     2a8:	51 e0       	ldi	r21, 0x01	; 1
     2aa:	6b e0       	ldi	r22, 0x0B	; 11
     2ac:	82 e3       	ldi	r24, 0x32	; 50
     2ae:	0e 94 50 04 	call	0x8a0	; 0x8a0 <twi_write>
	twi_write(RTC_ADDR,EXT_REG,rtc_config_2,sizeof(rtc_config_2));
     2b2:	21 e0       	ldi	r18, 0x01	; 1
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	43 e1       	ldi	r20, 0x13	; 19
     2b8:	52 e0       	ldi	r21, 0x02	; 2
     2ba:	6d e0       	ldi	r22, 0x0D	; 13
     2bc:	82 e3       	ldi	r24, 0x32	; 50
     2be:	0e 94 50 04 	call	0x8a0	; 0x8a0 <twi_write>
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
     2c2:	21 e0       	ldi	r18, 0x01	; 1
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	42 e1       	ldi	r20, 0x12	; 18
     2c8:	52 e0       	ldi	r21, 0x02	; 2
     2ca:	6f e0       	ldi	r22, 0x0F	; 15
     2cc:	82 e3       	ldi	r24, 0x32	; 50
     2ce:	0e 94 50 04 	call	0x8a0	; 0x8a0 <twi_write>
     2d2:	08 95       	ret

000002d4 <BCDtoDEC>:
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
}

uint8_t BCDtoDEC(uint8_t val)
{
	return ((val / 0x10) * 10) + (val % 0x10);
     2d4:	98 2f       	mov	r25, r24
     2d6:	92 95       	swap	r25
     2d8:	9f 70       	andi	r25, 0x0F	; 15
     2da:	99 0f       	add	r25, r25
     2dc:	29 2f       	mov	r18, r25
     2de:	22 0f       	add	r18, r18
     2e0:	22 0f       	add	r18, r18
     2e2:	92 0f       	add	r25, r18
     2e4:	8f 70       	andi	r24, 0x0F	; 15
}
     2e6:	89 0f       	add	r24, r25
     2e8:	08 95       	ret

000002ea <rtc_sync>:
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
	
	
}

void rtc_sync(rtc_date *RTCx){
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	27 97       	sbiw	r28, 0x07	; 7
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	cd bf       	out	0x3d, r28	; 61
     302:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	twi_read(RTC_ADDR, 0x00, rtc_raw, sizeof(rtc_raw));
     304:	27 e0       	ldi	r18, 0x07	; 7
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	ae 01       	movw	r20, r28
     30a:	4f 5f       	subi	r20, 0xFF	; 255
     30c:	5f 4f       	sbci	r21, 0xFF	; 255
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	82 e3       	ldi	r24, 0x32	; 50
     312:	0e 94 d5 03 	call	0x7aa	; 0x7aa <twi_read>
	RTCx->second=BCDtoDEC(rtc_raw[0]);
     316:	89 81       	ldd	r24, Y+1	; 0x01
     318:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     31c:	f8 01       	movw	r30, r16
     31e:	80 83       	st	Z, r24
	RTCx->minute=BCDtoDEC(rtc_raw[1]);
     320:	8a 81       	ldd	r24, Y+2	; 0x02
     322:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     326:	f8 01       	movw	r30, r16
     328:	81 83       	std	Z+1, r24	; 0x01
	RTCx->hour=BCDtoDEC(rtc_raw[2]);
     32a:	8b 81       	ldd	r24, Y+3	; 0x03
     32c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     330:	f8 01       	movw	r30, r16
     332:	82 83       	std	Z+2, r24	; 0x02
	RTCx->dayofweek=rtc_raw[3];
     334:	8c 81       	ldd	r24, Y+4	; 0x04
     336:	87 83       	std	Z+7, r24	; 0x07
	RTCx->date=BCDtoDEC(rtc_raw[4]);
     338:	8d 81       	ldd	r24, Y+5	; 0x05
     33a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     33e:	f8 01       	movw	r30, r16
     340:	83 83       	std	Z+3, r24	; 0x03
	RTCx->month=BCDtoDEC(rtc_raw[5]);
     342:	8e 81       	ldd	r24, Y+6	; 0x06
     344:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     348:	f8 01       	movw	r30, r16
     34a:	84 83       	std	Z+4, r24	; 0x04
	RTCx->year=BCDtoDEC(rtc_raw[6]);
     34c:	8f 81       	ldd	r24, Y+7	; 0x07
     34e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	f8 01       	movw	r30, r16
     356:	96 83       	std	Z+6, r25	; 0x06
     358:	85 83       	std	Z+5, r24	; 0x05
}
     35a:	27 96       	adiw	r28, 0x07	; 7
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	08 95       	ret

00000370 <DECtoBCD>:
}

// BCDtoDEC -- convert decimal to binary-coded decimal (BCD)
uint8_t DECtoBCD(uint8_t val)
{
	return ((val / 10) * 0x10) + (val % 10);
     370:	9d ec       	ldi	r25, 0xCD	; 205
     372:	89 9f       	mul	r24, r25
     374:	91 2d       	mov	r25, r1
     376:	11 24       	eor	r1, r1
     378:	96 95       	lsr	r25
     37a:	96 95       	lsr	r25
     37c:	96 95       	lsr	r25
     37e:	39 2f       	mov	r19, r25
     380:	33 0f       	add	r19, r19
     382:	23 2f       	mov	r18, r19
     384:	22 0f       	add	r18, r18
     386:	22 0f       	add	r18, r18
     388:	23 0f       	add	r18, r19
     38a:	82 1b       	sub	r24, r18
     38c:	20 e1       	ldi	r18, 0x10	; 16
     38e:	92 9f       	mul	r25, r18
     390:	80 0d       	add	r24, r0
     392:	11 24       	eor	r1, r1
     394:	08 95       	ret

00000396 <rtc_set>:
	RTCx->dayofweek=rtc_raw[3];
	RTCx->date=BCDtoDEC(rtc_raw[4]);
	RTCx->month=BCDtoDEC(rtc_raw[5]);
	RTCx->year=BCDtoDEC(rtc_raw[6]);
}
void rtc_set(rtc_date *RTCx){
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	27 97       	sbiw	r28, 0x07	; 7
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	rtc_raw[0]=DECtoBCD(RTCx->second);
     3b0:	fc 01       	movw	r30, r24
     3b2:	80 81       	ld	r24, Z
     3b4:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3b8:	89 83       	std	Y+1, r24	; 0x01
	rtc_raw[1]=DECtoBCD(RTCx->minute);
     3ba:	f8 01       	movw	r30, r16
     3bc:	81 81       	ldd	r24, Z+1	; 0x01
     3be:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3c2:	8a 83       	std	Y+2, r24	; 0x02
	rtc_raw[2]=DECtoBCD(RTCx->hour);
     3c4:	f8 01       	movw	r30, r16
     3c6:	82 81       	ldd	r24, Z+2	; 0x02
     3c8:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3cc:	8b 83       	std	Y+3, r24	; 0x03
	rtc_raw[3]=RTCx->dayofweek;
     3ce:	f8 01       	movw	r30, r16
     3d0:	87 81       	ldd	r24, Z+7	; 0x07
     3d2:	8c 83       	std	Y+4, r24	; 0x04
	rtc_raw[4]=DECtoBCD(RTCx->date);
     3d4:	83 81       	ldd	r24, Z+3	; 0x03
     3d6:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3da:	8d 83       	std	Y+5, r24	; 0x05
	rtc_raw[5]=DECtoBCD(RTCx->month);
     3dc:	f8 01       	movw	r30, r16
     3de:	84 81       	ldd	r24, Z+4	; 0x04
     3e0:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3e4:	8e 83       	std	Y+6, r24	; 0x06
	rtc_raw[6]=DECtoBCD(RTCx->year);
     3e6:	f8 01       	movw	r30, r16
     3e8:	85 81       	ldd	r24, Z+5	; 0x05
     3ea:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3ee:	8f 83       	std	Y+7, r24	; 0x07
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
     3f0:	27 e0       	ldi	r18, 0x07	; 7
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	ae 01       	movw	r20, r28
     3f6:	4f 5f       	subi	r20, 0xFF	; 255
     3f8:	5f 4f       	sbci	r21, 0xFF	; 255
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	82 e3       	ldi	r24, 0x32	; 50
     3fe:	0e 94 50 04 	call	0x8a0	; 0x8a0 <twi_write>
}
     402:	27 96       	adiw	r28, 0x07	; 7
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	08 95       	ret

00000418 <led_board_sw_reset>:

void led_write_batch(uint8_t board_address, int *pwmChannels, uint8_t channels_num){
	twi_write_batch_by_reg(board_address, PWM0 | 0xA0, pwmChannels, channels_num);
}

void led_write_single(uint8_t board_address, uint8_t led_num, uint8_t brightness){
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	63 97       	sbiw	r28, 0x13	; 19
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	18 2f       	mov	r17, r24
     432:	85 ea       	ldi	r24, 0xA5	; 165
     434:	89 83       	std	Y+1, r24	; 0x01
     436:	8a e5       	ldi	r24, 0x5A	; 90
     438:	8a 83       	std	Y+2, r24	; 0x02
     43a:	00 e1       	ldi	r16, 0x10	; 16
     43c:	ae 01       	movw	r20, r28
     43e:	4d 5f       	subi	r20, 0xFD	; 253
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	fa 01       	movw	r30, r20
     444:	80 2f       	mov	r24, r16
     446:	11 92       	st	Z+, r1
     448:	8a 95       	dec	r24
     44a:	e9 f7       	brne	.-6      	; 0x446 <led_board_sw_reset+0x2e>
     44c:	20 e1       	ldi	r18, 0x10	; 16
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	62 ea       	ldi	r22, 0xA2	; 162
     452:	81 2f       	mov	r24, r17
     454:	0e 94 dd 04 	call	0x9ba	; 0x9ba <twi_write_batch_by_reg>
     458:	42 e0       	ldi	r20, 0x02	; 2
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	be 01       	movw	r22, r28
     45e:	6f 5f       	subi	r22, 0xFF	; 255
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	81 2f       	mov	r24, r17
     464:	0e 94 9d 04 	call	0x93a	; 0x93a <twi_write_batch>
     468:	0b 8b       	std	Y+19, r16	; 0x13
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	ae 01       	movw	r20, r28
     470:	4d 5e       	subi	r20, 0xED	; 237
     472:	5f 4f       	sbci	r21, 0xFF	; 255
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	81 2f       	mov	r24, r17
     478:	0e 94 50 04 	call	0x8a0	; 0x8a0 <twi_write>
     47c:	63 96       	adiw	r28, 0x13	; 19
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	08 95       	ret

00000492 <led_board_init>:
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	1f 92       	push	r1
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	18 2f       	mov	r17, r24
     4a2:	19 82       	std	Y+1, r1	; 0x01
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	ae 01       	movw	r20, r28
     4aa:	4f 5f       	subi	r20, 0xFF	; 255
     4ac:	5f 4f       	sbci	r21, 0xFF	; 255
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <twi_write>
     4b4:	21 e0       	ldi	r18, 0x01	; 1
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	ae 01       	movw	r20, r28
     4ba:	4f 5f       	subi	r20, 0xFF	; 255
     4bc:	5f 4f       	sbci	r21, 0xFF	; 255
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	81 2f       	mov	r24, r17
     4c2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <twi_write>
     4c6:	22 e0       	ldi	r18, 0x02	; 2
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	44 e1       	ldi	r20, 0x14	; 20
     4cc:	52 e0       	ldi	r21, 0x02	; 2
     4ce:	62 ea       	ldi	r22, 0xA2	; 162
     4d0:	81 2f       	mov	r24, r17
     4d2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <twi_write_batch_by_reg>
     4d6:	19 82       	std	Y+1, r1	; 0x01
     4d8:	21 e0       	ldi	r18, 0x01	; 1
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	ae 01       	movw	r20, r28
     4de:	4f 5f       	subi	r20, 0xFF	; 255
     4e0:	5f 4f       	sbci	r21, 0xFF	; 255
     4e2:	62 e1       	ldi	r22, 0x12	; 18
     4e4:	81 2f       	mov	r24, r17
     4e6:	0e 94 50 04 	call	0x8a0	; 0x8a0 <twi_write>
     4ea:	8f ef       	ldi	r24, 0xFF	; 255
     4ec:	89 83       	std	Y+1, r24	; 0x01
     4ee:	21 e0       	ldi	r18, 0x01	; 1
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	ae 01       	movw	r20, r28
     4f4:	4f 5f       	subi	r20, 0xFF	; 255
     4f6:	5f 4f       	sbci	r21, 0xFF	; 255
     4f8:	63 e1       	ldi	r22, 0x13	; 19
     4fa:	81 2f       	mov	r24, r17
     4fc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <twi_write>
     500:	0a ea       	ldi	r16, 0xAA	; 170
     502:	09 83       	std	Y+1, r16	; 0x01
     504:	21 e0       	ldi	r18, 0x01	; 1
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	ae 01       	movw	r20, r28
     50a:	4f 5f       	subi	r20, 0xFF	; 255
     50c:	5f 4f       	sbci	r21, 0xFF	; 255
     50e:	64 e1       	ldi	r22, 0x14	; 20
     510:	81 2f       	mov	r24, r17
     512:	0e 94 50 04 	call	0x8a0	; 0x8a0 <twi_write>
     516:	09 83       	std	Y+1, r16	; 0x01
     518:	21 e0       	ldi	r18, 0x01	; 1
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	ae 01       	movw	r20, r28
     51e:	4f 5f       	subi	r20, 0xFF	; 255
     520:	5f 4f       	sbci	r21, 0xFF	; 255
     522:	65 e1       	ldi	r22, 0x15	; 21
     524:	81 2f       	mov	r24, r17
     526:	0e 94 50 04 	call	0x8a0	; 0x8a0 <twi_write>
     52a:	09 83       	std	Y+1, r16	; 0x01
     52c:	21 e0       	ldi	r18, 0x01	; 1
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	ae 01       	movw	r20, r28
     532:	4f 5f       	subi	r20, 0xFF	; 255
     534:	5f 4f       	sbci	r21, 0xFF	; 255
     536:	66 e1       	ldi	r22, 0x16	; 22
     538:	81 2f       	mov	r24, r17
     53a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <twi_write>
     53e:	09 83       	std	Y+1, r16	; 0x01
     540:	21 e0       	ldi	r18, 0x01	; 1
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	ae 01       	movw	r20, r28
     546:	4f 5f       	subi	r20, 0xFF	; 255
     548:	5f 4f       	sbci	r21, 0xFF	; 255
     54a:	67 e1       	ldi	r22, 0x17	; 23
     54c:	81 2f       	mov	r24, r17
     54e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <twi_write>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	0f 90       	pop	r0
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	08 95       	ret

00000560 <led_write_batch>:
     560:	24 2f       	mov	r18, r20
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	ab 01       	movw	r20, r22
     566:	62 ea       	ldi	r22, 0xA2	; 162
     568:	0e 94 dd 04 	call	0x9ba	; 0x9ba <twi_write_batch_by_reg>
     56c:	08 95       	ret

0000056e <run_wave>:
	
}

void run_wave(uint8_t cmd) {
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t shifts = 0;
	uint8_t direction=0;
	uint8_t *brightness_ptr;
	uint8_t *leds_array = led_pattern;
	switch (cmd) {
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	50 f0       	brcs	.+20     	; 0x58e <run_wave+0x20>
     57a:	84 30       	cpi	r24, 0x04	; 4
     57c:	80 f4       	brcc	.+32     	; 0x59e <run_wave+0x30>
		case ON_DOWN_UP:
		case OFF_DOWN_UP:
		direction = 0;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
     57e:	83 30       	cpi	r24, 0x03	; 3
     580:	91 f0       	breq	.+36     	; 0x5a6 <run_wave+0x38>
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	a1 f4       	brne	.+40     	; 0x5ae <run_wave+0x40>
     586:	c3 e0       	ldi	r28, 0x03	; 3
     588:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t *brightness_ptr;
	uint8_t *leds_array = led_pattern;
	switch (cmd) {
		case ON_DOWN_UP:
		case OFF_DOWN_UP:
		direction = 0;
     58a:	00 e0       	ldi	r16, 0x00	; 0
     58c:	1b c0       	rjmp	.+54     	; 0x5c4 <run_wave+0x56>
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
		break;
		case ON_UP_DOWN:
		case OFF_UP_DOWN:
		direction = 1;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
     58e:	83 30       	cpi	r24, 0x03	; 3
     590:	91 f0       	breq	.+36     	; 0x5b6 <run_wave+0x48>
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	a1 f4       	brne	.+40     	; 0x5be <run_wave+0x50>
     596:	c3 e0       	ldi	r28, 0x03	; 3
     598:	d1 e0       	ldi	r29, 0x01	; 1
		direction = 0;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
		break;
		case ON_UP_DOWN:
		case OFF_UP_DOWN:
		direction = 1;
     59a:	01 e0       	ldi	r16, 0x01	; 1
     59c:	13 c0       	rjmp	.+38     	; 0x5c4 <run_wave+0x56>
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
		break;
		default:
		direction = 0;
		brightness_ptr = brightness_on;
     59e:	c6 e2       	ldi	r28, 0x26	; 38
     5a0:	d1 e0       	ldi	r29, 0x01	; 1
		case OFF_UP_DOWN:
		direction = 1;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
		break;
		default:
		direction = 0;
     5a2:	00 e0       	ldi	r16, 0x00	; 0
     5a4:	0f c0       	rjmp	.+30     	; 0x5c4 <run_wave+0x56>
	uint8_t *leds_array = led_pattern;
	switch (cmd) {
		case ON_DOWN_UP:
		case OFF_DOWN_UP:
		direction = 0;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
     5a6:	c3 e0       	ldi	r28, 0x03	; 3
     5a8:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t *brightness_ptr;
	uint8_t *leds_array = led_pattern;
	switch (cmd) {
		case ON_DOWN_UP:
		case OFF_DOWN_UP:
		direction = 0;
     5aa:	00 e0       	ldi	r16, 0x00	; 0
     5ac:	0b c0       	rjmp	.+22     	; 0x5c4 <run_wave+0x56>
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
     5ae:	c6 e2       	ldi	r28, 0x26	; 38
     5b0:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t *brightness_ptr;
	uint8_t *leds_array = led_pattern;
	switch (cmd) {
		case ON_DOWN_UP:
		case OFF_DOWN_UP:
		direction = 0;
     5b2:	00 e0       	ldi	r16, 0x00	; 0
     5b4:	07 c0       	rjmp	.+14     	; 0x5c4 <run_wave+0x56>
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
		break;
		case ON_UP_DOWN:
		case OFF_UP_DOWN:
		direction = 1;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
     5b6:	c3 e0       	ldi	r28, 0x03	; 3
     5b8:	d1 e0       	ldi	r29, 0x01	; 1
		direction = 0;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
		break;
		case ON_UP_DOWN:
		case OFF_UP_DOWN:
		direction = 1;
     5ba:	01 e0       	ldi	r16, 0x01	; 1
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <run_wave+0x56>
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
     5be:	c6 e2       	ldi	r28, 0x26	; 38
     5c0:	d1 e0       	ldi	r29, 0x01	; 1
		direction = 0;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
		break;
		case ON_UP_DOWN:
		case OFF_UP_DOWN:
		direction = 1;
     5c2:	01 e0       	ldi	r16, 0x01	; 1
		direction = 0;
		brightness_ptr = brightness_on;
		break;
	}
		
	if (direction == 0){
     5c4:	00 23       	and	r16, r16
     5c6:	19 f1       	breq	.+70     	; 0x60e <run_wave+0xa0>
     5c8:	25 c0       	rjmp	.+74     	; 0x614 <run_wave+0xa6>
		for (shifts = 1; shifts < 20; shifts++) {
			for (i = 0; i < 16; i++) {
				leds_array[i] = brightness_ptr[i + shifts];
     5ca:	82 2f       	mov	r24, r18
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	dc 01       	movw	r26, r24
     5d0:	ac 5e       	subi	r26, 0xEC	; 236
     5d2:	bd 4f       	sbci	r27, 0xFD	; 253
     5d4:	81 0f       	add	r24, r17
     5d6:	91 1d       	adc	r25, r1
     5d8:	fe 01       	movw	r30, r28
     5da:	e8 0f       	add	r30, r24
     5dc:	f9 1f       	adc	r31, r25
     5de:	80 81       	ld	r24, Z
     5e0:	8c 93       	st	X, r24
		break;
	}
		
	if (direction == 0){
		for (shifts = 1; shifts < 20; shifts++) {
			for (i = 0; i < 16; i++) {
     5e2:	2f 5f       	subi	r18, 0xFF	; 255
     5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <run_wave+0x7a>
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	20 31       	cpi	r18, 0x10	; 16
     5ea:	78 f3       	brcs	.-34     	; 0x5ca <run_wave+0x5c>
				leds_array[i] = brightness_ptr[i + shifts];
			}
			led_write_batch(TLC_ADDR, leds_array, 16);
     5ec:	40 e1       	ldi	r20, 0x10	; 16
     5ee:	64 e1       	ldi	r22, 0x14	; 20
     5f0:	72 e0       	ldi	r23, 0x02	; 2
     5f2:	84 e6       	ldi	r24, 0x64	; 100
     5f4:	0e 94 b0 02 	call	0x560	; 0x560 <led_write_batch>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f8:	2f e7       	ldi	r18, 0x7F	; 127
     5fa:	88 e3       	ldi	r24, 0x38	; 56
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	21 50       	subi	r18, 0x01	; 1
     600:	80 40       	sbci	r24, 0x00	; 0
     602:	90 40       	sbci	r25, 0x00	; 0
     604:	e1 f7       	brne	.-8      	; 0x5fe <run_wave+0x90>
     606:	00 c0       	rjmp	.+0      	; 0x608 <run_wave+0x9a>
     608:	00 00       	nop
		brightness_ptr = brightness_on;
		break;
	}
		
	if (direction == 0){
		for (shifts = 1; shifts < 20; shifts++) {
     60a:	1f 5f       	subi	r17, 0xFF	; 255
     60c:	01 c0       	rjmp	.+2      	; 0x610 <run_wave+0xa2>
     60e:	11 e0       	ldi	r17, 0x01	; 1
     610:	14 31       	cpi	r17, 0x14	; 20
     612:	48 f3       	brcs	.-46     	; 0x5e6 <run_wave+0x78>
			}
			led_write_batch(TLC_ADDR, leds_array, 16);
			_delay_ms(SHIF_DELAY);
		}
	}
	if (direction == 1){
     614:	01 30       	cpi	r16, 0x01	; 1
     616:	41 f5       	brne	.+80     	; 0x668 <run_wave+0xfa>
     618:	24 c0       	rjmp	.+72     	; 0x662 <run_wave+0xf4>
		for (shifts = 1; shifts < 20; shifts++) {
			uint8_t reverce_index=16;
			for (i = 0; i < 16; i++) {
				reverce_index--;
     61a:	91 50       	subi	r25, 0x01	; 1
				leds_array[reverce_index] = brightness_ptr[i + shifts];
     61c:	a9 2f       	mov	r26, r25
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ac 5e       	subi	r26, 0xEC	; 236
     622:	bd 4f       	sbci	r27, 0xFD	; 253
     624:	e1 2f       	mov	r30, r17
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	e8 0f       	add	r30, r24
     62a:	f1 1d       	adc	r31, r1
     62c:	ec 0f       	add	r30, r28
     62e:	fd 1f       	adc	r31, r29
     630:	20 81       	ld	r18, Z
     632:	2c 93       	st	X, r18
		}
	}
	if (direction == 1){
		for (shifts = 1; shifts < 20; shifts++) {
			uint8_t reverce_index=16;
			for (i = 0; i < 16; i++) {
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	02 c0       	rjmp	.+4      	; 0x63c <run_wave+0xce>
     638:	90 e1       	ldi	r25, 0x10	; 16
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	80 31       	cpi	r24, 0x10	; 16
     63e:	68 f3       	brcs	.-38     	; 0x61a <run_wave+0xac>
				reverce_index--;
				leds_array[reverce_index] = brightness_ptr[i + shifts];
			}
			led_write_batch(TLC_ADDR, leds_array, 16);
     640:	40 e1       	ldi	r20, 0x10	; 16
     642:	64 e1       	ldi	r22, 0x14	; 20
     644:	72 e0       	ldi	r23, 0x02	; 2
     646:	84 e6       	ldi	r24, 0x64	; 100
     648:	0e 94 b0 02 	call	0x560	; 0x560 <led_write_batch>
     64c:	2f e7       	ldi	r18, 0x7F	; 127
     64e:	88 e3       	ldi	r24, 0x38	; 56
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	21 50       	subi	r18, 0x01	; 1
     654:	80 40       	sbci	r24, 0x00	; 0
     656:	90 40       	sbci	r25, 0x00	; 0
     658:	e1 f7       	brne	.-8      	; 0x652 <run_wave+0xe4>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <run_wave+0xee>
     65c:	00 00       	nop
			led_write_batch(TLC_ADDR, leds_array, 16);
			_delay_ms(SHIF_DELAY);
		}
	}
	if (direction == 1){
		for (shifts = 1; shifts < 20; shifts++) {
     65e:	1f 5f       	subi	r17, 0xFF	; 255
     660:	01 c0       	rjmp	.+2      	; 0x664 <run_wave+0xf6>
     662:	11 e0       	ldi	r17, 0x01	; 1
     664:	14 31       	cpi	r17, 0x14	; 20
     666:	40 f3       	brcs	.-48     	; 0x638 <run_wave+0xca>
			led_write_batch(TLC_ADDR, leds_array, 16);
			_delay_ms(SHIF_DELAY);
		}
	}
	
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	08 95       	ret

00000672 <twi_start>:
	status = (TWSR1 & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     672:	85 ea       	ldi	r24, 0xA5	; 165
     674:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
ISR(TWI1_vect){
	status = (TWSR1 & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     67c:	05 c0       	rjmp	.+10     	; 0x688 <twi_start+0x16>
		i++;
     67e:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     680:	80 34       	cpi	r24, 0x40	; 64
     682:	26 e0       	ldi	r18, 0x06	; 6
     684:	92 07       	cpc	r25, r18
     686:	30 f4       	brcc	.+12     	; 0x694 <twi_start+0x22>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     688:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <status>
     68c:	28 30       	cpi	r18, 0x08	; 8
     68e:	b9 f7       	brne	.-18     	; 0x67e <twi_start+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	08 95       	ret
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     694:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     696:	08 95       	ret

00000698 <twi_stop>:

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     698:	85 e9       	ldi	r24, 0x95	; 149
     69a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     69e:	08 95       	ret

000006a0 <twi_restart>:
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     6a0:	85 ea       	ldi	r24, 0xA5	; 165
     6a2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <twi_restart+0x16>
		i++;
     6ac:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     6ae:	80 34       	cpi	r24, 0x40	; 64
     6b0:	26 e0       	ldi	r18, 0x06	; 6
     6b2:	92 07       	cpc	r25, r18
     6b4:	30 f4       	brcc	.+12     	; 0x6c2 <twi_restart+0x22>

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     6b6:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <status>
     6ba:	20 31       	cpi	r18, 0x10	; 16
     6bc:	b9 f7       	brne	.-18     	; 0x6ac <twi_restart+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	08 95       	ret
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     6c2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     6c4:	08 95       	ret

000006c6 <twi_addr_write_ack>:

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     6c6:	85 e8       	ldi	r24, 0x85	; 133
     6c8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	}
	return TWI_OK;
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     6d0:	05 c0       	rjmp	.+10     	; 0x6dc <twi_addr_write_ack+0x16>
		i++;
     6d2:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     6d4:	80 34       	cpi	r24, 0x40	; 64
     6d6:	26 e0       	ldi	r18, 0x06	; 6
     6d8:	92 07       	cpc	r25, r18
     6da:	30 f4       	brcc	.+12     	; 0x6e8 <twi_addr_write_ack+0x22>

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     6dc:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <status>
     6e0:	28 31       	cpi	r18, 0x18	; 24
     6e2:	b9 f7       	brne	.-18     	; 0x6d2 <twi_addr_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     6ea:	08 95       	ret

000006ec <twi_data_write_ack>:


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     6ec:	85 e8       	ldi	r24, 0x85	; 133
     6ee:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     6f6:	05 c0       	rjmp	.+10     	; 0x702 <twi_data_write_ack+0x16>
		i++;
     6f8:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     6fa:	80 34       	cpi	r24, 0x40	; 64
     6fc:	26 e0       	ldi	r18, 0x06	; 6
     6fe:	92 07       	cpc	r25, r18
     700:	30 f4       	brcc	.+12     	; 0x70e <twi_data_write_ack+0x22>

static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     702:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <status>
     706:	28 32       	cpi	r18, 0x28	; 40
     708:	b9 f7       	brne	.-18     	; 0x6f8 <twi_data_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     70e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     710:	08 95       	ret

00000712 <twi_addr_read_ack>:


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     712:	85 e8       	ldi	r24, 0x85	; 133
     714:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     71c:	05 c0       	rjmp	.+10     	; 0x728 <twi_addr_read_ack+0x16>
		i++;
     71e:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     720:	80 34       	cpi	r24, 0x40	; 64
     722:	26 e0       	ldi	r18, 0x06	; 6
     724:	92 07       	cpc	r25, r18
     726:	30 f4       	brcc	.+12     	; 0x734 <twi_addr_read_ack+0x22>

static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     728:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <status>
     72c:	20 34       	cpi	r18, 0x40	; 64
     72e:	b9 f7       	brne	.-18     	; 0x71e <twi_addr_read_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     734:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     736:	08 95       	ret

00000738 <twi_data_read_ack>:


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
     738:	88 23       	and	r24, r24
     73a:	89 f0       	breq	.+34     	; 0x75e <twi_data_read_ack+0x26>
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
     73c:	85 ec       	ldi	r24, 0xC5	; 197
     73e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     746:	05 c0       	rjmp	.+10     	; 0x752 <twi_data_read_ack+0x1a>
			i++;
     748:	01 96       	adiw	r24, 0x01	; 1
			if(i >= TWI_TIMEOUT){
     74a:	80 34       	cpi	r24, 0x40	; 64
     74c:	26 e0       	ldi	r18, 0x06	; 6
     74e:	92 07       	cpc	r25, r18
     750:	b8 f4       	brcc	.+46     	; 0x780 <twi_data_read_ack+0x48>

static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     752:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <status>
     756:	20 35       	cpi	r18, 0x50	; 80
     758:	b9 f7       	brne	.-18     	; 0x748 <twi_data_read_ack+0x10>
				return TWI_ERROR_START;
			}
		}
		
	}
	return TWI_OK;
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	08 95       	ret
				return TWI_ERROR_START;
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     75e:	85 e8       	ldi	r24, 0x85	; 133
     760:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     768:	05 c0       	rjmp	.+10     	; 0x774 <twi_data_read_ack+0x3c>
			i++;
     76a:	01 96       	adiw	r24, 0x01	; 1
			if(i >= TWI_TIMEOUT){
     76c:	80 34       	cpi	r24, 0x40	; 64
     76e:	26 e0       	ldi	r18, 0x06	; 6
     770:	92 07       	cpc	r25, r18
     772:	40 f4       	brcc	.+16     	; 0x784 <twi_data_read_ack+0x4c>
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     774:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <status>
     778:	28 35       	cpi	r18, 0x58	; 88
     77a:	b9 f7       	brne	.-18     	; 0x76a <twi_data_read_ack+0x32>
				return TWI_ERROR_START;
			}
		}
		
	}
	return TWI_OK;
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	08 95       	ret
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	08 95       	ret
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     784:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		
	}
	return TWI_OK;
}
     786:	08 95       	ret

00000788 <__vector_40>:

#include "twi_hal.h"

volatile uint8_t status = 0xF8;

ISR(TWI1_vect){
     788:	1f 92       	push	r1
     78a:	0f 92       	push	r0
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	0f 92       	push	r0
     790:	11 24       	eor	r1, r1
     792:	8f 93       	push	r24
	status = (TWSR1 & 0xF8);
     794:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
     798:	88 7f       	andi	r24, 0xF8	; 248
     79a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <status>
}
     79e:	8f 91       	pop	r24
     7a0:	0f 90       	pop	r0
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	0f 90       	pop	r0
     7a6:	1f 90       	pop	r1
     7a8:	18 95       	reti

000007aa <twi_read>:
		
	}
	return TWI_OK;
}

uint8_t twi_read(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     7aa:	cf 92       	push	r12
     7ac:	df 92       	push	r13
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	d8 2e       	mov	r13, r24
     7ba:	c6 2e       	mov	r12, r22
     7bc:	7a 01       	movw	r14, r20
     7be:	89 01       	movw	r16, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     7c0:	0e 94 39 03 	call	0x672	; 0x672 <twi_start>
     7c4:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     7c6:	88 23       	and	r24, r24
     7c8:	21 f0       	breq	.+8      	; 0x7d2 <twi_read+0x28>
		twi_stop();
     7ca:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
		return err;
     7ce:	8c 2f       	mov	r24, r28
     7d0:	5f c0       	rjmp	.+190    	; 0x890 <__DATA_REGION_LENGTH__+0x90>
	}
	TWDR1 = (addr << 1) | 0;
     7d2:	8d 2d       	mov	r24, r13
     7d4:	88 0f       	add	r24, r24
     7d6:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
     7da:	0e 94 63 03 	call	0x6c6	; 0x6c6 <twi_addr_write_ack>
     7de:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     7e0:	88 23       	and	r24, r24
     7e2:	21 f0       	breq	.+8      	; 0x7ec <twi_read+0x42>
		twi_stop();
     7e4:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
		return err;
     7e8:	8c 2f       	mov	r24, r28
     7ea:	52 c0       	rjmp	.+164    	; 0x890 <__DATA_REGION_LENGTH__+0x90>
	}
	
	TWDR1 = reg;
     7ec:	c0 92 db 00 	sts	0x00DB, r12	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	err = twi_data_write_ack();
     7f0:	0e 94 76 03 	call	0x6ec	; 0x6ec <twi_data_write_ack>
     7f4:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     7f6:	88 23       	and	r24, r24
     7f8:	21 f0       	breq	.+8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		twi_stop();
     7fa:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
		return err;
     7fe:	8c 2f       	mov	r24, r28
     800:	47 c0       	rjmp	.+142    	; 0x890 <__DATA_REGION_LENGTH__+0x90>
	}
	
	err = twi_restart();
     802:	0e 94 50 03 	call	0x6a0	; 0x6a0 <twi_restart>
     806:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     808:	88 23       	and	r24, r24
     80a:	21 f0       	breq	.+8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		twi_stop();
     80c:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
		return err;
     810:	8c 2f       	mov	r24, r28
     812:	3e c0       	rjmp	.+124    	; 0x890 <__DATA_REGION_LENGTH__+0x90>
	}
	
	TWDR1 = (addr << 1) | 1;
     814:	8d 2d       	mov	r24, r13
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	81 60       	ori	r24, 0x01	; 1
     81e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>

	err = twi_addr_read_ack();
     822:	0e 94 89 03 	call	0x712	; 0x712 <twi_addr_read_ack>
     826:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     828:	88 23       	and	r24, r24
     82a:	c1 f0       	breq	.+48     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		twi_stop();
     82c:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
		return err;
     830:	8c 2f       	mov	r24, r28
     832:	2e c0       	rjmp	.+92     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
	}
	
	for(i = 0; i < (len - 1);i++){
		err = twi_data_read_ack(1);
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	0e 94 9c 03 	call	0x738	; 0x738 <twi_data_read_ack>
     83a:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     83c:	88 23       	and	r24, r24
     83e:	21 f0       	breq	.+8      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
			twi_stop();
     840:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
			return err;
     844:	8c 2f       	mov	r24, r28
     846:	24 c0       	rjmp	.+72     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
		}
		data[i] = TWDR1;
     848:	f7 01       	movw	r30, r14
     84a:	ec 0d       	add	r30, r12
     84c:	fd 1d       	adc	r31, r13
     84e:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     852:	80 83       	st	Z, r24
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	c8 1a       	sub	r12, r24
     858:	d8 0a       	sbc	r13, r24
     85a:	02 c0       	rjmp	.+4      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
     85c:	c1 2c       	mov	r12, r1
     85e:	d1 2c       	mov	r13, r1
     860:	c8 01       	movw	r24, r16
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	c8 16       	cp	r12, r24
     866:	d9 06       	cpc	r13, r25
     868:	28 f3       	brcs	.-54     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
			return err;
		}
		data[i] = TWDR1;
	}
	
	err = twi_data_read_ack(0);
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 9c 03 	call	0x738	; 0x738 <twi_data_read_ack>
     870:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     872:	88 23       	and	r24, r24
     874:	21 f0       	breq	.+8      	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
		twi_stop();
     876:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
		return err;
     87a:	8c 2f       	mov	r24, r28
     87c:	09 c0       	rjmp	.+18     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
	}
	data[i] = TWDR1;
     87e:	f7 01       	movw	r30, r14
     880:	ec 0d       	add	r30, r12
     882:	fd 1d       	adc	r31, r13
     884:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     888:	80 83       	st	Z, r24
	
	twi_stop();
     88a:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
	
	return err;
     88e:	8c 2f       	mov	r24, r28
}
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	08 95       	ret

000008a0 <twi_write>:


uint8_t twi_write(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	18 2f       	mov	r17, r24
     8b0:	06 2f       	mov	r16, r22
     8b2:	6a 01       	movw	r12, r20
     8b4:	79 01       	movw	r14, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     8b6:	0e 94 39 03 	call	0x672	; 0x672 <twi_start>
     8ba:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     8bc:	88 23       	and	r24, r24
     8be:	21 f0       	breq	.+8      	; 0x8c8 <twi_write+0x28>
		twi_stop();
     8c0:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
		return err;
     8c4:	8c 2f       	mov	r24, r28
     8c6:	31 c0       	rjmp	.+98     	; 0x92a <__stack+0x2b>
	}
	TWDR1 = (addr << 1) | 0;
     8c8:	11 0f       	add	r17, r17
     8ca:	10 93 db 00 	sts	0x00DB, r17	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
     8ce:	0e 94 63 03 	call	0x6c6	; 0x6c6 <twi_addr_write_ack>
     8d2:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     8d4:	88 23       	and	r24, r24
     8d6:	21 f0       	breq	.+8      	; 0x8e0 <twi_write+0x40>
		twi_stop();
     8d8:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
		return err;
     8dc:	8c 2f       	mov	r24, r28
     8de:	25 c0       	rjmp	.+74     	; 0x92a <__stack+0x2b>
	}
	
	TWDR1 = reg;
     8e0:	00 93 db 00 	sts	0x00DB, r16	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	err = twi_data_write_ack();
     8e4:	0e 94 76 03 	call	0x6ec	; 0x6ec <twi_data_write_ack>
     8e8:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     8ea:	88 23       	and	r24, r24
     8ec:	b1 f0       	breq	.+44     	; 0x91a <__stack+0x1b>
		twi_stop();
     8ee:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
		return err;
     8f2:	8c 2f       	mov	r24, r28
     8f4:	1a c0       	rjmp	.+52     	; 0x92a <__stack+0x2b>
	}
	
	for(i = 0; i < len;i++){
		TWDR1 = data[i];
     8f6:	f6 01       	movw	r30, r12
     8f8:	e0 0f       	add	r30, r16
     8fa:	f1 1f       	adc	r31, r17
     8fc:	80 81       	ld	r24, Z
     8fe:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		err = twi_data_write_ack();
     902:	0e 94 76 03 	call	0x6ec	; 0x6ec <twi_data_write_ack>
     906:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     908:	88 23       	and	r24, r24
     90a:	21 f0       	breq	.+8      	; 0x914 <__stack+0x15>
			twi_stop();
     90c:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
			return err;
     910:	8c 2f       	mov	r24, r28
     912:	0b c0       	rjmp	.+22     	; 0x92a <__stack+0x2b>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
     914:	0f 5f       	subi	r16, 0xFF	; 255
     916:	1f 4f       	sbci	r17, 0xFF	; 255
     918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0x1f>
     91a:	00 e0       	ldi	r16, 0x00	; 0
     91c:	10 e0       	ldi	r17, 0x00	; 0
     91e:	0e 15       	cp	r16, r14
     920:	1f 05       	cpc	r17, r15
     922:	48 f3       	brcs	.-46     	; 0x8f6 <twi_write+0x56>
			return err;
		}
	}
	
	
	twi_stop();
     924:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
	
	return err;
     928:	8c 2f       	mov	r24, r28
}
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	cf 90       	pop	r12
     938:	08 95       	ret

0000093a <twi_write_batch>:
uint8_t twi_write_batch(uint8_t addr, uint8_t *data,uint16_t len){
     93a:	cf 92       	push	r12
     93c:	df 92       	push	r13
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	c8 2f       	mov	r28, r24
     94a:	6b 01       	movw	r12, r22
     94c:	7a 01       	movw	r14, r20
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     94e:	0e 94 39 03 	call	0x672	; 0x672 <twi_start>
     952:	18 2f       	mov	r17, r24
	if(err != TWI_OK){
     954:	88 23       	and	r24, r24
     956:	21 f0       	breq	.+8      	; 0x960 <twi_write_batch+0x26>
		twi_stop();
     958:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
		return err;
     95c:	81 2f       	mov	r24, r17
     95e:	25 c0       	rjmp	.+74     	; 0x9aa <twi_write_batch+0x70>
	}
	TWDR1 = (addr << 1) | 0;
     960:	cc 0f       	add	r28, r28
     962:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
     966:	0e 94 63 03 	call	0x6c6	; 0x6c6 <twi_addr_write_ack>
     96a:	18 2f       	mov	r17, r24
	if(err != TWI_OK){
     96c:	88 23       	and	r24, r24
     96e:	a9 f0       	breq	.+42     	; 0x99a <twi_write_batch+0x60>
		twi_stop();
     970:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
		return err;
     974:	81 2f       	mov	r24, r17
     976:	19 c0       	rjmp	.+50     	; 0x9aa <twi_write_batch+0x70>
	}
	
	
	
	for(i = 0; i < len;i++){
		TWDR1 = data[i];
     978:	f6 01       	movw	r30, r12
     97a:	ec 0f       	add	r30, r28
     97c:	fd 1f       	adc	r31, r29
     97e:	80 81       	ld	r24, Z
     980:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		err = twi_data_write_ack();
     984:	0e 94 76 03 	call	0x6ec	; 0x6ec <twi_data_write_ack>
     988:	18 2f       	mov	r17, r24
		if(err != TWI_OK){
     98a:	88 23       	and	r24, r24
     98c:	21 f0       	breq	.+8      	; 0x996 <twi_write_batch+0x5c>
			twi_stop();
     98e:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
			return err;
     992:	81 2f       	mov	r24, r17
     994:	0a c0       	rjmp	.+20     	; 0x9aa <twi_write_batch+0x70>
		return err;
	}
	
	
	
	for(i = 0; i < len;i++){
     996:	21 96       	adiw	r28, 0x01	; 1
     998:	02 c0       	rjmp	.+4      	; 0x99e <twi_write_batch+0x64>
     99a:	c0 e0       	ldi	r28, 0x00	; 0
     99c:	d0 e0       	ldi	r29, 0x00	; 0
     99e:	ce 15       	cp	r28, r14
     9a0:	df 05       	cpc	r29, r15
     9a2:	50 f3       	brcs	.-44     	; 0x978 <twi_write_batch+0x3e>
			return err;
		}
	}
	
	
	twi_stop();
     9a4:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
	
	return err;
     9a8:	81 2f       	mov	r24, r17
}
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	df 90       	pop	r13
     9b6:	cf 90       	pop	r12
     9b8:	08 95       	ret

000009ba <twi_write_batch_by_reg>:



uint8_t twi_write_batch_by_reg(uint8_t addr,uint8_t reg, uint8_t *data,uint16_t len){
     9ba:	cf 92       	push	r12
     9bc:	df 92       	push	r13
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	18 2f       	mov	r17, r24
     9ca:	06 2f       	mov	r16, r22
     9cc:	6a 01       	movw	r12, r20
     9ce:	79 01       	movw	r14, r18
		
		uint16_t i = 0;
		uint8_t err = TWI_OK;
		
		err = twi_start();
     9d0:	0e 94 39 03 	call	0x672	; 0x672 <twi_start>
     9d4:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     9d6:	88 23       	and	r24, r24
     9d8:	21 f0       	breq	.+8      	; 0x9e2 <twi_write_batch_by_reg+0x28>
			twi_stop();
     9da:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
			return err;
     9de:	8c 2f       	mov	r24, r28
     9e0:	31 c0       	rjmp	.+98     	; 0xa44 <twi_write_batch_by_reg+0x8a>
		}
		TWDR1 = (addr << 1) | 0;
     9e2:	11 0f       	add	r17, r17
     9e4:	10 93 db 00 	sts	0x00DB, r17	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		
		
		err = twi_addr_write_ack();
     9e8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <twi_addr_write_ack>
     9ec:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     9ee:	88 23       	and	r24, r24
     9f0:	21 f0       	breq	.+8      	; 0x9fa <twi_write_batch_by_reg+0x40>
			twi_stop();
     9f2:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
			return err;
     9f6:	8c 2f       	mov	r24, r28
     9f8:	25 c0       	rjmp	.+74     	; 0xa44 <twi_write_batch_by_reg+0x8a>
		}
		
		
		TWDR1 = reg;
     9fa:	00 93 db 00 	sts	0x00DB, r16	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		err = twi_data_write_ack();
     9fe:	0e 94 76 03 	call	0x6ec	; 0x6ec <twi_data_write_ack>
     a02:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     a04:	88 23       	and	r24, r24
     a06:	b1 f0       	breq	.+44     	; 0xa34 <twi_write_batch_by_reg+0x7a>
			twi_stop();
     a08:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
			return err;
     a0c:	8c 2f       	mov	r24, r28
     a0e:	1a c0       	rjmp	.+52     	; 0xa44 <twi_write_batch_by_reg+0x8a>
		}
		
		for(i = 0; i < len;i++){
			TWDR1 = data[i];
     a10:	f6 01       	movw	r30, r12
     a12:	e0 0f       	add	r30, r16
     a14:	f1 1f       	adc	r31, r17
     a16:	80 81       	ld	r24, Z
     a18:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
			err = twi_data_write_ack();
     a1c:	0e 94 76 03 	call	0x6ec	; 0x6ec <twi_data_write_ack>
     a20:	c8 2f       	mov	r28, r24
			if(err != TWI_OK){
     a22:	88 23       	and	r24, r24
     a24:	21 f0       	breq	.+8      	; 0xa2e <twi_write_batch_by_reg+0x74>
				twi_stop();
     a26:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
				return err;
     a2a:	8c 2f       	mov	r24, r28
     a2c:	0b c0       	rjmp	.+22     	; 0xa44 <twi_write_batch_by_reg+0x8a>
		if(err != TWI_OK){
			twi_stop();
			return err;
		}
		
		for(i = 0; i < len;i++){
     a2e:	0f 5f       	subi	r16, 0xFF	; 255
     a30:	1f 4f       	sbci	r17, 0xFF	; 255
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <twi_write_batch_by_reg+0x7e>
     a34:	00 e0       	ldi	r16, 0x00	; 0
     a36:	10 e0       	ldi	r17, 0x00	; 0
     a38:	0e 15       	cp	r16, r14
     a3a:	1f 05       	cpc	r17, r15
     a3c:	48 f3       	brcs	.-46     	; 0xa10 <twi_write_batch_by_reg+0x56>
				return err;
			}
		}
		
		
		twi_stop();
     a3e:	0e 94 4c 03 	call	0x698	; 0x698 <twi_stop>
		
		return err;
     a42:	8c 2f       	mov	r24, r28
}
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	08 95       	ret

00000a54 <twi_init>:





void twi_init(uint32_t speed){
     a54:	9b 01       	movw	r18, r22
     a56:	ac 01       	movw	r20, r24
	
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	72 e1       	ldi	r23, 0x12	; 18
     a5c:	8a e7       	ldi	r24, 0x7A	; 122
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__udivmodsi4>
     a64:	da 01       	movw	r26, r20
     a66:	c9 01       	movw	r24, r18
     a68:	40 97       	sbiw	r24, 0x10	; 16
     a6a:	a1 09       	sbc	r26, r1
     a6c:	b1 09       	sbc	r27, r1
     a6e:	b6 95       	lsr	r27
     a70:	a7 95       	ror	r26
     a72:	97 95       	ror	r25
     a74:	87 95       	ror	r24
	TWBR1 = gen_t & 0xFF;
     a76:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	TWCR1 = (1 << TWEN) | (1 << TWIE);
     a7a:	85 e0       	ldi	r24, 0x05	; 5
     a7c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     a80:	08 95       	ret

00000a82 <__vector_18>:

void uart_send_array(uint8_t *c,uint16_t len){
	for(uint16_t i = 0; i < len;i++){
		uart_send_byte(c[i]);
	}
}
     a82:	1f 92       	push	r1
     a84:	0f 92       	push	r0
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	0f 92       	push	r0
     a8a:	11 24       	eor	r1, r1
     a8c:	8f 93       	push	r24
     a8e:	9f 93       	push	r25
     a90:	ef 93       	push	r30
     a92:	ff 93       	push	r31
     a94:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <rx_count>
     a98:	f0 91 a5 02 	lds	r31, 0x02A5	; 0x8002a5 <rx_count+0x1>
     a9c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     aa0:	ec 5d       	subi	r30, 0xDC	; 220
     aa2:	fd 4f       	sbci	r31, 0xFD	; 253
     aa4:	80 83       	st	Z, r24
     aa6:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <rx_count>
     aaa:	f0 91 a5 02 	lds	r31, 0x02A5	; 0x8002a5 <rx_count+0x1>
     aae:	ec 5d       	subi	r30, 0xDC	; 220
     ab0:	fd 4f       	sbci	r31, 0xFD	; 253
     ab2:	80 81       	ld	r24, Z
     ab4:	8d 30       	cpi	r24, 0x0D	; 13
     ab6:	51 f4       	brne	.+20     	; 0xacc <__vector_18+0x4a>
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <read_complete>
     abe:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <rx_count>
     ac2:	f0 91 a5 02 	lds	r31, 0x02A5	; 0x8002a5 <rx_count+0x1>
     ac6:	eb 5d       	subi	r30, 0xDB	; 219
     ac8:	fd 4f       	sbci	r31, 0xFD	; 253
     aca:	10 82       	st	Z, r1
     acc:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <rx_count>
     ad0:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <rx_count+0x1>
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <rx_count+0x1>
     ada:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <rx_count>
     ade:	ff 91       	pop	r31
     ae0:	ef 91       	pop	r30
     ae2:	9f 91       	pop	r25
     ae4:	8f 91       	pop	r24
     ae6:	0f 90       	pop	r0
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	0f 90       	pop	r0
     aec:	1f 90       	pop	r1
     aee:	18 95       	reti

00000af0 <__vector_20>:
     af0:	1f 92       	push	r1
     af2:	0f 92       	push	r0
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	0f 92       	push	r0
     af8:	11 24       	eor	r1, r1
     afa:	8f 93       	push	r24
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <uart_tx_busy>
     b02:	8f 91       	pop	r24
     b04:	0f 90       	pop	r0
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	0f 90       	pop	r0
     b0a:	1f 90       	pop	r1
     b0c:	18 95       	reti

00000b0e <uart_init>:
     b0e:	44 23       	and	r20, r20
     b10:	39 f0       	breq	.+14     	; 0xb20 <uart_init+0x12>
     b12:	e0 ec       	ldi	r30, 0xC0	; 192
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	20 81       	ld	r18, Z
     b18:	22 60       	ori	r18, 0x02	; 2
     b1a:	20 83       	st	Z, r18
     b1c:	a8 e0       	ldi	r26, 0x08	; 8
     b1e:	01 c0       	rjmp	.+2      	; 0xb22 <uart_init+0x14>
     b20:	a0 e1       	ldi	r26, 0x10	; 16
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	9b 01       	movw	r18, r22
     b26:	ac 01       	movw	r20, r24
     b28:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__muluhisi3>
     b2c:	9b 01       	movw	r18, r22
     b2e:	ac 01       	movw	r20, r24
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	72 e1       	ldi	r23, 0x12	; 18
     b34:	8a e7       	ldi	r24, 0x7A	; 122
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__udivmodsi4>
     b3c:	ba 01       	movw	r22, r20
     b3e:	a9 01       	movw	r20, r18
     b40:	41 50       	subi	r20, 0x01	; 1
     b42:	51 09       	sbc	r21, r1
     b44:	61 09       	sbc	r22, r1
     b46:	71 09       	sbc	r23, r1
     b48:	db 01       	movw	r26, r22
     b4a:	ca 01       	movw	r24, r20
     b4c:	88 27       	eor	r24, r24
     b4e:	9f 70       	andi	r25, 0x0F	; 15
     b50:	aa 27       	eor	r26, r26
     b52:	bb 27       	eor	r27, r27
     b54:	89 2f       	mov	r24, r25
     b56:	9a 2f       	mov	r25, r26
     b58:	ab 2f       	mov	r26, r27
     b5a:	bb 27       	eor	r27, r27
     b5c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     b60:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     b64:	e1 ec       	ldi	r30, 0xC1	; 193
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	88 6d       	ori	r24, 0xD8	; 216
     b6c:	80 83       	st	Z, r24
     b6e:	86 e8       	ldi	r24, 0x86	; 134
     b70:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     b74:	08 95       	ret

00000b76 <uart_send_byte>:
     b76:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <uart_tx_busy>
     b7a:	99 23       	and	r25, r25
     b7c:	e1 f3       	breq	.-8      	; 0xb76 <uart_send_byte>
     b7e:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <uart_tx_busy>
     b82:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     b86:	08 95       	ret

00000b88 <uart_send_string>:

void uart_send_string(uint8_t *c){
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	8c 01       	movw	r16, r24
	uint16_t i = 0;
     b92:	c0 e0       	ldi	r28, 0x00	; 0
     b94:	d0 e0       	ldi	r29, 0x00	; 0
	do{
		uart_send_byte(c[i]);
     b96:	f8 01       	movw	r30, r16
     b98:	ec 0f       	add	r30, r28
     b9a:	fd 1f       	adc	r31, r29
     b9c:	80 81       	ld	r24, Z
     b9e:	0e 94 bb 05 	call	0xb76	; 0xb76 <uart_send_byte>
		i++;
     ba2:	21 96       	adiw	r28, 0x01	; 1
		
	}while(c[i] != '\0');
     ba4:	f8 01       	movw	r30, r16
     ba6:	ec 0f       	add	r30, r28
     ba8:	fd 1f       	adc	r31, r29
     baa:	80 81       	ld	r24, Z
     bac:	81 11       	cpse	r24, r1
     bae:	f3 cf       	rjmp	.-26     	; 0xb96 <uart_send_string+0xe>
	//uart_send_byte(c[i]);
}
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	08 95       	ret

00000bba <__vector_1>:
	///uint8_t brightness[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 100, 250, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100};	

	uint8_t pwmChannels[16];
	
		
ISR(INT0_vect){
     bba:	1f 92       	push	r1
     bbc:	0f 92       	push	r0
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	0f 92       	push	r0
     bc2:	11 24       	eor	r1, r1
     bc4:	2f 93       	push	r18
     bc6:	3f 93       	push	r19
     bc8:	4f 93       	push	r20
     bca:	5f 93       	push	r21
     bcc:	6f 93       	push	r22
     bce:	7f 93       	push	r23
     bd0:	8f 93       	push	r24
     bd2:	9f 93       	push	r25
     bd4:	af 93       	push	r26
     bd6:	bf 93       	push	r27
     bd8:	ef 93       	push	r30
     bda:	ff 93       	push	r31
	rtc_int_request=1;
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <rtc_int_request>
	toggle_pin_level(&ld1);
     be2:	87 e5       	ldi	r24, 0x57	; 87
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	0e 94 36 01 	call	0x26c	; 0x26c <toggle_pin_level>
}	
     bea:	ff 91       	pop	r31
     bec:	ef 91       	pop	r30
     bee:	bf 91       	pop	r27
     bf0:	af 91       	pop	r26
     bf2:	9f 91       	pop	r25
     bf4:	8f 91       	pop	r24
     bf6:	7f 91       	pop	r23
     bf8:	6f 91       	pop	r22
     bfa:	5f 91       	pop	r21
     bfc:	4f 91       	pop	r20
     bfe:	3f 91       	pop	r19
     c00:	2f 91       	pop	r18
     c02:	0f 90       	pop	r0
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	0f 90       	pop	r0
     c08:	1f 90       	pop	r1
     c0a:	18 95       	reti

00000c0c <main>:
int main(void)
{
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	c0 58       	subi	r28, 0x80	; 128
     c16:	d1 09       	sbc	r29, r1
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
	char char_array[128]="\0";
     c22:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rtc_int+0x3>
     c26:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <rtc_int+0x4>
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
     c2e:	fe 01       	movw	r30, r28
     c30:	33 96       	adiw	r30, 0x03	; 3
     c32:	8e e7       	ldi	r24, 0x7E	; 126
     c34:	df 01       	movw	r26, r30
     c36:	1d 92       	st	X+, r1
     c38:	8a 95       	dec	r24
     c3a:	e9 f7       	brne	.-6      	; 0xc36 <main+0x2a>
	uart_init(9600,1);
     c3c:	41 e0       	ldi	r20, 0x01	; 1
     c3e:	60 e8       	ldi	r22, 0x80	; 128
     c40:	75 e2       	ldi	r23, 0x25	; 37
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 87 05 	call	0xb0e	; 0xb0e <uart_init>
	twi_init(400000);
     c4a:	60 e8       	ldi	r22, 0x80	; 128
     c4c:	7a e1       	ldi	r23, 0x1A	; 26
     c4e:	86 e0       	ldi	r24, 0x06	; 6
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 2a 05 	call	0xa54	; 0xa54 <twi_init>
	
	EICRA |= (0b10 << ISC00);
     c56:	e9 e6       	ldi	r30, 0x69	; 105
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	82 60       	ori	r24, 0x02	; 2
     c5e:	80 83       	st	Z, r24
	EIMSK = 0x01; //0b00000001
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	8d bb       	out	0x1d, r24	; 29
	
	set_pin_dir(&ld1 , PORT_DIR_OUT); set_pin_level(&ld1, true);
     c64:	61 e0       	ldi	r22, 0x01	; 1
     c66:	87 e5       	ldi	r24, 0x57	; 87
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <set_pin_dir>
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	87 e5       	ldi	r24, 0x57	; 87
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 cb 00 	call	0x196	; 0x196 <set_pin_level>
	set_pin_dir(&rtc_int, PORT_DIR_IN);
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	8a e5       	ldi	r24, 0x5A	; 90
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <set_pin_dir>
	
	sei();
     c82:	78 94       	sei
	rtc_set(&sys_rtc);
     c84:	8f e4       	ldi	r24, 0x4F	; 79
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 cb 01 	call	0x396	; 0x396 <rtc_set>
	rtc_int_enable(&sys_rtc ,0);
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	8f e4       	ldi	r24, 0x4F	; 79
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	0e 94 47 01 	call	0x28e	; 0x28e <rtc_int_enable>
	adc_init();
     c98:	0e 94 88 00 	call	0x110	; 0x110 <adc_init>
	

	led_board_sw_reset(panel_addr);
     c9c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <panel_addr>
     ca0:	0e 94 0c 02 	call	0x418	; 0x418 <led_board_sw_reset>
	led_board_init(panel_addr);
     ca4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <panel_addr>
     ca8:	0e 94 49 02 	call	0x492	; 0x492 <led_board_init>

	
	uart_send_string((uint8_t *)"RUN\n\r");
     cac:	8d ed       	ldi	r24, 0xDD	; 221
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	0e 94 c4 05 	call	0xb88	; 0xb88 <uart_send_string>
    while (1) 
    {
		
		
		
		if (rtc_int_request != 0){
     cb4:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <rtc_int_request>
     cb8:	88 23       	and	r24, r24
     cba:	e1 f3       	breq	.-8      	; 0xcb4 <main+0xa8>
			rtc_sync(&sys_rtc);
     cbc:	8f e4       	ldi	r24, 0x4F	; 79
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	0e 94 75 01 	call	0x2ea	; 0x2ea <rtc_sync>
			BAT_VOLT = get_mVolt(ADC4_PIN);
     cc4:	84 e0       	ldi	r24, 0x04	; 4
     cc6:	0e 94 b8 00 	call	0x170	; 0x170 <get_mVolt>
     cca:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <BAT_VOLT+0x1>
     cce:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <BAT_VOLT>
			LIGHT_LEVEL = get_mVolt(ADC5_PIN);			
     cd2:	85 e0       	ldi	r24, 0x05	; 5
     cd4:	0e 94 b8 00 	call	0x170	; 0x170 <get_mVolt>
     cd8:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <LIGHT_LEVEL>
     cdc:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <LIGHT_LEVEL+0x1>
			sprintf(char_array, "%02d:%02d:%02d; bat:%umV; l=%u; init: %02X \r\n", sys_rtc.hour, sys_rtc.minute, sys_rtc.second, BAT_VOLT, LIGHT_LEVEL);
     ce0:	ef e4       	ldi	r30, 0x4F	; 79
     ce2:	f1 e0       	ldi	r31, 0x01	; 1
     ce4:	40 81       	ld	r20, Z
     ce6:	31 81       	ldd	r19, Z+1	; 0x01
     ce8:	22 81       	ldd	r18, Z+2	; 0x02
     cea:	9f 93       	push	r25
     cec:	8f 93       	push	r24
     cee:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <BAT_VOLT+0x1>
     cf2:	8f 93       	push	r24
     cf4:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <BAT_VOLT>
     cf8:	8f 93       	push	r24
     cfa:	1f 92       	push	r1
     cfc:	4f 93       	push	r20
     cfe:	1f 92       	push	r1
     d00:	3f 93       	push	r19
     d02:	1f 92       	push	r1
     d04:	2f 93       	push	r18
     d06:	83 ee       	ldi	r24, 0xE3	; 227
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	9f 93       	push	r25
     d0c:	8f 93       	push	r24
     d0e:	8e 01       	movw	r16, r28
     d10:	0f 5f       	subi	r16, 0xFF	; 255
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	1f 93       	push	r17
     d16:	0f 93       	push	r16
     d18:	0e 94 0b 08 	call	0x1016	; 0x1016 <sprintf>
			uart_send_string((uint8_t *)char_array);
     d1c:	c8 01       	movw	r24, r16
     d1e:	0e 94 c4 05 	call	0xb88	; 0xb88 <uart_send_string>
			rtc_int_request = 0;
     d22:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <rtc_int_request>
			
			
			run_wave(ON_UP_DOWN);
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	0e 94 b7 02 	call	0x56e	; 0x56e <run_wave>
			//_delay_ms(1000);
			run_wave(OFF_UP_DOWN);
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	0e 94 b7 02 	call	0x56e	; 0x56e <run_wave>
			//_delay_ms(1000);
			run_wave(ON_DOWN_UP);
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	0e 94 b7 02 	call	0x56e	; 0x56e <run_wave>
			//_delay_ms(1000);
			run_wave(OFF_DOWN_UP);
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	0e 94 b7 02 	call	0x56e	; 0x56e <run_wave>
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	b5 cf       	rjmp	.-150    	; 0xcb4 <main+0xa8>

00000d4a <__fixunssfsi>:
     d4a:	0e 94 19 07 	call	0xe32	; 0xe32 <__fp_splitA>
     d4e:	88 f0       	brcs	.+34     	; 0xd72 <__fixunssfsi+0x28>
     d50:	9f 57       	subi	r25, 0x7F	; 127
     d52:	98 f0       	brcs	.+38     	; 0xd7a <__fixunssfsi+0x30>
     d54:	b9 2f       	mov	r27, r25
     d56:	99 27       	eor	r25, r25
     d58:	b7 51       	subi	r27, 0x17	; 23
     d5a:	b0 f0       	brcs	.+44     	; 0xd88 <__fixunssfsi+0x3e>
     d5c:	e1 f0       	breq	.+56     	; 0xd96 <__fixunssfsi+0x4c>
     d5e:	66 0f       	add	r22, r22
     d60:	77 1f       	adc	r23, r23
     d62:	88 1f       	adc	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	1a f0       	brmi	.+6      	; 0xd6e <__fixunssfsi+0x24>
     d68:	ba 95       	dec	r27
     d6a:	c9 f7       	brne	.-14     	; 0xd5e <__fixunssfsi+0x14>
     d6c:	14 c0       	rjmp	.+40     	; 0xd96 <__fixunssfsi+0x4c>
     d6e:	b1 30       	cpi	r27, 0x01	; 1
     d70:	91 f0       	breq	.+36     	; 0xd96 <__fixunssfsi+0x4c>
     d72:	0e 94 33 07 	call	0xe66	; 0xe66 <__fp_zero>
     d76:	b1 e0       	ldi	r27, 0x01	; 1
     d78:	08 95       	ret
     d7a:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_zero>
     d7e:	67 2f       	mov	r22, r23
     d80:	78 2f       	mov	r23, r24
     d82:	88 27       	eor	r24, r24
     d84:	b8 5f       	subi	r27, 0xF8	; 248
     d86:	39 f0       	breq	.+14     	; 0xd96 <__fixunssfsi+0x4c>
     d88:	b9 3f       	cpi	r27, 0xF9	; 249
     d8a:	cc f3       	brlt	.-14     	; 0xd7e <__fixunssfsi+0x34>
     d8c:	86 95       	lsr	r24
     d8e:	77 95       	ror	r23
     d90:	67 95       	ror	r22
     d92:	b3 95       	inc	r27
     d94:	d9 f7       	brne	.-10     	; 0xd8c <__fixunssfsi+0x42>
     d96:	3e f4       	brtc	.+14     	; 0xda6 <__fixunssfsi+0x5c>
     d98:	90 95       	com	r25
     d9a:	80 95       	com	r24
     d9c:	70 95       	com	r23
     d9e:	61 95       	neg	r22
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
     da2:	8f 4f       	sbci	r24, 0xFF	; 255
     da4:	9f 4f       	sbci	r25, 0xFF	; 255
     da6:	08 95       	ret

00000da8 <__floatunsisf>:
     da8:	e8 94       	clt
     daa:	09 c0       	rjmp	.+18     	; 0xdbe <__floatsisf+0x12>

00000dac <__floatsisf>:
     dac:	97 fb       	bst	r25, 7
     dae:	3e f4       	brtc	.+14     	; 0xdbe <__floatsisf+0x12>
     db0:	90 95       	com	r25
     db2:	80 95       	com	r24
     db4:	70 95       	com	r23
     db6:	61 95       	neg	r22
     db8:	7f 4f       	sbci	r23, 0xFF	; 255
     dba:	8f 4f       	sbci	r24, 0xFF	; 255
     dbc:	9f 4f       	sbci	r25, 0xFF	; 255
     dbe:	99 23       	and	r25, r25
     dc0:	a9 f0       	breq	.+42     	; 0xdec <__floatsisf+0x40>
     dc2:	f9 2f       	mov	r31, r25
     dc4:	96 e9       	ldi	r25, 0x96	; 150
     dc6:	bb 27       	eor	r27, r27
     dc8:	93 95       	inc	r25
     dca:	f6 95       	lsr	r31
     dcc:	87 95       	ror	r24
     dce:	77 95       	ror	r23
     dd0:	67 95       	ror	r22
     dd2:	b7 95       	ror	r27
     dd4:	f1 11       	cpse	r31, r1
     dd6:	f8 cf       	rjmp	.-16     	; 0xdc8 <__floatsisf+0x1c>
     dd8:	fa f4       	brpl	.+62     	; 0xe18 <__floatsisf+0x6c>
     dda:	bb 0f       	add	r27, r27
     ddc:	11 f4       	brne	.+4      	; 0xde2 <__floatsisf+0x36>
     dde:	60 ff       	sbrs	r22, 0
     de0:	1b c0       	rjmp	.+54     	; 0xe18 <__floatsisf+0x6c>
     de2:	6f 5f       	subi	r22, 0xFF	; 255
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	8f 4f       	sbci	r24, 0xFF	; 255
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	16 c0       	rjmp	.+44     	; 0xe18 <__floatsisf+0x6c>
     dec:	88 23       	and	r24, r24
     dee:	11 f0       	breq	.+4      	; 0xdf4 <__floatsisf+0x48>
     df0:	96 e9       	ldi	r25, 0x96	; 150
     df2:	11 c0       	rjmp	.+34     	; 0xe16 <__floatsisf+0x6a>
     df4:	77 23       	and	r23, r23
     df6:	21 f0       	breq	.+8      	; 0xe00 <__floatsisf+0x54>
     df8:	9e e8       	ldi	r25, 0x8E	; 142
     dfa:	87 2f       	mov	r24, r23
     dfc:	76 2f       	mov	r23, r22
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <__floatsisf+0x5e>
     e00:	66 23       	and	r22, r22
     e02:	71 f0       	breq	.+28     	; 0xe20 <__floatsisf+0x74>
     e04:	96 e8       	ldi	r25, 0x86	; 134
     e06:	86 2f       	mov	r24, r22
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	2a f0       	brmi	.+10     	; 0xe18 <__floatsisf+0x6c>
     e0e:	9a 95       	dec	r25
     e10:	66 0f       	add	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	88 1f       	adc	r24, r24
     e16:	da f7       	brpl	.-10     	; 0xe0e <__floatsisf+0x62>
     e18:	88 0f       	add	r24, r24
     e1a:	96 95       	lsr	r25
     e1c:	87 95       	ror	r24
     e1e:	97 f9       	bld	r25, 7
     e20:	08 95       	ret

00000e22 <__fp_split3>:
     e22:	57 fd       	sbrc	r21, 7
     e24:	90 58       	subi	r25, 0x80	; 128
     e26:	44 0f       	add	r20, r20
     e28:	55 1f       	adc	r21, r21
     e2a:	59 f0       	breq	.+22     	; 0xe42 <__fp_splitA+0x10>
     e2c:	5f 3f       	cpi	r21, 0xFF	; 255
     e2e:	71 f0       	breq	.+28     	; 0xe4c <__fp_splitA+0x1a>
     e30:	47 95       	ror	r20

00000e32 <__fp_splitA>:
     e32:	88 0f       	add	r24, r24
     e34:	97 fb       	bst	r25, 7
     e36:	99 1f       	adc	r25, r25
     e38:	61 f0       	breq	.+24     	; 0xe52 <__fp_splitA+0x20>
     e3a:	9f 3f       	cpi	r25, 0xFF	; 255
     e3c:	79 f0       	breq	.+30     	; 0xe5c <__fp_splitA+0x2a>
     e3e:	87 95       	ror	r24
     e40:	08 95       	ret
     e42:	12 16       	cp	r1, r18
     e44:	13 06       	cpc	r1, r19
     e46:	14 06       	cpc	r1, r20
     e48:	55 1f       	adc	r21, r21
     e4a:	f2 cf       	rjmp	.-28     	; 0xe30 <__fp_split3+0xe>
     e4c:	46 95       	lsr	r20
     e4e:	f1 df       	rcall	.-30     	; 0xe32 <__fp_splitA>
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <__fp_splitA+0x30>
     e52:	16 16       	cp	r1, r22
     e54:	17 06       	cpc	r1, r23
     e56:	18 06       	cpc	r1, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	f1 cf       	rjmp	.-30     	; 0xe3e <__fp_splitA+0xc>
     e5c:	86 95       	lsr	r24
     e5e:	71 05       	cpc	r23, r1
     e60:	61 05       	cpc	r22, r1
     e62:	08 94       	sec
     e64:	08 95       	ret

00000e66 <__fp_zero>:
     e66:	e8 94       	clt

00000e68 <__fp_szero>:
     e68:	bb 27       	eor	r27, r27
     e6a:	66 27       	eor	r22, r22
     e6c:	77 27       	eor	r23, r23
     e6e:	cb 01       	movw	r24, r22
     e70:	97 f9       	bld	r25, 7
     e72:	08 95       	ret

00000e74 <__mulsf3>:
     e74:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__mulsf3x>
     e78:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_round>
     e7c:	0e 94 b0 07 	call	0xf60	; 0xf60 <__fp_pscA>
     e80:	38 f0       	brcs	.+14     	; 0xe90 <__mulsf3+0x1c>
     e82:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_pscB>
     e86:	20 f0       	brcs	.+8      	; 0xe90 <__mulsf3+0x1c>
     e88:	95 23       	and	r25, r21
     e8a:	11 f0       	breq	.+4      	; 0xe90 <__mulsf3+0x1c>
     e8c:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__fp_inf>
     e90:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_nan>
     e94:	11 24       	eor	r1, r1
     e96:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__fp_szero>

00000e9a <__mulsf3x>:
     e9a:	0e 94 11 07 	call	0xe22	; 0xe22 <__fp_split3>
     e9e:	70 f3       	brcs	.-36     	; 0xe7c <__mulsf3+0x8>

00000ea0 <__mulsf3_pse>:
     ea0:	95 9f       	mul	r25, r21
     ea2:	c1 f3       	breq	.-16     	; 0xe94 <__mulsf3+0x20>
     ea4:	95 0f       	add	r25, r21
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	55 1f       	adc	r21, r21
     eaa:	62 9f       	mul	r22, r18
     eac:	f0 01       	movw	r30, r0
     eae:	72 9f       	mul	r23, r18
     eb0:	bb 27       	eor	r27, r27
     eb2:	f0 0d       	add	r31, r0
     eb4:	b1 1d       	adc	r27, r1
     eb6:	63 9f       	mul	r22, r19
     eb8:	aa 27       	eor	r26, r26
     eba:	f0 0d       	add	r31, r0
     ebc:	b1 1d       	adc	r27, r1
     ebe:	aa 1f       	adc	r26, r26
     ec0:	64 9f       	mul	r22, r20
     ec2:	66 27       	eor	r22, r22
     ec4:	b0 0d       	add	r27, r0
     ec6:	a1 1d       	adc	r26, r1
     ec8:	66 1f       	adc	r22, r22
     eca:	82 9f       	mul	r24, r18
     ecc:	22 27       	eor	r18, r18
     ece:	b0 0d       	add	r27, r0
     ed0:	a1 1d       	adc	r26, r1
     ed2:	62 1f       	adc	r22, r18
     ed4:	73 9f       	mul	r23, r19
     ed6:	b0 0d       	add	r27, r0
     ed8:	a1 1d       	adc	r26, r1
     eda:	62 1f       	adc	r22, r18
     edc:	83 9f       	mul	r24, r19
     ede:	a0 0d       	add	r26, r0
     ee0:	61 1d       	adc	r22, r1
     ee2:	22 1f       	adc	r18, r18
     ee4:	74 9f       	mul	r23, r20
     ee6:	33 27       	eor	r19, r19
     ee8:	a0 0d       	add	r26, r0
     eea:	61 1d       	adc	r22, r1
     eec:	23 1f       	adc	r18, r19
     eee:	84 9f       	mul	r24, r20
     ef0:	60 0d       	add	r22, r0
     ef2:	21 1d       	adc	r18, r1
     ef4:	82 2f       	mov	r24, r18
     ef6:	76 2f       	mov	r23, r22
     ef8:	6a 2f       	mov	r22, r26
     efa:	11 24       	eor	r1, r1
     efc:	9f 57       	subi	r25, 0x7F	; 127
     efe:	50 40       	sbci	r21, 0x00	; 0
     f00:	9a f0       	brmi	.+38     	; 0xf28 <__mulsf3_pse+0x88>
     f02:	f1 f0       	breq	.+60     	; 0xf40 <__mulsf3_pse+0xa0>
     f04:	88 23       	and	r24, r24
     f06:	4a f0       	brmi	.+18     	; 0xf1a <__mulsf3_pse+0x7a>
     f08:	ee 0f       	add	r30, r30
     f0a:	ff 1f       	adc	r31, r31
     f0c:	bb 1f       	adc	r27, r27
     f0e:	66 1f       	adc	r22, r22
     f10:	77 1f       	adc	r23, r23
     f12:	88 1f       	adc	r24, r24
     f14:	91 50       	subi	r25, 0x01	; 1
     f16:	50 40       	sbci	r21, 0x00	; 0
     f18:	a9 f7       	brne	.-22     	; 0xf04 <__mulsf3_pse+0x64>
     f1a:	9e 3f       	cpi	r25, 0xFE	; 254
     f1c:	51 05       	cpc	r21, r1
     f1e:	80 f0       	brcs	.+32     	; 0xf40 <__mulsf3_pse+0xa0>
     f20:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__fp_inf>
     f24:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__fp_szero>
     f28:	5f 3f       	cpi	r21, 0xFF	; 255
     f2a:	e4 f3       	brlt	.-8      	; 0xf24 <__mulsf3_pse+0x84>
     f2c:	98 3e       	cpi	r25, 0xE8	; 232
     f2e:	d4 f3       	brlt	.-12     	; 0xf24 <__mulsf3_pse+0x84>
     f30:	86 95       	lsr	r24
     f32:	77 95       	ror	r23
     f34:	67 95       	ror	r22
     f36:	b7 95       	ror	r27
     f38:	f7 95       	ror	r31
     f3a:	e7 95       	ror	r30
     f3c:	9f 5f       	subi	r25, 0xFF	; 255
     f3e:	c1 f7       	brne	.-16     	; 0xf30 <__mulsf3_pse+0x90>
     f40:	fe 2b       	or	r31, r30
     f42:	88 0f       	add	r24, r24
     f44:	91 1d       	adc	r25, r1
     f46:	96 95       	lsr	r25
     f48:	87 95       	ror	r24
     f4a:	97 f9       	bld	r25, 7
     f4c:	08 95       	ret

00000f4e <__fp_inf>:
     f4e:	97 f9       	bld	r25, 7
     f50:	9f 67       	ori	r25, 0x7F	; 127
     f52:	80 e8       	ldi	r24, 0x80	; 128
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	08 95       	ret

00000f5a <__fp_nan>:
     f5a:	9f ef       	ldi	r25, 0xFF	; 255
     f5c:	80 ec       	ldi	r24, 0xC0	; 192
     f5e:	08 95       	ret

00000f60 <__fp_pscA>:
     f60:	00 24       	eor	r0, r0
     f62:	0a 94       	dec	r0
     f64:	16 16       	cp	r1, r22
     f66:	17 06       	cpc	r1, r23
     f68:	18 06       	cpc	r1, r24
     f6a:	09 06       	cpc	r0, r25
     f6c:	08 95       	ret

00000f6e <__fp_pscB>:
     f6e:	00 24       	eor	r0, r0
     f70:	0a 94       	dec	r0
     f72:	12 16       	cp	r1, r18
     f74:	13 06       	cpc	r1, r19
     f76:	14 06       	cpc	r1, r20
     f78:	05 06       	cpc	r0, r21
     f7a:	08 95       	ret

00000f7c <__fp_round>:
     f7c:	09 2e       	mov	r0, r25
     f7e:	03 94       	inc	r0
     f80:	00 0c       	add	r0, r0
     f82:	11 f4       	brne	.+4      	; 0xf88 <__fp_round+0xc>
     f84:	88 23       	and	r24, r24
     f86:	52 f0       	brmi	.+20     	; 0xf9c <__fp_round+0x20>
     f88:	bb 0f       	add	r27, r27
     f8a:	40 f4       	brcc	.+16     	; 0xf9c <__fp_round+0x20>
     f8c:	bf 2b       	or	r27, r31
     f8e:	11 f4       	brne	.+4      	; 0xf94 <__fp_round+0x18>
     f90:	60 ff       	sbrs	r22, 0
     f92:	04 c0       	rjmp	.+8      	; 0xf9c <__fp_round+0x20>
     f94:	6f 5f       	subi	r22, 0xFF	; 255
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	8f 4f       	sbci	r24, 0xFF	; 255
     f9a:	9f 4f       	sbci	r25, 0xFF	; 255
     f9c:	08 95       	ret

00000f9e <__udivmodsi4>:
     f9e:	a1 e2       	ldi	r26, 0x21	; 33
     fa0:	1a 2e       	mov	r1, r26
     fa2:	aa 1b       	sub	r26, r26
     fa4:	bb 1b       	sub	r27, r27
     fa6:	fd 01       	movw	r30, r26
     fa8:	0d c0       	rjmp	.+26     	; 0xfc4 <__udivmodsi4_ep>

00000faa <__udivmodsi4_loop>:
     faa:	aa 1f       	adc	r26, r26
     fac:	bb 1f       	adc	r27, r27
     fae:	ee 1f       	adc	r30, r30
     fb0:	ff 1f       	adc	r31, r31
     fb2:	a2 17       	cp	r26, r18
     fb4:	b3 07       	cpc	r27, r19
     fb6:	e4 07       	cpc	r30, r20
     fb8:	f5 07       	cpc	r31, r21
     fba:	20 f0       	brcs	.+8      	; 0xfc4 <__udivmodsi4_ep>
     fbc:	a2 1b       	sub	r26, r18
     fbe:	b3 0b       	sbc	r27, r19
     fc0:	e4 0b       	sbc	r30, r20
     fc2:	f5 0b       	sbc	r31, r21

00000fc4 <__udivmodsi4_ep>:
     fc4:	66 1f       	adc	r22, r22
     fc6:	77 1f       	adc	r23, r23
     fc8:	88 1f       	adc	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	1a 94       	dec	r1
     fce:	69 f7       	brne	.-38     	; 0xfaa <__udivmodsi4_loop>
     fd0:	60 95       	com	r22
     fd2:	70 95       	com	r23
     fd4:	80 95       	com	r24
     fd6:	90 95       	com	r25
     fd8:	9b 01       	movw	r18, r22
     fda:	ac 01       	movw	r20, r24
     fdc:	bd 01       	movw	r22, r26
     fde:	cf 01       	movw	r24, r30
     fe0:	08 95       	ret

00000fe2 <__muluhisi3>:
     fe2:	0e 94 fc 07 	call	0xff8	; 0xff8 <__umulhisi3>
     fe6:	a5 9f       	mul	r26, r21
     fe8:	90 0d       	add	r25, r0
     fea:	b4 9f       	mul	r27, r20
     fec:	90 0d       	add	r25, r0
     fee:	a4 9f       	mul	r26, r20
     ff0:	80 0d       	add	r24, r0
     ff2:	91 1d       	adc	r25, r1
     ff4:	11 24       	eor	r1, r1
     ff6:	08 95       	ret

00000ff8 <__umulhisi3>:
     ff8:	a2 9f       	mul	r26, r18
     ffa:	b0 01       	movw	r22, r0
     ffc:	b3 9f       	mul	r27, r19
     ffe:	c0 01       	movw	r24, r0
    1000:	a3 9f       	mul	r26, r19
    1002:	70 0d       	add	r23, r0
    1004:	81 1d       	adc	r24, r1
    1006:	11 24       	eor	r1, r1
    1008:	91 1d       	adc	r25, r1
    100a:	b2 9f       	mul	r27, r18
    100c:	70 0d       	add	r23, r0
    100e:	81 1d       	adc	r24, r1
    1010:	11 24       	eor	r1, r1
    1012:	91 1d       	adc	r25, r1
    1014:	08 95       	ret

00001016 <sprintf>:
    1016:	ae e0       	ldi	r26, 0x0E	; 14
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e1 e1       	ldi	r30, 0x11	; 17
    101c:	f8 e0       	ldi	r31, 0x08	; 8
    101e:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__prologue_saves__+0x1c>
    1022:	0d 89       	ldd	r16, Y+21	; 0x15
    1024:	1e 89       	ldd	r17, Y+22	; 0x16
    1026:	86 e0       	ldi	r24, 0x06	; 6
    1028:	8c 83       	std	Y+4, r24	; 0x04
    102a:	1a 83       	std	Y+2, r17	; 0x02
    102c:	09 83       	std	Y+1, r16	; 0x01
    102e:	8f ef       	ldi	r24, 0xFF	; 255
    1030:	9f e7       	ldi	r25, 0x7F	; 127
    1032:	9e 83       	std	Y+6, r25	; 0x06
    1034:	8d 83       	std	Y+5, r24	; 0x05
    1036:	ae 01       	movw	r20, r28
    1038:	47 5e       	subi	r20, 0xE7	; 231
    103a:	5f 4f       	sbci	r21, 0xFF	; 255
    103c:	6f 89       	ldd	r22, Y+23	; 0x17
    103e:	78 8d       	ldd	r23, Y+24	; 0x18
    1040:	ce 01       	movw	r24, r28
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	0e 94 2d 08 	call	0x105a	; 0x105a <vfprintf>
    1048:	ef 81       	ldd	r30, Y+7	; 0x07
    104a:	f8 85       	ldd	r31, Y+8	; 0x08
    104c:	e0 0f       	add	r30, r16
    104e:	f1 1f       	adc	r31, r17
    1050:	10 82       	st	Z, r1
    1052:	2e 96       	adiw	r28, 0x0e	; 14
    1054:	e4 e0       	ldi	r30, 0x04	; 4
    1056:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__epilogue_restores__+0x1c>

0000105a <vfprintf>:
    105a:	ab e0       	ldi	r26, 0x0B	; 11
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e3 e3       	ldi	r30, 0x33	; 51
    1060:	f8 e0       	ldi	r31, 0x08	; 8
    1062:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__prologue_saves__>
    1066:	6c 01       	movw	r12, r24
    1068:	7b 01       	movw	r14, r22
    106a:	8a 01       	movw	r16, r20
    106c:	fc 01       	movw	r30, r24
    106e:	17 82       	std	Z+7, r1	; 0x07
    1070:	16 82       	std	Z+6, r1	; 0x06
    1072:	83 81       	ldd	r24, Z+3	; 0x03
    1074:	81 ff       	sbrs	r24, 1
    1076:	cc c1       	rjmp	.+920    	; 0x1410 <vfprintf+0x3b6>
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	3c 01       	movw	r6, r24
    107e:	f6 01       	movw	r30, r12
    1080:	93 81       	ldd	r25, Z+3	; 0x03
    1082:	f7 01       	movw	r30, r14
    1084:	93 fd       	sbrc	r25, 3
    1086:	85 91       	lpm	r24, Z+
    1088:	93 ff       	sbrs	r25, 3
    108a:	81 91       	ld	r24, Z+
    108c:	7f 01       	movw	r14, r30
    108e:	88 23       	and	r24, r24
    1090:	09 f4       	brne	.+2      	; 0x1094 <vfprintf+0x3a>
    1092:	ba c1       	rjmp	.+884    	; 0x1408 <vfprintf+0x3ae>
    1094:	85 32       	cpi	r24, 0x25	; 37
    1096:	39 f4       	brne	.+14     	; 0x10a6 <vfprintf+0x4c>
    1098:	93 fd       	sbrc	r25, 3
    109a:	85 91       	lpm	r24, Z+
    109c:	93 ff       	sbrs	r25, 3
    109e:	81 91       	ld	r24, Z+
    10a0:	7f 01       	movw	r14, r30
    10a2:	85 32       	cpi	r24, 0x25	; 37
    10a4:	29 f4       	brne	.+10     	; 0x10b0 <vfprintf+0x56>
    10a6:	b6 01       	movw	r22, r12
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    10ae:	e7 cf       	rjmp	.-50     	; 0x107e <vfprintf+0x24>
    10b0:	91 2c       	mov	r9, r1
    10b2:	21 2c       	mov	r2, r1
    10b4:	31 2c       	mov	r3, r1
    10b6:	ff e1       	ldi	r31, 0x1F	; 31
    10b8:	f3 15       	cp	r31, r3
    10ba:	d8 f0       	brcs	.+54     	; 0x10f2 <vfprintf+0x98>
    10bc:	8b 32       	cpi	r24, 0x2B	; 43
    10be:	79 f0       	breq	.+30     	; 0x10de <vfprintf+0x84>
    10c0:	38 f4       	brcc	.+14     	; 0x10d0 <vfprintf+0x76>
    10c2:	80 32       	cpi	r24, 0x20	; 32
    10c4:	79 f0       	breq	.+30     	; 0x10e4 <vfprintf+0x8a>
    10c6:	83 32       	cpi	r24, 0x23	; 35
    10c8:	a1 f4       	brne	.+40     	; 0x10f2 <vfprintf+0x98>
    10ca:	23 2d       	mov	r18, r3
    10cc:	20 61       	ori	r18, 0x10	; 16
    10ce:	1d c0       	rjmp	.+58     	; 0x110a <vfprintf+0xb0>
    10d0:	8d 32       	cpi	r24, 0x2D	; 45
    10d2:	61 f0       	breq	.+24     	; 0x10ec <vfprintf+0x92>
    10d4:	80 33       	cpi	r24, 0x30	; 48
    10d6:	69 f4       	brne	.+26     	; 0x10f2 <vfprintf+0x98>
    10d8:	23 2d       	mov	r18, r3
    10da:	21 60       	ori	r18, 0x01	; 1
    10dc:	16 c0       	rjmp	.+44     	; 0x110a <vfprintf+0xb0>
    10de:	83 2d       	mov	r24, r3
    10e0:	82 60       	ori	r24, 0x02	; 2
    10e2:	38 2e       	mov	r3, r24
    10e4:	e3 2d       	mov	r30, r3
    10e6:	e4 60       	ori	r30, 0x04	; 4
    10e8:	3e 2e       	mov	r3, r30
    10ea:	2a c0       	rjmp	.+84     	; 0x1140 <vfprintf+0xe6>
    10ec:	f3 2d       	mov	r31, r3
    10ee:	f8 60       	ori	r31, 0x08	; 8
    10f0:	1d c0       	rjmp	.+58     	; 0x112c <vfprintf+0xd2>
    10f2:	37 fc       	sbrc	r3, 7
    10f4:	2d c0       	rjmp	.+90     	; 0x1150 <vfprintf+0xf6>
    10f6:	20 ed       	ldi	r18, 0xD0	; 208
    10f8:	28 0f       	add	r18, r24
    10fa:	2a 30       	cpi	r18, 0x0A	; 10
    10fc:	40 f0       	brcs	.+16     	; 0x110e <vfprintf+0xb4>
    10fe:	8e 32       	cpi	r24, 0x2E	; 46
    1100:	b9 f4       	brne	.+46     	; 0x1130 <vfprintf+0xd6>
    1102:	36 fc       	sbrc	r3, 6
    1104:	81 c1       	rjmp	.+770    	; 0x1408 <vfprintf+0x3ae>
    1106:	23 2d       	mov	r18, r3
    1108:	20 64       	ori	r18, 0x40	; 64
    110a:	32 2e       	mov	r3, r18
    110c:	19 c0       	rjmp	.+50     	; 0x1140 <vfprintf+0xe6>
    110e:	36 fe       	sbrs	r3, 6
    1110:	06 c0       	rjmp	.+12     	; 0x111e <vfprintf+0xc4>
    1112:	8a e0       	ldi	r24, 0x0A	; 10
    1114:	98 9e       	mul	r9, r24
    1116:	20 0d       	add	r18, r0
    1118:	11 24       	eor	r1, r1
    111a:	92 2e       	mov	r9, r18
    111c:	11 c0       	rjmp	.+34     	; 0x1140 <vfprintf+0xe6>
    111e:	ea e0       	ldi	r30, 0x0A	; 10
    1120:	2e 9e       	mul	r2, r30
    1122:	20 0d       	add	r18, r0
    1124:	11 24       	eor	r1, r1
    1126:	22 2e       	mov	r2, r18
    1128:	f3 2d       	mov	r31, r3
    112a:	f0 62       	ori	r31, 0x20	; 32
    112c:	3f 2e       	mov	r3, r31
    112e:	08 c0       	rjmp	.+16     	; 0x1140 <vfprintf+0xe6>
    1130:	8c 36       	cpi	r24, 0x6C	; 108
    1132:	21 f4       	brne	.+8      	; 0x113c <vfprintf+0xe2>
    1134:	83 2d       	mov	r24, r3
    1136:	80 68       	ori	r24, 0x80	; 128
    1138:	38 2e       	mov	r3, r24
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <vfprintf+0xe6>
    113c:	88 36       	cpi	r24, 0x68	; 104
    113e:	41 f4       	brne	.+16     	; 0x1150 <vfprintf+0xf6>
    1140:	f7 01       	movw	r30, r14
    1142:	93 fd       	sbrc	r25, 3
    1144:	85 91       	lpm	r24, Z+
    1146:	93 ff       	sbrs	r25, 3
    1148:	81 91       	ld	r24, Z+
    114a:	7f 01       	movw	r14, r30
    114c:	81 11       	cpse	r24, r1
    114e:	b3 cf       	rjmp	.-154    	; 0x10b6 <vfprintf+0x5c>
    1150:	98 2f       	mov	r25, r24
    1152:	9f 7d       	andi	r25, 0xDF	; 223
    1154:	95 54       	subi	r25, 0x45	; 69
    1156:	93 30       	cpi	r25, 0x03	; 3
    1158:	28 f4       	brcc	.+10     	; 0x1164 <vfprintf+0x10a>
    115a:	0c 5f       	subi	r16, 0xFC	; 252
    115c:	1f 4f       	sbci	r17, 0xFF	; 255
    115e:	9f e3       	ldi	r25, 0x3F	; 63
    1160:	99 83       	std	Y+1, r25	; 0x01
    1162:	0d c0       	rjmp	.+26     	; 0x117e <vfprintf+0x124>
    1164:	83 36       	cpi	r24, 0x63	; 99
    1166:	31 f0       	breq	.+12     	; 0x1174 <vfprintf+0x11a>
    1168:	83 37       	cpi	r24, 0x73	; 115
    116a:	71 f0       	breq	.+28     	; 0x1188 <vfprintf+0x12e>
    116c:	83 35       	cpi	r24, 0x53	; 83
    116e:	09 f0       	breq	.+2      	; 0x1172 <vfprintf+0x118>
    1170:	59 c0       	rjmp	.+178    	; 0x1224 <vfprintf+0x1ca>
    1172:	21 c0       	rjmp	.+66     	; 0x11b6 <vfprintf+0x15c>
    1174:	f8 01       	movw	r30, r16
    1176:	80 81       	ld	r24, Z
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	0e 5f       	subi	r16, 0xFE	; 254
    117c:	1f 4f       	sbci	r17, 0xFF	; 255
    117e:	88 24       	eor	r8, r8
    1180:	83 94       	inc	r8
    1182:	91 2c       	mov	r9, r1
    1184:	53 01       	movw	r10, r6
    1186:	13 c0       	rjmp	.+38     	; 0x11ae <vfprintf+0x154>
    1188:	28 01       	movw	r4, r16
    118a:	f2 e0       	ldi	r31, 0x02	; 2
    118c:	4f 0e       	add	r4, r31
    118e:	51 1c       	adc	r5, r1
    1190:	f8 01       	movw	r30, r16
    1192:	a0 80       	ld	r10, Z
    1194:	b1 80       	ldd	r11, Z+1	; 0x01
    1196:	36 fe       	sbrs	r3, 6
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <vfprintf+0x146>
    119a:	69 2d       	mov	r22, r9
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <vfprintf+0x14a>
    11a0:	6f ef       	ldi	r22, 0xFF	; 255
    11a2:	7f ef       	ldi	r23, 0xFF	; 255
    11a4:	c5 01       	movw	r24, r10
    11a6:	0e 94 19 0a 	call	0x1432	; 0x1432 <strnlen>
    11aa:	4c 01       	movw	r8, r24
    11ac:	82 01       	movw	r16, r4
    11ae:	f3 2d       	mov	r31, r3
    11b0:	ff 77       	andi	r31, 0x7F	; 127
    11b2:	3f 2e       	mov	r3, r31
    11b4:	16 c0       	rjmp	.+44     	; 0x11e2 <vfprintf+0x188>
    11b6:	28 01       	movw	r4, r16
    11b8:	22 e0       	ldi	r18, 0x02	; 2
    11ba:	42 0e       	add	r4, r18
    11bc:	51 1c       	adc	r5, r1
    11be:	f8 01       	movw	r30, r16
    11c0:	a0 80       	ld	r10, Z
    11c2:	b1 80       	ldd	r11, Z+1	; 0x01
    11c4:	36 fe       	sbrs	r3, 6
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <vfprintf+0x174>
    11c8:	69 2d       	mov	r22, r9
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <vfprintf+0x178>
    11ce:	6f ef       	ldi	r22, 0xFF	; 255
    11d0:	7f ef       	ldi	r23, 0xFF	; 255
    11d2:	c5 01       	movw	r24, r10
    11d4:	0e 94 0e 0a 	call	0x141c	; 0x141c <strnlen_P>
    11d8:	4c 01       	movw	r8, r24
    11da:	f3 2d       	mov	r31, r3
    11dc:	f0 68       	ori	r31, 0x80	; 128
    11de:	3f 2e       	mov	r3, r31
    11e0:	82 01       	movw	r16, r4
    11e2:	33 fc       	sbrc	r3, 3
    11e4:	1b c0       	rjmp	.+54     	; 0x121c <vfprintf+0x1c2>
    11e6:	82 2d       	mov	r24, r2
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	88 16       	cp	r8, r24
    11ec:	99 06       	cpc	r9, r25
    11ee:	b0 f4       	brcc	.+44     	; 0x121c <vfprintf+0x1c2>
    11f0:	b6 01       	movw	r22, r12
    11f2:	80 e2       	ldi	r24, 0x20	; 32
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    11fa:	2a 94       	dec	r2
    11fc:	f4 cf       	rjmp	.-24     	; 0x11e6 <vfprintf+0x18c>
    11fe:	f5 01       	movw	r30, r10
    1200:	37 fc       	sbrc	r3, 7
    1202:	85 91       	lpm	r24, Z+
    1204:	37 fe       	sbrs	r3, 7
    1206:	81 91       	ld	r24, Z+
    1208:	5f 01       	movw	r10, r30
    120a:	b6 01       	movw	r22, r12
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    1212:	21 10       	cpse	r2, r1
    1214:	2a 94       	dec	r2
    1216:	21 e0       	ldi	r18, 0x01	; 1
    1218:	82 1a       	sub	r8, r18
    121a:	91 08       	sbc	r9, r1
    121c:	81 14       	cp	r8, r1
    121e:	91 04       	cpc	r9, r1
    1220:	71 f7       	brne	.-36     	; 0x11fe <vfprintf+0x1a4>
    1222:	e8 c0       	rjmp	.+464    	; 0x13f4 <vfprintf+0x39a>
    1224:	84 36       	cpi	r24, 0x64	; 100
    1226:	11 f0       	breq	.+4      	; 0x122c <vfprintf+0x1d2>
    1228:	89 36       	cpi	r24, 0x69	; 105
    122a:	41 f5       	brne	.+80     	; 0x127c <vfprintf+0x222>
    122c:	f8 01       	movw	r30, r16
    122e:	37 fe       	sbrs	r3, 7
    1230:	07 c0       	rjmp	.+14     	; 0x1240 <vfprintf+0x1e6>
    1232:	60 81       	ld	r22, Z
    1234:	71 81       	ldd	r23, Z+1	; 0x01
    1236:	82 81       	ldd	r24, Z+2	; 0x02
    1238:	93 81       	ldd	r25, Z+3	; 0x03
    123a:	0c 5f       	subi	r16, 0xFC	; 252
    123c:	1f 4f       	sbci	r17, 0xFF	; 255
    123e:	08 c0       	rjmp	.+16     	; 0x1250 <vfprintf+0x1f6>
    1240:	60 81       	ld	r22, Z
    1242:	71 81       	ldd	r23, Z+1	; 0x01
    1244:	07 2e       	mov	r0, r23
    1246:	00 0c       	add	r0, r0
    1248:	88 0b       	sbc	r24, r24
    124a:	99 0b       	sbc	r25, r25
    124c:	0e 5f       	subi	r16, 0xFE	; 254
    124e:	1f 4f       	sbci	r17, 0xFF	; 255
    1250:	f3 2d       	mov	r31, r3
    1252:	ff 76       	andi	r31, 0x6F	; 111
    1254:	3f 2e       	mov	r3, r31
    1256:	97 ff       	sbrs	r25, 7
    1258:	09 c0       	rjmp	.+18     	; 0x126c <vfprintf+0x212>
    125a:	90 95       	com	r25
    125c:	80 95       	com	r24
    125e:	70 95       	com	r23
    1260:	61 95       	neg	r22
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	8f 4f       	sbci	r24, 0xFF	; 255
    1266:	9f 4f       	sbci	r25, 0xFF	; 255
    1268:	f0 68       	ori	r31, 0x80	; 128
    126a:	3f 2e       	mov	r3, r31
    126c:	2a e0       	ldi	r18, 0x0A	; 10
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	a3 01       	movw	r20, r6
    1272:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__ultoa_invert>
    1276:	88 2e       	mov	r8, r24
    1278:	86 18       	sub	r8, r6
    127a:	45 c0       	rjmp	.+138    	; 0x1306 <vfprintf+0x2ac>
    127c:	85 37       	cpi	r24, 0x75	; 117
    127e:	31 f4       	brne	.+12     	; 0x128c <vfprintf+0x232>
    1280:	23 2d       	mov	r18, r3
    1282:	2f 7e       	andi	r18, 0xEF	; 239
    1284:	b2 2e       	mov	r11, r18
    1286:	2a e0       	ldi	r18, 0x0A	; 10
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	25 c0       	rjmp	.+74     	; 0x12d6 <vfprintf+0x27c>
    128c:	93 2d       	mov	r25, r3
    128e:	99 7f       	andi	r25, 0xF9	; 249
    1290:	b9 2e       	mov	r11, r25
    1292:	8f 36       	cpi	r24, 0x6F	; 111
    1294:	c1 f0       	breq	.+48     	; 0x12c6 <vfprintf+0x26c>
    1296:	18 f4       	brcc	.+6      	; 0x129e <vfprintf+0x244>
    1298:	88 35       	cpi	r24, 0x58	; 88
    129a:	79 f0       	breq	.+30     	; 0x12ba <vfprintf+0x260>
    129c:	b5 c0       	rjmp	.+362    	; 0x1408 <vfprintf+0x3ae>
    129e:	80 37       	cpi	r24, 0x70	; 112
    12a0:	19 f0       	breq	.+6      	; 0x12a8 <vfprintf+0x24e>
    12a2:	88 37       	cpi	r24, 0x78	; 120
    12a4:	21 f0       	breq	.+8      	; 0x12ae <vfprintf+0x254>
    12a6:	b0 c0       	rjmp	.+352    	; 0x1408 <vfprintf+0x3ae>
    12a8:	e9 2f       	mov	r30, r25
    12aa:	e0 61       	ori	r30, 0x10	; 16
    12ac:	be 2e       	mov	r11, r30
    12ae:	b4 fe       	sbrs	r11, 4
    12b0:	0d c0       	rjmp	.+26     	; 0x12cc <vfprintf+0x272>
    12b2:	fb 2d       	mov	r31, r11
    12b4:	f4 60       	ori	r31, 0x04	; 4
    12b6:	bf 2e       	mov	r11, r31
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <vfprintf+0x272>
    12ba:	34 fe       	sbrs	r3, 4
    12bc:	0a c0       	rjmp	.+20     	; 0x12d2 <vfprintf+0x278>
    12be:	29 2f       	mov	r18, r25
    12c0:	26 60       	ori	r18, 0x06	; 6
    12c2:	b2 2e       	mov	r11, r18
    12c4:	06 c0       	rjmp	.+12     	; 0x12d2 <vfprintf+0x278>
    12c6:	28 e0       	ldi	r18, 0x08	; 8
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <vfprintf+0x27c>
    12cc:	20 e1       	ldi	r18, 0x10	; 16
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <vfprintf+0x27c>
    12d2:	20 e1       	ldi	r18, 0x10	; 16
    12d4:	32 e0       	ldi	r19, 0x02	; 2
    12d6:	f8 01       	movw	r30, r16
    12d8:	b7 fe       	sbrs	r11, 7
    12da:	07 c0       	rjmp	.+14     	; 0x12ea <vfprintf+0x290>
    12dc:	60 81       	ld	r22, Z
    12de:	71 81       	ldd	r23, Z+1	; 0x01
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	93 81       	ldd	r25, Z+3	; 0x03
    12e4:	0c 5f       	subi	r16, 0xFC	; 252
    12e6:	1f 4f       	sbci	r17, 0xFF	; 255
    12e8:	06 c0       	rjmp	.+12     	; 0x12f6 <vfprintf+0x29c>
    12ea:	60 81       	ld	r22, Z
    12ec:	71 81       	ldd	r23, Z+1	; 0x01
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 5f       	subi	r16, 0xFE	; 254
    12f4:	1f 4f       	sbci	r17, 0xFF	; 255
    12f6:	a3 01       	movw	r20, r6
    12f8:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__ultoa_invert>
    12fc:	88 2e       	mov	r8, r24
    12fe:	86 18       	sub	r8, r6
    1300:	fb 2d       	mov	r31, r11
    1302:	ff 77       	andi	r31, 0x7F	; 127
    1304:	3f 2e       	mov	r3, r31
    1306:	36 fe       	sbrs	r3, 6
    1308:	0d c0       	rjmp	.+26     	; 0x1324 <vfprintf+0x2ca>
    130a:	23 2d       	mov	r18, r3
    130c:	2e 7f       	andi	r18, 0xFE	; 254
    130e:	a2 2e       	mov	r10, r18
    1310:	89 14       	cp	r8, r9
    1312:	58 f4       	brcc	.+22     	; 0x132a <vfprintf+0x2d0>
    1314:	34 fe       	sbrs	r3, 4
    1316:	0b c0       	rjmp	.+22     	; 0x132e <vfprintf+0x2d4>
    1318:	32 fc       	sbrc	r3, 2
    131a:	09 c0       	rjmp	.+18     	; 0x132e <vfprintf+0x2d4>
    131c:	83 2d       	mov	r24, r3
    131e:	8e 7e       	andi	r24, 0xEE	; 238
    1320:	a8 2e       	mov	r10, r24
    1322:	05 c0       	rjmp	.+10     	; 0x132e <vfprintf+0x2d4>
    1324:	b8 2c       	mov	r11, r8
    1326:	a3 2c       	mov	r10, r3
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <vfprintf+0x2d6>
    132a:	b8 2c       	mov	r11, r8
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <vfprintf+0x2d6>
    132e:	b9 2c       	mov	r11, r9
    1330:	a4 fe       	sbrs	r10, 4
    1332:	0f c0       	rjmp	.+30     	; 0x1352 <vfprintf+0x2f8>
    1334:	fe 01       	movw	r30, r28
    1336:	e8 0d       	add	r30, r8
    1338:	f1 1d       	adc	r31, r1
    133a:	80 81       	ld	r24, Z
    133c:	80 33       	cpi	r24, 0x30	; 48
    133e:	21 f4       	brne	.+8      	; 0x1348 <vfprintf+0x2ee>
    1340:	9a 2d       	mov	r25, r10
    1342:	99 7e       	andi	r25, 0xE9	; 233
    1344:	a9 2e       	mov	r10, r25
    1346:	09 c0       	rjmp	.+18     	; 0x135a <vfprintf+0x300>
    1348:	a2 fe       	sbrs	r10, 2
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <vfprintf+0x2fe>
    134c:	b3 94       	inc	r11
    134e:	b3 94       	inc	r11
    1350:	04 c0       	rjmp	.+8      	; 0x135a <vfprintf+0x300>
    1352:	8a 2d       	mov	r24, r10
    1354:	86 78       	andi	r24, 0x86	; 134
    1356:	09 f0       	breq	.+2      	; 0x135a <vfprintf+0x300>
    1358:	b3 94       	inc	r11
    135a:	a3 fc       	sbrc	r10, 3
    135c:	11 c0       	rjmp	.+34     	; 0x1380 <vfprintf+0x326>
    135e:	a0 fe       	sbrs	r10, 0
    1360:	06 c0       	rjmp	.+12     	; 0x136e <vfprintf+0x314>
    1362:	b2 14       	cp	r11, r2
    1364:	88 f4       	brcc	.+34     	; 0x1388 <vfprintf+0x32e>
    1366:	28 0c       	add	r2, r8
    1368:	92 2c       	mov	r9, r2
    136a:	9b 18       	sub	r9, r11
    136c:	0e c0       	rjmp	.+28     	; 0x138a <vfprintf+0x330>
    136e:	b2 14       	cp	r11, r2
    1370:	60 f4       	brcc	.+24     	; 0x138a <vfprintf+0x330>
    1372:	b6 01       	movw	r22, r12
    1374:	80 e2       	ldi	r24, 0x20	; 32
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    137c:	b3 94       	inc	r11
    137e:	f7 cf       	rjmp	.-18     	; 0x136e <vfprintf+0x314>
    1380:	b2 14       	cp	r11, r2
    1382:	18 f4       	brcc	.+6      	; 0x138a <vfprintf+0x330>
    1384:	2b 18       	sub	r2, r11
    1386:	02 c0       	rjmp	.+4      	; 0x138c <vfprintf+0x332>
    1388:	98 2c       	mov	r9, r8
    138a:	21 2c       	mov	r2, r1
    138c:	a4 fe       	sbrs	r10, 4
    138e:	10 c0       	rjmp	.+32     	; 0x13b0 <vfprintf+0x356>
    1390:	b6 01       	movw	r22, r12
    1392:	80 e3       	ldi	r24, 0x30	; 48
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    139a:	a2 fe       	sbrs	r10, 2
    139c:	17 c0       	rjmp	.+46     	; 0x13cc <vfprintf+0x372>
    139e:	a1 fc       	sbrc	r10, 1
    13a0:	03 c0       	rjmp	.+6      	; 0x13a8 <vfprintf+0x34e>
    13a2:	88 e7       	ldi	r24, 0x78	; 120
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <vfprintf+0x352>
    13a8:	88 e5       	ldi	r24, 0x58	; 88
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	b6 01       	movw	r22, r12
    13ae:	0c c0       	rjmp	.+24     	; 0x13c8 <vfprintf+0x36e>
    13b0:	8a 2d       	mov	r24, r10
    13b2:	86 78       	andi	r24, 0x86	; 134
    13b4:	59 f0       	breq	.+22     	; 0x13cc <vfprintf+0x372>
    13b6:	a1 fe       	sbrs	r10, 1
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <vfprintf+0x364>
    13ba:	8b e2       	ldi	r24, 0x2B	; 43
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <vfprintf+0x366>
    13be:	80 e2       	ldi	r24, 0x20	; 32
    13c0:	a7 fc       	sbrc	r10, 7
    13c2:	8d e2       	ldi	r24, 0x2D	; 45
    13c4:	b6 01       	movw	r22, r12
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    13cc:	89 14       	cp	r8, r9
    13ce:	38 f4       	brcc	.+14     	; 0x13de <vfprintf+0x384>
    13d0:	b6 01       	movw	r22, r12
    13d2:	80 e3       	ldi	r24, 0x30	; 48
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    13da:	9a 94       	dec	r9
    13dc:	f7 cf       	rjmp	.-18     	; 0x13cc <vfprintf+0x372>
    13de:	8a 94       	dec	r8
    13e0:	f3 01       	movw	r30, r6
    13e2:	e8 0d       	add	r30, r8
    13e4:	f1 1d       	adc	r31, r1
    13e6:	80 81       	ld	r24, Z
    13e8:	b6 01       	movw	r22, r12
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    13f0:	81 10       	cpse	r8, r1
    13f2:	f5 cf       	rjmp	.-22     	; 0x13de <vfprintf+0x384>
    13f4:	22 20       	and	r2, r2
    13f6:	09 f4       	brne	.+2      	; 0x13fa <vfprintf+0x3a0>
    13f8:	42 ce       	rjmp	.-892    	; 0x107e <vfprintf+0x24>
    13fa:	b6 01       	movw	r22, r12
    13fc:	80 e2       	ldi	r24, 0x20	; 32
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 24 0a 	call	0x1448	; 0x1448 <fputc>
    1404:	2a 94       	dec	r2
    1406:	f6 cf       	rjmp	.-20     	; 0x13f4 <vfprintf+0x39a>
    1408:	f6 01       	movw	r30, r12
    140a:	86 81       	ldd	r24, Z+6	; 0x06
    140c:	97 81       	ldd	r25, Z+7	; 0x07
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <vfprintf+0x3ba>
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	9f ef       	ldi	r25, 0xFF	; 255
    1414:	2b 96       	adiw	r28, 0x0b	; 11
    1416:	e2 e1       	ldi	r30, 0x12	; 18
    1418:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__epilogue_restores__>

0000141c <strnlen_P>:
    141c:	fc 01       	movw	r30, r24
    141e:	05 90       	lpm	r0, Z+
    1420:	61 50       	subi	r22, 0x01	; 1
    1422:	70 40       	sbci	r23, 0x00	; 0
    1424:	01 10       	cpse	r0, r1
    1426:	d8 f7       	brcc	.-10     	; 0x141e <strnlen_P+0x2>
    1428:	80 95       	com	r24
    142a:	90 95       	com	r25
    142c:	8e 0f       	add	r24, r30
    142e:	9f 1f       	adc	r25, r31
    1430:	08 95       	ret

00001432 <strnlen>:
    1432:	fc 01       	movw	r30, r24
    1434:	61 50       	subi	r22, 0x01	; 1
    1436:	70 40       	sbci	r23, 0x00	; 0
    1438:	01 90       	ld	r0, Z+
    143a:	01 10       	cpse	r0, r1
    143c:	d8 f7       	brcc	.-10     	; 0x1434 <strnlen+0x2>
    143e:	80 95       	com	r24
    1440:	90 95       	com	r25
    1442:	8e 0f       	add	r24, r30
    1444:	9f 1f       	adc	r25, r31
    1446:	08 95       	ret

00001448 <fputc>:
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	fb 01       	movw	r30, r22
    1452:	23 81       	ldd	r18, Z+3	; 0x03
    1454:	21 fd       	sbrc	r18, 1
    1456:	03 c0       	rjmp	.+6      	; 0x145e <fputc+0x16>
    1458:	8f ef       	ldi	r24, 0xFF	; 255
    145a:	9f ef       	ldi	r25, 0xFF	; 255
    145c:	2c c0       	rjmp	.+88     	; 0x14b6 <fputc+0x6e>
    145e:	22 ff       	sbrs	r18, 2
    1460:	16 c0       	rjmp	.+44     	; 0x148e <fputc+0x46>
    1462:	46 81       	ldd	r20, Z+6	; 0x06
    1464:	57 81       	ldd	r21, Z+7	; 0x07
    1466:	24 81       	ldd	r18, Z+4	; 0x04
    1468:	35 81       	ldd	r19, Z+5	; 0x05
    146a:	42 17       	cp	r20, r18
    146c:	53 07       	cpc	r21, r19
    146e:	44 f4       	brge	.+16     	; 0x1480 <fputc+0x38>
    1470:	a0 81       	ld	r26, Z
    1472:	b1 81       	ldd	r27, Z+1	; 0x01
    1474:	9d 01       	movw	r18, r26
    1476:	2f 5f       	subi	r18, 0xFF	; 255
    1478:	3f 4f       	sbci	r19, 0xFF	; 255
    147a:	31 83       	std	Z+1, r19	; 0x01
    147c:	20 83       	st	Z, r18
    147e:	8c 93       	st	X, r24
    1480:	26 81       	ldd	r18, Z+6	; 0x06
    1482:	37 81       	ldd	r19, Z+7	; 0x07
    1484:	2f 5f       	subi	r18, 0xFF	; 255
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	37 83       	std	Z+7, r19	; 0x07
    148a:	26 83       	std	Z+6, r18	; 0x06
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <fputc+0x6e>
    148e:	8b 01       	movw	r16, r22
    1490:	ec 01       	movw	r28, r24
    1492:	fb 01       	movw	r30, r22
    1494:	00 84       	ldd	r0, Z+8	; 0x08
    1496:	f1 85       	ldd	r31, Z+9	; 0x09
    1498:	e0 2d       	mov	r30, r0
    149a:	09 95       	icall
    149c:	89 2b       	or	r24, r25
    149e:	e1 f6       	brne	.-72     	; 0x1458 <fputc+0x10>
    14a0:	d8 01       	movw	r26, r16
    14a2:	16 96       	adiw	r26, 0x06	; 6
    14a4:	8d 91       	ld	r24, X+
    14a6:	9c 91       	ld	r25, X
    14a8:	17 97       	sbiw	r26, 0x07	; 7
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	17 96       	adiw	r26, 0x07	; 7
    14ae:	9c 93       	st	X, r25
    14b0:	8e 93       	st	-X, r24
    14b2:	16 97       	sbiw	r26, 0x06	; 6
    14b4:	ce 01       	movw	r24, r28
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	08 95       	ret

000014c0 <__ultoa_invert>:
    14c0:	fa 01       	movw	r30, r20
    14c2:	aa 27       	eor	r26, r26
    14c4:	28 30       	cpi	r18, 0x08	; 8
    14c6:	51 f1       	breq	.+84     	; 0x151c <__ultoa_invert+0x5c>
    14c8:	20 31       	cpi	r18, 0x10	; 16
    14ca:	81 f1       	breq	.+96     	; 0x152c <__ultoa_invert+0x6c>
    14cc:	e8 94       	clt
    14ce:	6f 93       	push	r22
    14d0:	6e 7f       	andi	r22, 0xFE	; 254
    14d2:	6e 5f       	subi	r22, 0xFE	; 254
    14d4:	7f 4f       	sbci	r23, 0xFF	; 255
    14d6:	8f 4f       	sbci	r24, 0xFF	; 255
    14d8:	9f 4f       	sbci	r25, 0xFF	; 255
    14da:	af 4f       	sbci	r26, 0xFF	; 255
    14dc:	b1 e0       	ldi	r27, 0x01	; 1
    14de:	3e d0       	rcall	.+124    	; 0x155c <__ultoa_invert+0x9c>
    14e0:	b4 e0       	ldi	r27, 0x04	; 4
    14e2:	3c d0       	rcall	.+120    	; 0x155c <__ultoa_invert+0x9c>
    14e4:	67 0f       	add	r22, r23
    14e6:	78 1f       	adc	r23, r24
    14e8:	89 1f       	adc	r24, r25
    14ea:	9a 1f       	adc	r25, r26
    14ec:	a1 1d       	adc	r26, r1
    14ee:	68 0f       	add	r22, r24
    14f0:	79 1f       	adc	r23, r25
    14f2:	8a 1f       	adc	r24, r26
    14f4:	91 1d       	adc	r25, r1
    14f6:	a1 1d       	adc	r26, r1
    14f8:	6a 0f       	add	r22, r26
    14fa:	71 1d       	adc	r23, r1
    14fc:	81 1d       	adc	r24, r1
    14fe:	91 1d       	adc	r25, r1
    1500:	a1 1d       	adc	r26, r1
    1502:	20 d0       	rcall	.+64     	; 0x1544 <__ultoa_invert+0x84>
    1504:	09 f4       	brne	.+2      	; 0x1508 <__ultoa_invert+0x48>
    1506:	68 94       	set
    1508:	3f 91       	pop	r19
    150a:	2a e0       	ldi	r18, 0x0A	; 10
    150c:	26 9f       	mul	r18, r22
    150e:	11 24       	eor	r1, r1
    1510:	30 19       	sub	r19, r0
    1512:	30 5d       	subi	r19, 0xD0	; 208
    1514:	31 93       	st	Z+, r19
    1516:	de f6       	brtc	.-74     	; 0x14ce <__ultoa_invert+0xe>
    1518:	cf 01       	movw	r24, r30
    151a:	08 95       	ret
    151c:	46 2f       	mov	r20, r22
    151e:	47 70       	andi	r20, 0x07	; 7
    1520:	40 5d       	subi	r20, 0xD0	; 208
    1522:	41 93       	st	Z+, r20
    1524:	b3 e0       	ldi	r27, 0x03	; 3
    1526:	0f d0       	rcall	.+30     	; 0x1546 <__ultoa_invert+0x86>
    1528:	c9 f7       	brne	.-14     	; 0x151c <__ultoa_invert+0x5c>
    152a:	f6 cf       	rjmp	.-20     	; 0x1518 <__ultoa_invert+0x58>
    152c:	46 2f       	mov	r20, r22
    152e:	4f 70       	andi	r20, 0x0F	; 15
    1530:	40 5d       	subi	r20, 0xD0	; 208
    1532:	4a 33       	cpi	r20, 0x3A	; 58
    1534:	18 f0       	brcs	.+6      	; 0x153c <__ultoa_invert+0x7c>
    1536:	49 5d       	subi	r20, 0xD9	; 217
    1538:	31 fd       	sbrc	r19, 1
    153a:	40 52       	subi	r20, 0x20	; 32
    153c:	41 93       	st	Z+, r20
    153e:	02 d0       	rcall	.+4      	; 0x1544 <__ultoa_invert+0x84>
    1540:	a9 f7       	brne	.-22     	; 0x152c <__ultoa_invert+0x6c>
    1542:	ea cf       	rjmp	.-44     	; 0x1518 <__ultoa_invert+0x58>
    1544:	b4 e0       	ldi	r27, 0x04	; 4
    1546:	a6 95       	lsr	r26
    1548:	97 95       	ror	r25
    154a:	87 95       	ror	r24
    154c:	77 95       	ror	r23
    154e:	67 95       	ror	r22
    1550:	ba 95       	dec	r27
    1552:	c9 f7       	brne	.-14     	; 0x1546 <__ultoa_invert+0x86>
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	61 05       	cpc	r22, r1
    1558:	71 05       	cpc	r23, r1
    155a:	08 95       	ret
    155c:	9b 01       	movw	r18, r22
    155e:	ac 01       	movw	r20, r24
    1560:	0a 2e       	mov	r0, r26
    1562:	06 94       	lsr	r0
    1564:	57 95       	ror	r21
    1566:	47 95       	ror	r20
    1568:	37 95       	ror	r19
    156a:	27 95       	ror	r18
    156c:	ba 95       	dec	r27
    156e:	c9 f7       	brne	.-14     	; 0x1562 <__ultoa_invert+0xa2>
    1570:	62 0f       	add	r22, r18
    1572:	73 1f       	adc	r23, r19
    1574:	84 1f       	adc	r24, r20
    1576:	95 1f       	adc	r25, r21
    1578:	a0 1d       	adc	r26, r0
    157a:	08 95       	ret

0000157c <__prologue_saves__>:
    157c:	2f 92       	push	r2
    157e:	3f 92       	push	r3
    1580:	4f 92       	push	r4
    1582:	5f 92       	push	r5
    1584:	6f 92       	push	r6
    1586:	7f 92       	push	r7
    1588:	8f 92       	push	r8
    158a:	9f 92       	push	r9
    158c:	af 92       	push	r10
    158e:	bf 92       	push	r11
    1590:	cf 92       	push	r12
    1592:	df 92       	push	r13
    1594:	ef 92       	push	r14
    1596:	ff 92       	push	r15
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	ca 1b       	sub	r28, r26
    15a6:	db 0b       	sbc	r29, r27
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	09 94       	ijmp

000015b4 <__epilogue_restores__>:
    15b4:	2a 88       	ldd	r2, Y+18	; 0x12
    15b6:	39 88       	ldd	r3, Y+17	; 0x11
    15b8:	48 88       	ldd	r4, Y+16	; 0x10
    15ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    15bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    15be:	7d 84       	ldd	r7, Y+13	; 0x0d
    15c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    15c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    15c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    15c6:	b9 84       	ldd	r11, Y+9	; 0x09
    15c8:	c8 84       	ldd	r12, Y+8	; 0x08
    15ca:	df 80       	ldd	r13, Y+7	; 0x07
    15cc:	ee 80       	ldd	r14, Y+6	; 0x06
    15ce:	fd 80       	ldd	r15, Y+5	; 0x05
    15d0:	0c 81       	ldd	r16, Y+4	; 0x04
    15d2:	1b 81       	ldd	r17, Y+3	; 0x03
    15d4:	aa 81       	ldd	r26, Y+2	; 0x02
    15d6:	b9 81       	ldd	r27, Y+1	; 0x01
    15d8:	ce 0f       	add	r28, r30
    15da:	d1 1d       	adc	r29, r1
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	ed 01       	movw	r28, r26
    15e8:	08 95       	ret

000015ea <_exit>:
    15ea:	f8 94       	cli

000015ec <__stop_program>:
    15ec:	ff cf       	rjmp	.-2      	; 0x15ec <__stop_program>
