
backlight_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  0000165c  000016f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000165c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009e  00800218  00800218  00001808  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028db  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012a7  00000000  00000000  000043c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000157e  00000000  00000000  0000566e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  00006bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b73  00000000  00000000  000071bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001827  00000000  00000000  00007d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00009556  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__vector_1>
       8:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__vector_2>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__vector_5>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__vector_18>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 98 04 	jmp	0x930	; 0x930 <__vector_20>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_21>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 24 03 	jmp	0x648	; 0x648 <__vector_40>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	12 e0       	ldi	r17, 0x02	; 2
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ec e5       	ldi	r30, 0x5C	; 92
      c8:	f6 e1       	ldi	r31, 0x16	; 22
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a8 31       	cpi	r26, 0x18	; 24
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	22 e0       	ldi	r18, 0x02	; 2
      d8:	a8 e1       	ldi	r26, 0x18	; 24
      da:	b2 e0       	ldi	r27, 0x02	; 2
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a6 3b       	cpi	r26, 0xB6	; 182
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 51 05 	call	0xaa2	; 0xaa2 <main>
      ea:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_21>:

uint16_t get_adc(uint8_t source){
	adc_pin_select(source);
	//uint16_t adc_tmp_data = adc_convert();
	return adc_convert();
}
      f2:	1f 92       	push	r1
      f4:	0f 92       	push	r0
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	0f 92       	push	r0
      fa:	11 24       	eor	r1, r1
      fc:	8f 93       	push	r24
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     104:	8f 91       	pop	r24
     106:	0f 90       	pop	r0
     108:	0f be       	out	0x3f, r0	; 63
     10a:	0f 90       	pop	r0
     10c:	1f 90       	pop	r1
     10e:	18 95       	reti

00000110 <adc_init>:
     110:	ec e7       	ldi	r30, 0x7C	; 124
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	80 6c       	ori	r24, 0xC0	; 192
     118:	80 83       	st	Z, r24
     11a:	ea e7       	ldi	r30, 0x7A	; 122
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	8f 68       	ori	r24, 0x8F	; 143
     122:	80 83       	st	Z, r24
     124:	08 95       	ret

00000126 <adc_pin_select>:
     126:	ec e7       	ldi	r30, 0x7C	; 124
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	90 81       	ld	r25, Z
     12c:	90 7f       	andi	r25, 0xF0	; 240
     12e:	90 83       	st	Z, r25
     130:	90 81       	ld	r25, Z
     132:	89 2b       	or	r24, r25
     134:	80 83       	st	Z, r24
     136:	08 95       	ret

00000138 <adc_convert>:
     138:	ea e7       	ldi	r30, 0x7A	; 122
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	80 68       	ori	r24, 0x80	; 128
     140:	80 83       	st	Z, r24
     142:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
     14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     150:	88 23       	and	r24, r24
     152:	e1 f3       	breq	.-8      	; 0x14c <adc_convert+0x14>
     154:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     158:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     15c:	ea e7       	ldi	r30, 0x7A	; 122
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	90 81       	ld	r25, Z
     162:	9f 77       	andi	r25, 0x7F	; 127
     164:	90 83       	st	Z, r25
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	98 2f       	mov	r25, r24
     16a:	88 27       	eor	r24, r24
     16c:	82 2b       	or	r24, r18
     16e:	08 95       	ret

00000170 <get_mVolt>:

uint16_t get_mVolt(uint8_t source){
	adc_pin_select(source);
     170:	0e 94 93 00 	call	0x126	; 0x126 <adc_pin_select>
	//uint16_t adc_tmp_data = adc_convert();
	return ADC_VOLT(adc_convert());
     174:	0e 94 9c 00 	call	0x138	; 0x138 <adc_convert>
     178:	bc 01       	movw	r22, r24
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 0b 07 	call	0xe16	; 0xe16 <__floatunsisf>
     182:	2d ec       	ldi	r18, 0xCD	; 205
     184:	3e e1       	ldi	r19, 0x1E	; 30
     186:	48 e9       	ldi	r20, 0x98	; 152
     188:	5f e3       	ldi	r21, 0x3F	; 63
     18a:	0e 94 71 07 	call	0xee2	; 0xee2 <__mulsf3>
     18e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fixunssfsi>
}
     192:	cb 01       	movw	r24, r22
     194:	08 95       	ret

00000196 <set_pin_level>:
*/


void set_pin_level(gpio *GPIOx , const bool level)
{
	if (level) {
     196:	66 23       	and	r22, r22
     198:	99 f0       	breq	.+38     	; 0x1c0 <set_pin_level+0x2a>
		*GPIOx->port |= 1 << GPIOx->pin;
     19a:	dc 01       	movw	r26, r24
     19c:	ed 91       	ld	r30, X+
     19e:	fc 91       	ld	r31, X
     1a0:	11 97       	sbiw	r26, 0x01	; 1
     1a2:	21 e0       	ldi	r18, 0x01	; 1
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	a9 01       	movw	r20, r18
     1a8:	12 96       	adiw	r26, 0x02	; 2
     1aa:	0c 90       	ld	r0, X
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <set_pin_level+0x1c>
     1ae:	44 0f       	add	r20, r20
     1b0:	55 1f       	adc	r21, r21
     1b2:	0a 94       	dec	r0
     1b4:	e2 f7       	brpl	.-8      	; 0x1ae <set_pin_level+0x18>
     1b6:	ca 01       	movw	r24, r20
     1b8:	90 81       	ld	r25, Z
     1ba:	89 2b       	or	r24, r25
     1bc:	80 83       	st	Z, r24
     1be:	08 95       	ret
		} else {
		*GPIOx->port &= ~(1 << GPIOx->pin);
     1c0:	dc 01       	movw	r26, r24
     1c2:	ed 91       	ld	r30, X+
     1c4:	fc 91       	ld	r31, X
     1c6:	11 97       	sbiw	r26, 0x01	; 1
     1c8:	21 e0       	ldi	r18, 0x01	; 1
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	a9 01       	movw	r20, r18
     1ce:	12 96       	adiw	r26, 0x02	; 2
     1d0:	0c 90       	ld	r0, X
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <set_pin_level+0x42>
     1d4:	44 0f       	add	r20, r20
     1d6:	55 1f       	adc	r21, r21
     1d8:	0a 94       	dec	r0
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <set_pin_level+0x3e>
     1dc:	ca 01       	movw	r24, r20
     1de:	80 95       	com	r24
     1e0:	90 81       	ld	r25, Z
     1e2:	89 23       	and	r24, r25
     1e4:	80 83       	st	Z, r24
     1e6:	08 95       	ret

000001e8 <set_pin_dir>:
	}
}

void set_pin_dir(gpio *GPIOx, const enum port_dir direction)
{
     1e8:	fc 01       	movw	r30, r24
	uint8_t *tmp_port = GPIOx->port-1;
     1ea:	30 81       	ld	r19, Z
     1ec:	21 81       	ldd	r18, Z+1	; 0x01
	switch (direction) {
     1ee:	61 30       	cpi	r22, 0x01	; 1
     1f0:	99 f0       	breq	.+38     	; 0x218 <set_pin_dir+0x30>
     1f2:	18 f0       	brcs	.+6      	; 0x1fa <set_pin_dir+0x12>
     1f4:	62 30       	cpi	r22, 0x02	; 2
     1f6:	f1 f0       	breq	.+60     	; 0x234 <set_pin_dir+0x4c>
     1f8:	08 95       	ret
		case PORT_DIR_IN:
		*tmp_port &= ~(1 << GPIOx->pin);
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	02 80       	ldd	r0, Z+2	; 0x02
     200:	02 c0       	rjmp	.+4      	; 0x206 <set_pin_dir+0x1e>
     202:	88 0f       	add	r24, r24
     204:	99 1f       	adc	r25, r25
     206:	0a 94       	dec	r0
     208:	e2 f7       	brpl	.-8      	; 0x202 <set_pin_dir+0x1a>
     20a:	e3 2f       	mov	r30, r19
     20c:	f2 2f       	mov	r31, r18
     20e:	80 95       	com	r24
     210:	92 91       	ld	r25, -Z
     212:	89 23       	and	r24, r25
     214:	80 83       	st	Z, r24
		break;
     216:	08 95       	ret
		case PORT_DIR_OUT:
		*tmp_port |= 1 << GPIOx->pin;
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 80       	ldd	r0, Z+2	; 0x02
     21e:	02 c0       	rjmp	.+4      	; 0x224 <set_pin_dir+0x3c>
     220:	88 0f       	add	r24, r24
     222:	99 1f       	adc	r25, r25
     224:	0a 94       	dec	r0
     226:	e2 f7       	brpl	.-8      	; 0x220 <set_pin_dir+0x38>
     228:	e3 2f       	mov	r30, r19
     22a:	f2 2f       	mov	r31, r18
     22c:	92 91       	ld	r25, -Z
     22e:	89 2b       	or	r24, r25
     230:	80 83       	st	Z, r24
		break;
     232:	08 95       	ret
		case PORT_DIR_OFF:
		*tmp_port &= ~(1 << GPIOx->pin);
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	ac 01       	movw	r20, r24
     23a:	02 80       	ldd	r0, Z+2	; 0x02
     23c:	02 c0       	rjmp	.+4      	; 0x242 <set_pin_dir+0x5a>
     23e:	44 0f       	add	r20, r20
     240:	55 1f       	adc	r21, r21
     242:	0a 94       	dec	r0
     244:	e2 f7       	brpl	.-8      	; 0x23e <set_pin_dir+0x56>
     246:	a3 2f       	mov	r26, r19
     248:	b2 2f       	mov	r27, r18
     24a:	40 95       	com	r20
     24c:	2e 91       	ld	r18, -X
     24e:	42 23       	and	r20, r18
     250:	4c 93       	st	X, r20
		*GPIOx->port &= ~(1 << GPIOx->pin);
     252:	a0 81       	ld	r26, Z
     254:	b1 81       	ldd	r27, Z+1	; 0x01
     256:	02 80       	ldd	r0, Z+2	; 0x02
     258:	02 c0       	rjmp	.+4      	; 0x25e <set_pin_dir+0x76>
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	0a 94       	dec	r0
     260:	e2 f7       	brpl	.-8      	; 0x25a <set_pin_dir+0x72>
     262:	80 95       	com	r24
     264:	9c 91       	ld	r25, X
     266:	89 23       	and	r24, r25
     268:	8c 93       	st	X, r24
     26a:	08 95       	ret

0000026c <rtc_int_enable>:
};



void rtc_int_enable(rtc_date *RTCx , const uint16_t int_time){
	rtc_config_3[0] |= (1 << TIE);
     26c:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     270:	80 61       	ori	r24, 0x10	; 16
     272:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
	rtc_config_2[0] |= (1 << TD) | (1 << TE);
     276:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <rtc_config_2>
     27a:	81 61       	ori	r24, 0x11	; 17
     27c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <rtc_config_2>
	
	twi_write(RTC_ADDR,TIMER_COUNTER0_REG,rtc_config_1,sizeof(rtc_config_1));
     280:	22 e0       	ldi	r18, 0x02	; 2
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	41 e0       	ldi	r20, 0x01	; 1
     286:	51 e0       	ldi	r21, 0x01	; 1
     288:	6b e0       	ldi	r22, 0x0B	; 11
     28a:	82 e3       	ldi	r24, 0x32	; 50
     28c:	0e 94 b0 03 	call	0x760	; 0x760 <twi_write>
	twi_write(RTC_ADDR,EXT_REG,rtc_config_2,sizeof(rtc_config_2));
     290:	21 e0       	ldi	r18, 0x01	; 1
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	49 e1       	ldi	r20, 0x19	; 25
     296:	52 e0       	ldi	r21, 0x02	; 2
     298:	6d e0       	ldi	r22, 0x0D	; 13
     29a:	82 e3       	ldi	r24, 0x32	; 50
     29c:	0e 94 b0 03 	call	0x760	; 0x760 <twi_write>
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
     2a0:	21 e0       	ldi	r18, 0x01	; 1
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	48 e1       	ldi	r20, 0x18	; 24
     2a6:	52 e0       	ldi	r21, 0x02	; 2
     2a8:	6f e0       	ldi	r22, 0x0F	; 15
     2aa:	82 e3       	ldi	r24, 0x32	; 50
     2ac:	0e 94 b0 03 	call	0x760	; 0x760 <twi_write>
     2b0:	08 95       	ret

000002b2 <BCDtoDEC>:
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
}

uint8_t BCDtoDEC(uint8_t val)
{
	return ((val / 0x10) * 10) + (val % 0x10);
     2b2:	98 2f       	mov	r25, r24
     2b4:	92 95       	swap	r25
     2b6:	9f 70       	andi	r25, 0x0F	; 15
     2b8:	99 0f       	add	r25, r25
     2ba:	29 2f       	mov	r18, r25
     2bc:	22 0f       	add	r18, r18
     2be:	22 0f       	add	r18, r18
     2c0:	92 0f       	add	r25, r18
     2c2:	8f 70       	andi	r24, 0x0F	; 15
}
     2c4:	89 0f       	add	r24, r25
     2c6:	08 95       	ret

000002c8 <rtc_sync>:
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
	
	
}

void rtc_sync(rtc_date *RTCx){
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	27 97       	sbiw	r28, 0x07	; 7
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	cd bf       	out	0x3d, r28	; 61
     2e0:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	twi_read(RTC_ADDR, 0x00, rtc_raw, sizeof(rtc_raw));
     2e2:	27 e0       	ldi	r18, 0x07	; 7
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	ae 01       	movw	r20, r28
     2e8:	4f 5f       	subi	r20, 0xFF	; 255
     2ea:	5f 4f       	sbci	r21, 0xFF	; 255
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	82 e3       	ldi	r24, 0x32	; 50
     2f0:	0e 94 35 03 	call	0x66a	; 0x66a <twi_read>
	RTCx->second=BCDtoDEC(rtc_raw[0]);
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <BCDtoDEC>
     2fa:	f8 01       	movw	r30, r16
     2fc:	80 83       	st	Z, r24
	RTCx->minute=BCDtoDEC(rtc_raw[1]);
     2fe:	8a 81       	ldd	r24, Y+2	; 0x02
     300:	0e 94 59 01 	call	0x2b2	; 0x2b2 <BCDtoDEC>
     304:	f8 01       	movw	r30, r16
     306:	81 83       	std	Z+1, r24	; 0x01
	RTCx->hour=BCDtoDEC(rtc_raw[2]);
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <BCDtoDEC>
     30e:	f8 01       	movw	r30, r16
     310:	82 83       	std	Z+2, r24	; 0x02
	RTCx->dayofweek=rtc_raw[3];
     312:	8c 81       	ldd	r24, Y+4	; 0x04
     314:	87 83       	std	Z+7, r24	; 0x07
	RTCx->date=BCDtoDEC(rtc_raw[4]);
     316:	8d 81       	ldd	r24, Y+5	; 0x05
     318:	0e 94 59 01 	call	0x2b2	; 0x2b2 <BCDtoDEC>
     31c:	f8 01       	movw	r30, r16
     31e:	83 83       	std	Z+3, r24	; 0x03
	RTCx->month=BCDtoDEC(rtc_raw[5]);
     320:	8e 81       	ldd	r24, Y+6	; 0x06
     322:	0e 94 59 01 	call	0x2b2	; 0x2b2 <BCDtoDEC>
     326:	f8 01       	movw	r30, r16
     328:	84 83       	std	Z+4, r24	; 0x04
	RTCx->year=BCDtoDEC(rtc_raw[6]);
     32a:	8f 81       	ldd	r24, Y+7	; 0x07
     32c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <BCDtoDEC>
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	f8 01       	movw	r30, r16
     334:	96 83       	std	Z+6, r25	; 0x06
     336:	85 83       	std	Z+5, r24	; 0x05
}
     338:	27 96       	adiw	r28, 0x07	; 7
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	08 95       	ret

0000034e <led_board_init>:
}

void led_write_single(uint8_t board_address, uint8_t led_num, uint8_t brightness){
	uint8_t ledAddr = led_num+2;
	ledAddr = (ledAddr < 16) ? ledAddr : 15;
	twi_write_batch_by_reg(board_address, ledAddr | 0xA0, brightness, 2);
     34e:	0f 93       	push	r16
     350:	1f 93       	push	r17
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	1f 92       	push	r1
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
     35c:	18 2f       	mov	r17, r24
     35e:	19 82       	std	Y+1, r1	; 0x01
     360:	21 e0       	ldi	r18, 0x01	; 1
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	ae 01       	movw	r20, r28
     366:	4f 5f       	subi	r20, 0xFF	; 255
     368:	5f 4f       	sbci	r21, 0xFF	; 255
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	0e 94 b0 03 	call	0x760	; 0x760 <twi_write>
     370:	21 e0       	ldi	r18, 0x01	; 1
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	ae 01       	movw	r20, r28
     376:	4f 5f       	subi	r20, 0xFF	; 255
     378:	5f 4f       	sbci	r21, 0xFF	; 255
     37a:	61 e0       	ldi	r22, 0x01	; 1
     37c:	81 2f       	mov	r24, r17
     37e:	0e 94 b0 03 	call	0x760	; 0x760 <twi_write>
     382:	22 e0       	ldi	r18, 0x02	; 2
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	4a e1       	ldi	r20, 0x1A	; 26
     388:	52 e0       	ldi	r21, 0x02	; 2
     38a:	62 ea       	ldi	r22, 0xA2	; 162
     38c:	81 2f       	mov	r24, r17
     38e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <twi_write_batch_by_reg>
     392:	19 82       	std	Y+1, r1	; 0x01
     394:	21 e0       	ldi	r18, 0x01	; 1
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	ae 01       	movw	r20, r28
     39a:	4f 5f       	subi	r20, 0xFF	; 255
     39c:	5f 4f       	sbci	r21, 0xFF	; 255
     39e:	62 e1       	ldi	r22, 0x12	; 18
     3a0:	81 2f       	mov	r24, r17
     3a2:	0e 94 b0 03 	call	0x760	; 0x760 <twi_write>
     3a6:	8f ef       	ldi	r24, 0xFF	; 255
     3a8:	89 83       	std	Y+1, r24	; 0x01
     3aa:	21 e0       	ldi	r18, 0x01	; 1
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	ae 01       	movw	r20, r28
     3b0:	4f 5f       	subi	r20, 0xFF	; 255
     3b2:	5f 4f       	sbci	r21, 0xFF	; 255
     3b4:	63 e1       	ldi	r22, 0x13	; 19
     3b6:	81 2f       	mov	r24, r17
     3b8:	0e 94 b0 03 	call	0x760	; 0x760 <twi_write>
     3bc:	0a ea       	ldi	r16, 0xAA	; 170
     3be:	09 83       	std	Y+1, r16	; 0x01
     3c0:	21 e0       	ldi	r18, 0x01	; 1
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	ae 01       	movw	r20, r28
     3c6:	4f 5f       	subi	r20, 0xFF	; 255
     3c8:	5f 4f       	sbci	r21, 0xFF	; 255
     3ca:	64 e1       	ldi	r22, 0x14	; 20
     3cc:	81 2f       	mov	r24, r17
     3ce:	0e 94 b0 03 	call	0x760	; 0x760 <twi_write>
     3d2:	09 83       	std	Y+1, r16	; 0x01
     3d4:	21 e0       	ldi	r18, 0x01	; 1
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	ae 01       	movw	r20, r28
     3da:	4f 5f       	subi	r20, 0xFF	; 255
     3dc:	5f 4f       	sbci	r21, 0xFF	; 255
     3de:	65 e1       	ldi	r22, 0x15	; 21
     3e0:	81 2f       	mov	r24, r17
     3e2:	0e 94 b0 03 	call	0x760	; 0x760 <twi_write>
     3e6:	09 83       	std	Y+1, r16	; 0x01
     3e8:	21 e0       	ldi	r18, 0x01	; 1
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	ae 01       	movw	r20, r28
     3ee:	4f 5f       	subi	r20, 0xFF	; 255
     3f0:	5f 4f       	sbci	r21, 0xFF	; 255
     3f2:	66 e1       	ldi	r22, 0x16	; 22
     3f4:	81 2f       	mov	r24, r17
     3f6:	0e 94 b0 03 	call	0x760	; 0x760 <twi_write>
     3fa:	09 83       	std	Y+1, r16	; 0x01
     3fc:	21 e0       	ldi	r18, 0x01	; 1
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	ae 01       	movw	r20, r28
     402:	4f 5f       	subi	r20, 0xFF	; 255
     404:	5f 4f       	sbci	r21, 0xFF	; 255
     406:	67 e1       	ldi	r22, 0x17	; 23
     408:	81 2f       	mov	r24, r17
     40a:	0e 94 b0 03 	call	0x760	; 0x760 <twi_write>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	0f 90       	pop	r0
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	08 95       	ret

0000041c <led_write_batch>:
     41c:	24 2f       	mov	r18, r20
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	ab 01       	movw	r20, r22
     422:	62 ea       	ldi	r22, 0xA2	; 162
     424:	0e 94 fd 03 	call	0x7fa	; 0x7fa <twi_write_batch_by_reg>
     428:	08 95       	ret

0000042a <run_wave>:
}

void run_wave(uint8_t cmd) {
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t shifts = 0;
	uint8_t direction=0;
	uint8_t *brightness_ptr;
	uint8_t *leds_array = led_pattern;
	switch (cmd) {
     432:	81 30       	cpi	r24, 0x01	; 1
     434:	a0 f0       	brcs	.+40     	; 0x45e <run_wave+0x34>
     436:	83 30       	cpi	r24, 0x03	; 3
     438:	50 f0       	brcs	.+20     	; 0x44e <run_wave+0x24>
     43a:	85 30       	cpi	r24, 0x05	; 5
     43c:	80 f4       	brcc	.+32     	; 0x45e <run_wave+0x34>
		case ON_DOWN_UP:
		case OFF_DOWN_UP:
		direction = 0;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
     43e:	84 30       	cpi	r24, 0x04	; 4
     440:	91 f0       	breq	.+36     	; 0x466 <run_wave+0x3c>
     442:	82 30       	cpi	r24, 0x02	; 2
     444:	a1 f4       	brne	.+40     	; 0x46e <run_wave+0x44>
     446:	c3 e0       	ldi	r28, 0x03	; 3
     448:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t *brightness_ptr;
	uint8_t *leds_array = led_pattern;
	switch (cmd) {
		case ON_DOWN_UP:
		case OFF_DOWN_UP:
		direction = 0;
     44a:	00 e0       	ldi	r16, 0x00	; 0
     44c:	1b c0       	rjmp	.+54     	; 0x484 <run_wave+0x5a>
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
		break;
		case ON_UP_DOWN:
		case OFF_UP_DOWN:
		direction = 1;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
     44e:	84 30       	cpi	r24, 0x04	; 4
     450:	91 f0       	breq	.+36     	; 0x476 <run_wave+0x4c>
     452:	82 30       	cpi	r24, 0x02	; 2
     454:	a1 f4       	brne	.+40     	; 0x47e <run_wave+0x54>
     456:	c3 e0       	ldi	r28, 0x03	; 3
     458:	d1 e0       	ldi	r29, 0x01	; 1
		direction = 0;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
		break;
		case ON_UP_DOWN:
		case OFF_UP_DOWN:
		direction = 1;
     45a:	01 e0       	ldi	r16, 0x01	; 1
     45c:	13 c0       	rjmp	.+38     	; 0x484 <run_wave+0x5a>
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
		break;
		default:
		direction = 0;
		brightness_ptr = brightness_on;
     45e:	c6 e2       	ldi	r28, 0x26	; 38
     460:	d1 e0       	ldi	r29, 0x01	; 1
		case OFF_UP_DOWN:
		direction = 1;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
		break;
		default:
		direction = 0;
     462:	00 e0       	ldi	r16, 0x00	; 0
     464:	0f c0       	rjmp	.+30     	; 0x484 <run_wave+0x5a>
	uint8_t *leds_array = led_pattern;
	switch (cmd) {
		case ON_DOWN_UP:
		case OFF_DOWN_UP:
		direction = 0;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
     466:	c3 e0       	ldi	r28, 0x03	; 3
     468:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t *brightness_ptr;
	uint8_t *leds_array = led_pattern;
	switch (cmd) {
		case ON_DOWN_UP:
		case OFF_DOWN_UP:
		direction = 0;
     46a:	00 e0       	ldi	r16, 0x00	; 0
     46c:	0b c0       	rjmp	.+22     	; 0x484 <run_wave+0x5a>
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
     46e:	c6 e2       	ldi	r28, 0x26	; 38
     470:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t *brightness_ptr;
	uint8_t *leds_array = led_pattern;
	switch (cmd) {
		case ON_DOWN_UP:
		case OFF_DOWN_UP:
		direction = 0;
     472:	00 e0       	ldi	r16, 0x00	; 0
     474:	07 c0       	rjmp	.+14     	; 0x484 <run_wave+0x5a>
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
		break;
		case ON_UP_DOWN:
		case OFF_UP_DOWN:
		direction = 1;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
     476:	c3 e0       	ldi	r28, 0x03	; 3
     478:	d1 e0       	ldi	r29, 0x01	; 1
		direction = 0;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
		break;
		case ON_UP_DOWN:
		case OFF_UP_DOWN:
		direction = 1;
     47a:	01 e0       	ldi	r16, 0x01	; 1
     47c:	03 c0       	rjmp	.+6      	; 0x484 <run_wave+0x5a>
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
     47e:	c6 e2       	ldi	r28, 0x26	; 38
     480:	d1 e0       	ldi	r29, 0x01	; 1
		direction = 0;
		brightness_ptr = (cmd == OFF_DOWN_UP || cmd == OFF_UP_DOWN) ? brightness_off : brightness_on;
		break;
		case ON_UP_DOWN:
		case OFF_UP_DOWN:
		direction = 1;
     482:	01 e0       	ldi	r16, 0x01	; 1
		direction = 0;
		brightness_ptr = brightness_on;
		break;
	}
		
	if (direction == 0){
     484:	00 23       	and	r16, r16
     486:	19 f1       	breq	.+70     	; 0x4ce <run_wave+0xa4>
     488:	25 c0       	rjmp	.+74     	; 0x4d4 <run_wave+0xaa>
		for (shifts = 1; shifts < 20; shifts++) {
			for (i = 0; i < 16; i++) {
				leds_array[i] = brightness_ptr[i + shifts];
     48a:	82 2f       	mov	r24, r18
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	dc 01       	movw	r26, r24
     490:	a6 5e       	subi	r26, 0xE6	; 230
     492:	bd 4f       	sbci	r27, 0xFD	; 253
     494:	81 0f       	add	r24, r17
     496:	91 1d       	adc	r25, r1
     498:	fe 01       	movw	r30, r28
     49a:	e8 0f       	add	r30, r24
     49c:	f9 1f       	adc	r31, r25
     49e:	80 81       	ld	r24, Z
     4a0:	8c 93       	st	X, r24
		break;
	}
		
	if (direction == 0){
		for (shifts = 1; shifts < 20; shifts++) {
			for (i = 0; i < 16; i++) {
     4a2:	2f 5f       	subi	r18, 0xFF	; 255
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <run_wave+0x7e>
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	20 31       	cpi	r18, 0x10	; 16
     4aa:	78 f3       	brcs	.-34     	; 0x48a <run_wave+0x60>
				leds_array[i] = brightness_ptr[i + shifts];
			}
			led_write_batch(TLC_ADDR, leds_array, 16);
     4ac:	40 e1       	ldi	r20, 0x10	; 16
     4ae:	6a e1       	ldi	r22, 0x1A	; 26
     4b0:	72 e0       	ldi	r23, 0x02	; 2
     4b2:	84 e6       	ldi	r24, 0x64	; 100
     4b4:	0e 94 0e 02 	call	0x41c	; 0x41c <led_write_batch>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b8:	2f e7       	ldi	r18, 0x7F	; 127
     4ba:	88 e3       	ldi	r24, 0x38	; 56
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	21 50       	subi	r18, 0x01	; 1
     4c0:	80 40       	sbci	r24, 0x00	; 0
     4c2:	90 40       	sbci	r25, 0x00	; 0
     4c4:	e1 f7       	brne	.-8      	; 0x4be <run_wave+0x94>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <run_wave+0x9e>
     4c8:	00 00       	nop
		brightness_ptr = brightness_on;
		break;
	}
		
	if (direction == 0){
		for (shifts = 1; shifts < 20; shifts++) {
     4ca:	1f 5f       	subi	r17, 0xFF	; 255
     4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <run_wave+0xa6>
     4ce:	11 e0       	ldi	r17, 0x01	; 1
     4d0:	14 31       	cpi	r17, 0x14	; 20
     4d2:	48 f3       	brcs	.-46     	; 0x4a6 <run_wave+0x7c>
			}
			led_write_batch(TLC_ADDR, leds_array, 16);
			_delay_ms(SHIF_DELAY);
		}
	}
	if (direction == 1){
     4d4:	01 30       	cpi	r16, 0x01	; 1
     4d6:	41 f5       	brne	.+80     	; 0x528 <run_wave+0xfe>
     4d8:	24 c0       	rjmp	.+72     	; 0x522 <run_wave+0xf8>
		for (shifts = 1; shifts < 20; shifts++) {
			uint8_t reverce_index=16;
			for (i = 0; i < 16; i++) {
				reverce_index--;
     4da:	91 50       	subi	r25, 0x01	; 1
				leds_array[reverce_index] = brightness_ptr[i + shifts];
     4dc:	a9 2f       	mov	r26, r25
     4de:	b0 e0       	ldi	r27, 0x00	; 0
     4e0:	a6 5e       	subi	r26, 0xE6	; 230
     4e2:	bd 4f       	sbci	r27, 0xFD	; 253
     4e4:	e1 2f       	mov	r30, r17
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	e8 0f       	add	r30, r24
     4ea:	f1 1d       	adc	r31, r1
     4ec:	ec 0f       	add	r30, r28
     4ee:	fd 1f       	adc	r31, r29
     4f0:	20 81       	ld	r18, Z
     4f2:	2c 93       	st	X, r18
		}
	}
	if (direction == 1){
		for (shifts = 1; shifts < 20; shifts++) {
			uint8_t reverce_index=16;
			for (i = 0; i < 16; i++) {
     4f4:	8f 5f       	subi	r24, 0xFF	; 255
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <run_wave+0xd2>
     4f8:	90 e1       	ldi	r25, 0x10	; 16
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	80 31       	cpi	r24, 0x10	; 16
     4fe:	68 f3       	brcs	.-38     	; 0x4da <run_wave+0xb0>
				reverce_index--;
				leds_array[reverce_index] = brightness_ptr[i + shifts];
			}
			led_write_batch(TLC_ADDR, leds_array, 16);
     500:	40 e1       	ldi	r20, 0x10	; 16
     502:	6a e1       	ldi	r22, 0x1A	; 26
     504:	72 e0       	ldi	r23, 0x02	; 2
     506:	84 e6       	ldi	r24, 0x64	; 100
     508:	0e 94 0e 02 	call	0x41c	; 0x41c <led_write_batch>
     50c:	2f e7       	ldi	r18, 0x7F	; 127
     50e:	88 e3       	ldi	r24, 0x38	; 56
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	21 50       	subi	r18, 0x01	; 1
     514:	80 40       	sbci	r24, 0x00	; 0
     516:	90 40       	sbci	r25, 0x00	; 0
     518:	e1 f7       	brne	.-8      	; 0x512 <run_wave+0xe8>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <run_wave+0xf2>
     51c:	00 00       	nop
			led_write_batch(TLC_ADDR, leds_array, 16);
			_delay_ms(SHIF_DELAY);
		}
	}
	if (direction == 1){
		for (shifts = 1; shifts < 20; shifts++) {
     51e:	1f 5f       	subi	r17, 0xFF	; 255
     520:	01 c0       	rjmp	.+2      	; 0x524 <run_wave+0xfa>
     522:	11 e0       	ldi	r17, 0x01	; 1
     524:	14 31       	cpi	r17, 0x14	; 20
     526:	40 f3       	brcs	.-48     	; 0x4f8 <run_wave+0xce>
			led_write_batch(TLC_ADDR, leds_array, 16);
			_delay_ms(SHIF_DELAY);
		}
	}
	
}
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	08 95       	ret

00000532 <twi_start>:
	
	
	twi_stop();
	
	return err;
}
     532:	85 ea       	ldi	r24, 0xA5	; 165
     534:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	05 c0       	rjmp	.+10     	; 0x548 <twi_start+0x16>
     53e:	01 96       	adiw	r24, 0x01	; 1
     540:	80 34       	cpi	r24, 0x40	; 64
     542:	26 e0       	ldi	r18, 0x06	; 6
     544:	92 07       	cpc	r25, r18
     546:	30 f4       	brcc	.+12     	; 0x554 <twi_start+0x22>
     548:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <status>
     54c:	28 30       	cpi	r18, 0x08	; 8
     54e:	b9 f7       	brne	.-18     	; 0x53e <twi_start+0xc>
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	08 95       	ret
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	08 95       	ret

00000558 <twi_stop>:
     558:	85 e9       	ldi	r24, 0x95	; 149
     55a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     55e:	08 95       	ret

00000560 <twi_restart>:
     560:	85 ea       	ldi	r24, 0xA5	; 165
     562:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	05 c0       	rjmp	.+10     	; 0x576 <twi_restart+0x16>
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	80 34       	cpi	r24, 0x40	; 64
     570:	26 e0       	ldi	r18, 0x06	; 6
     572:	92 07       	cpc	r25, r18
     574:	30 f4       	brcc	.+12     	; 0x582 <twi_restart+0x22>
     576:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <status>
     57a:	20 31       	cpi	r18, 0x10	; 16
     57c:	b9 f7       	brne	.-18     	; 0x56c <twi_restart+0xc>
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	08 95       	ret
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	08 95       	ret

00000586 <twi_addr_write_ack>:
     586:	85 e8       	ldi	r24, 0x85	; 133
     588:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	05 c0       	rjmp	.+10     	; 0x59c <twi_addr_write_ack+0x16>
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	80 34       	cpi	r24, 0x40	; 64
     596:	26 e0       	ldi	r18, 0x06	; 6
     598:	92 07       	cpc	r25, r18
     59a:	30 f4       	brcc	.+12     	; 0x5a8 <twi_addr_write_ack+0x22>
     59c:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <status>
     5a0:	28 31       	cpi	r18, 0x18	; 24
     5a2:	b9 f7       	brne	.-18     	; 0x592 <twi_addr_write_ack+0xc>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	08 95       	ret
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	08 95       	ret

000005ac <twi_data_write_ack>:
     5ac:	85 e8       	ldi	r24, 0x85	; 133
     5ae:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <twi_data_write_ack+0x16>
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	80 34       	cpi	r24, 0x40	; 64
     5bc:	26 e0       	ldi	r18, 0x06	; 6
     5be:	92 07       	cpc	r25, r18
     5c0:	30 f4       	brcc	.+12     	; 0x5ce <twi_data_write_ack+0x22>
     5c2:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <status>
     5c6:	28 32       	cpi	r18, 0x28	; 40
     5c8:	b9 f7       	brne	.-18     	; 0x5b8 <twi_data_write_ack+0xc>
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	08 95       	ret
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	08 95       	ret

000005d2 <twi_addr_read_ack>:
     5d2:	85 e8       	ldi	r24, 0x85	; 133
     5d4:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	05 c0       	rjmp	.+10     	; 0x5e8 <twi_addr_read_ack+0x16>
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	80 34       	cpi	r24, 0x40	; 64
     5e2:	26 e0       	ldi	r18, 0x06	; 6
     5e4:	92 07       	cpc	r25, r18
     5e6:	30 f4       	brcc	.+12     	; 0x5f4 <twi_addr_read_ack+0x22>
     5e8:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <status>
     5ec:	20 34       	cpi	r18, 0x40	; 64
     5ee:	b9 f7       	brne	.-18     	; 0x5de <twi_addr_read_ack+0xc>
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	08 95       	ret
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	08 95       	ret

000005f8 <twi_data_read_ack>:
     5f8:	88 23       	and	r24, r24
     5fa:	89 f0       	breq	.+34     	; 0x61e <twi_data_read_ack+0x26>
     5fc:	85 ec       	ldi	r24, 0xC5	; 197
     5fe:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	05 c0       	rjmp	.+10     	; 0x612 <twi_data_read_ack+0x1a>
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	80 34       	cpi	r24, 0x40	; 64
     60c:	26 e0       	ldi	r18, 0x06	; 6
     60e:	92 07       	cpc	r25, r18
     610:	b8 f4       	brcc	.+46     	; 0x640 <twi_data_read_ack+0x48>
     612:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <status>
     616:	20 35       	cpi	r18, 0x50	; 80
     618:	b9 f7       	brne	.-18     	; 0x608 <twi_data_read_ack+0x10>
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	08 95       	ret
     61e:	85 e8       	ldi	r24, 0x85	; 133
     620:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	05 c0       	rjmp	.+10     	; 0x634 <twi_data_read_ack+0x3c>
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	80 34       	cpi	r24, 0x40	; 64
     62e:	26 e0       	ldi	r18, 0x06	; 6
     630:	92 07       	cpc	r25, r18
     632:	40 f4       	brcc	.+16     	; 0x644 <twi_data_read_ack+0x4c>
     634:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <status>
     638:	28 35       	cpi	r18, 0x58	; 88
     63a:	b9 f7       	brne	.-18     	; 0x62a <twi_data_read_ack+0x32>
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	08 95       	ret
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	08 95       	ret
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	08 95       	ret

00000648 <__vector_40>:
     648:	1f 92       	push	r1
     64a:	0f 92       	push	r0
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	0f 92       	push	r0
     650:	11 24       	eor	r1, r1
     652:	8f 93       	push	r24
     654:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
     658:	88 7f       	andi	r24, 0xF8	; 248
     65a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <status>
     65e:	8f 91       	pop	r24
     660:	0f 90       	pop	r0
     662:	0f be       	out	0x3f, r0	; 63
     664:	0f 90       	pop	r0
     666:	1f 90       	pop	r1
     668:	18 95       	reti

0000066a <twi_read>:
     66a:	cf 92       	push	r12
     66c:	df 92       	push	r13
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	d8 2e       	mov	r13, r24
     67a:	c6 2e       	mov	r12, r22
     67c:	7a 01       	movw	r14, r20
     67e:	89 01       	movw	r16, r18
     680:	0e 94 99 02 	call	0x532	; 0x532 <twi_start>
     684:	c8 2f       	mov	r28, r24
     686:	88 23       	and	r24, r24
     688:	21 f0       	breq	.+8      	; 0x692 <twi_read+0x28>
     68a:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
     68e:	8c 2f       	mov	r24, r28
     690:	5f c0       	rjmp	.+190    	; 0x750 <twi_read+0xe6>
     692:	8d 2d       	mov	r24, r13
     694:	88 0f       	add	r24, r24
     696:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     69a:	0e 94 c3 02 	call	0x586	; 0x586 <twi_addr_write_ack>
     69e:	c8 2f       	mov	r28, r24
     6a0:	88 23       	and	r24, r24
     6a2:	21 f0       	breq	.+8      	; 0x6ac <twi_read+0x42>
     6a4:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
     6a8:	8c 2f       	mov	r24, r28
     6aa:	52 c0       	rjmp	.+164    	; 0x750 <twi_read+0xe6>
     6ac:	c0 92 db 00 	sts	0x00DB, r12	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     6b0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <twi_data_write_ack>
     6b4:	c8 2f       	mov	r28, r24
     6b6:	88 23       	and	r24, r24
     6b8:	21 f0       	breq	.+8      	; 0x6c2 <twi_read+0x58>
     6ba:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
     6be:	8c 2f       	mov	r24, r28
     6c0:	47 c0       	rjmp	.+142    	; 0x750 <twi_read+0xe6>
     6c2:	0e 94 b0 02 	call	0x560	; 0x560 <twi_restart>
     6c6:	c8 2f       	mov	r28, r24
     6c8:	88 23       	and	r24, r24
     6ca:	21 f0       	breq	.+8      	; 0x6d4 <twi_read+0x6a>
     6cc:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
     6d0:	8c 2f       	mov	r24, r28
     6d2:	3e c0       	rjmp	.+124    	; 0x750 <twi_read+0xe6>
     6d4:	8d 2d       	mov	r24, r13
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	81 60       	ori	r24, 0x01	; 1
     6de:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     6e2:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <twi_addr_read_ack>
     6e6:	c8 2f       	mov	r28, r24
     6e8:	88 23       	and	r24, r24
     6ea:	c1 f0       	breq	.+48     	; 0x71c <twi_read+0xb2>
     6ec:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
     6f0:	8c 2f       	mov	r24, r28
     6f2:	2e c0       	rjmp	.+92     	; 0x750 <twi_read+0xe6>
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <twi_data_read_ack>
     6fa:	c8 2f       	mov	r28, r24
     6fc:	88 23       	and	r24, r24
     6fe:	21 f0       	breq	.+8      	; 0x708 <twi_read+0x9e>
     700:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
     704:	8c 2f       	mov	r24, r28
     706:	24 c0       	rjmp	.+72     	; 0x750 <twi_read+0xe6>
     708:	f7 01       	movw	r30, r14
     70a:	ec 0d       	add	r30, r12
     70c:	fd 1d       	adc	r31, r13
     70e:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     712:	80 83       	st	Z, r24
     714:	8f ef       	ldi	r24, 0xFF	; 255
     716:	c8 1a       	sub	r12, r24
     718:	d8 0a       	sbc	r13, r24
     71a:	02 c0       	rjmp	.+4      	; 0x720 <twi_read+0xb6>
     71c:	c1 2c       	mov	r12, r1
     71e:	d1 2c       	mov	r13, r1
     720:	c8 01       	movw	r24, r16
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	c8 16       	cp	r12, r24
     726:	d9 06       	cpc	r13, r25
     728:	28 f3       	brcs	.-54     	; 0x6f4 <twi_read+0x8a>
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <twi_data_read_ack>
     730:	c8 2f       	mov	r28, r24
     732:	88 23       	and	r24, r24
     734:	21 f0       	breq	.+8      	; 0x73e <twi_read+0xd4>
     736:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
     73a:	8c 2f       	mov	r24, r28
     73c:	09 c0       	rjmp	.+18     	; 0x750 <twi_read+0xe6>
     73e:	f7 01       	movw	r30, r14
     740:	ec 0d       	add	r30, r12
     742:	fd 1d       	adc	r31, r13
     744:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     748:	80 83       	st	Z, r24
     74a:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
     74e:	8c 2f       	mov	r24, r28
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	08 95       	ret

00000760 <twi_write>:
     760:	cf 92       	push	r12
     762:	df 92       	push	r13
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	18 2f       	mov	r17, r24
     770:	06 2f       	mov	r16, r22
     772:	6a 01       	movw	r12, r20
     774:	79 01       	movw	r14, r18
     776:	0e 94 99 02 	call	0x532	; 0x532 <twi_start>
     77a:	c8 2f       	mov	r28, r24
     77c:	88 23       	and	r24, r24
     77e:	21 f0       	breq	.+8      	; 0x788 <twi_write+0x28>
     780:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
     784:	8c 2f       	mov	r24, r28
     786:	31 c0       	rjmp	.+98     	; 0x7ea <twi_write+0x8a>
     788:	11 0f       	add	r17, r17
     78a:	10 93 db 00 	sts	0x00DB, r17	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     78e:	0e 94 c3 02 	call	0x586	; 0x586 <twi_addr_write_ack>
     792:	c8 2f       	mov	r28, r24
     794:	88 23       	and	r24, r24
     796:	21 f0       	breq	.+8      	; 0x7a0 <twi_write+0x40>
     798:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
     79c:	8c 2f       	mov	r24, r28
     79e:	25 c0       	rjmp	.+74     	; 0x7ea <twi_write+0x8a>
     7a0:	00 93 db 00 	sts	0x00DB, r16	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     7a4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <twi_data_write_ack>
     7a8:	c8 2f       	mov	r28, r24
     7aa:	88 23       	and	r24, r24
     7ac:	b1 f0       	breq	.+44     	; 0x7da <twi_write+0x7a>
     7ae:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
     7b2:	8c 2f       	mov	r24, r28
     7b4:	1a c0       	rjmp	.+52     	; 0x7ea <twi_write+0x8a>
     7b6:	f6 01       	movw	r30, r12
     7b8:	e0 0f       	add	r30, r16
     7ba:	f1 1f       	adc	r31, r17
     7bc:	80 81       	ld	r24, Z
     7be:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     7c2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <twi_data_write_ack>
     7c6:	c8 2f       	mov	r28, r24
     7c8:	88 23       	and	r24, r24
     7ca:	21 f0       	breq	.+8      	; 0x7d4 <twi_write+0x74>
     7cc:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
     7d0:	8c 2f       	mov	r24, r28
     7d2:	0b c0       	rjmp	.+22     	; 0x7ea <twi_write+0x8a>
     7d4:	0f 5f       	subi	r16, 0xFF	; 255
     7d6:	1f 4f       	sbci	r17, 0xFF	; 255
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <twi_write+0x7e>
     7da:	00 e0       	ldi	r16, 0x00	; 0
     7dc:	10 e0       	ldi	r17, 0x00	; 0
     7de:	0e 15       	cp	r16, r14
     7e0:	1f 05       	cpc	r17, r15
     7e2:	48 f3       	brcs	.-46     	; 0x7b6 <twi_write+0x56>
     7e4:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
     7e8:	8c 2f       	mov	r24, r28
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	ff 90       	pop	r15
     7f2:	ef 90       	pop	r14
     7f4:	df 90       	pop	r13
     7f6:	cf 90       	pop	r12
     7f8:	08 95       	ret

000007fa <twi_write_batch_by_reg>:



uint8_t twi_write_batch_by_reg(uint8_t addr,uint8_t reg, uint8_t *data,uint16_t len){
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	18 2f       	mov	r17, r24
     80a:	06 2f       	mov	r16, r22
     80c:	6a 01       	movw	r12, r20
     80e:	79 01       	movw	r14, r18
		
		uint16_t i = 0;
		uint8_t err = TWI_OK;
		
		err = twi_start();
     810:	0e 94 99 02 	call	0x532	; 0x532 <twi_start>
     814:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     816:	88 23       	and	r24, r24
     818:	21 f0       	breq	.+8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
			twi_stop();
     81a:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
			return err;
     81e:	8c 2f       	mov	r24, r28
     820:	31 c0       	rjmp	.+98     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
		}
		TWDR1 = (addr << 1) | 0;
     822:	11 0f       	add	r17, r17
     824:	10 93 db 00 	sts	0x00DB, r17	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		
		
		err = twi_addr_write_ack();
     828:	0e 94 c3 02 	call	0x586	; 0x586 <twi_addr_write_ack>
     82c:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     82e:	88 23       	and	r24, r24
     830:	21 f0       	breq	.+8      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
			twi_stop();
     832:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
			return err;
     836:	8c 2f       	mov	r24, r28
     838:	25 c0       	rjmp	.+74     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
		}
		
		
		TWDR1 = reg;
     83a:	00 93 db 00 	sts	0x00DB, r16	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		err = twi_data_write_ack();
     83e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <twi_data_write_ack>
     842:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     844:	88 23       	and	r24, r24
     846:	b1 f0       	breq	.+44     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
			twi_stop();
     848:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
			return err;
     84c:	8c 2f       	mov	r24, r28
     84e:	1a c0       	rjmp	.+52     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
		}
		
		for(i = 0; i < len;i++){
			TWDR1 = data[i];
     850:	f6 01       	movw	r30, r12
     852:	e0 0f       	add	r30, r16
     854:	f1 1f       	adc	r31, r17
     856:	80 81       	ld	r24, Z
     858:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
			err = twi_data_write_ack();
     85c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <twi_data_write_ack>
     860:	c8 2f       	mov	r28, r24
			if(err != TWI_OK){
     862:	88 23       	and	r24, r24
     864:	21 f0       	breq	.+8      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
				twi_stop();
     866:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
				return err;
     86a:	8c 2f       	mov	r24, r28
     86c:	0b c0       	rjmp	.+22     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
		if(err != TWI_OK){
			twi_stop();
			return err;
		}
		
		for(i = 0; i < len;i++){
     86e:	0f 5f       	subi	r16, 0xFF	; 255
     870:	1f 4f       	sbci	r17, 0xFF	; 255
     872:	02 c0       	rjmp	.+4      	; 0x878 <__DATA_REGION_LENGTH__+0x78>
     874:	00 e0       	ldi	r16, 0x00	; 0
     876:	10 e0       	ldi	r17, 0x00	; 0
     878:	0e 15       	cp	r16, r14
     87a:	1f 05       	cpc	r17, r15
     87c:	48 f3       	brcs	.-46     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
				return err;
			}
		}
		
		
		twi_stop();
     87e:	0e 94 ac 02 	call	0x558	; 0x558 <twi_stop>
		
		return err;
     882:	8c 2f       	mov	r24, r28
}
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12
     892:	08 95       	ret

00000894 <twi_init>:





void twi_init(uint32_t speed){
     894:	9b 01       	movw	r18, r22
     896:	ac 01       	movw	r20, r24
	
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	72 e1       	ldi	r23, 0x12	; 18
     89c:	8a e7       	ldi	r24, 0x7A	; 122
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 06 08 	call	0x100c	; 0x100c <__udivmodsi4>
     8a4:	da 01       	movw	r26, r20
     8a6:	c9 01       	movw	r24, r18
     8a8:	40 97       	sbiw	r24, 0x10	; 16
     8aa:	a1 09       	sbc	r26, r1
     8ac:	b1 09       	sbc	r27, r1
     8ae:	b6 95       	lsr	r27
     8b0:	a7 95       	ror	r26
     8b2:	97 95       	ror	r25
     8b4:	87 95       	ror	r24
	TWBR1 = gen_t & 0xFF;
     8b6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	TWCR1 = (1 << TWEN) | (1 << TWIE);
     8ba:	85 e0       	ldi	r24, 0x05	; 5
     8bc:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     8c0:	08 95       	ret

000008c2 <__vector_18>:

void uart_send_array(uint8_t *c,uint16_t len){
	for(uint16_t i = 0; i < len;i++){
		uart_send_byte(c[i]);
	}
}
     8c2:	1f 92       	push	r1
     8c4:	0f 92       	push	r0
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	0f 92       	push	r0
     8ca:	11 24       	eor	r1, r1
     8cc:	8f 93       	push	r24
     8ce:	9f 93       	push	r25
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
     8d4:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <rx_count>
     8d8:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <rx_count+0x1>
     8dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     8e0:	e6 5d       	subi	r30, 0xD6	; 214
     8e2:	fd 4f       	sbci	r31, 0xFD	; 253
     8e4:	80 83       	st	Z, r24
     8e6:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <rx_count>
     8ea:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <rx_count+0x1>
     8ee:	e6 5d       	subi	r30, 0xD6	; 214
     8f0:	fd 4f       	sbci	r31, 0xFD	; 253
     8f2:	80 81       	ld	r24, Z
     8f4:	8d 30       	cpi	r24, 0x0D	; 13
     8f6:	51 f4       	brne	.+20     	; 0x90c <__stack+0xd>
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <read_complete>
     8fe:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <rx_count>
     902:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <rx_count+0x1>
     906:	e5 5d       	subi	r30, 0xD5	; 213
     908:	fd 4f       	sbci	r31, 0xFD	; 253
     90a:	10 82       	st	Z, r1
     90c:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <rx_count>
     910:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <rx_count+0x1>
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <rx_count+0x1>
     91a:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <rx_count>
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	9f 91       	pop	r25
     924:	8f 91       	pop	r24
     926:	0f 90       	pop	r0
     928:	0f be       	out	0x3f, r0	; 63
     92a:	0f 90       	pop	r0
     92c:	1f 90       	pop	r1
     92e:	18 95       	reti

00000930 <__vector_20>:
     930:	1f 92       	push	r1
     932:	0f 92       	push	r0
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	0f 92       	push	r0
     938:	11 24       	eor	r1, r1
     93a:	8f 93       	push	r24
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <uart_tx_busy>
     942:	8f 91       	pop	r24
     944:	0f 90       	pop	r0
     946:	0f be       	out	0x3f, r0	; 63
     948:	0f 90       	pop	r0
     94a:	1f 90       	pop	r1
     94c:	18 95       	reti

0000094e <uart_init>:
     94e:	44 23       	and	r20, r20
     950:	39 f0       	breq	.+14     	; 0x960 <uart_init+0x12>
     952:	e0 ec       	ldi	r30, 0xC0	; 192
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	20 81       	ld	r18, Z
     958:	22 60       	ori	r18, 0x02	; 2
     95a:	20 83       	st	Z, r18
     95c:	a8 e0       	ldi	r26, 0x08	; 8
     95e:	01 c0       	rjmp	.+2      	; 0x962 <uart_init+0x14>
     960:	a0 e1       	ldi	r26, 0x10	; 16
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
     968:	0e 94 28 08 	call	0x1050	; 0x1050 <__muluhisi3>
     96c:	9b 01       	movw	r18, r22
     96e:	ac 01       	movw	r20, r24
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	72 e1       	ldi	r23, 0x12	; 18
     974:	8a e7       	ldi	r24, 0x7A	; 122
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 06 08 	call	0x100c	; 0x100c <__udivmodsi4>
     97c:	ba 01       	movw	r22, r20
     97e:	a9 01       	movw	r20, r18
     980:	41 50       	subi	r20, 0x01	; 1
     982:	51 09       	sbc	r21, r1
     984:	61 09       	sbc	r22, r1
     986:	71 09       	sbc	r23, r1
     988:	db 01       	movw	r26, r22
     98a:	ca 01       	movw	r24, r20
     98c:	88 27       	eor	r24, r24
     98e:	9f 70       	andi	r25, 0x0F	; 15
     990:	aa 27       	eor	r26, r26
     992:	bb 27       	eor	r27, r27
     994:	89 2f       	mov	r24, r25
     996:	9a 2f       	mov	r25, r26
     998:	ab 2f       	mov	r26, r27
     99a:	bb 27       	eor	r27, r27
     99c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     9a0:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     9a4:	e1 ec       	ldi	r30, 0xC1	; 193
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	80 81       	ld	r24, Z
     9aa:	88 6d       	ori	r24, 0xD8	; 216
     9ac:	80 83       	st	Z, r24
     9ae:	86 e8       	ldi	r24, 0x86	; 134
     9b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     9b4:	08 95       	ret

000009b6 <uart_send_byte>:
     9b6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <uart_tx_busy>
     9ba:	99 23       	and	r25, r25
     9bc:	e1 f3       	breq	.-8      	; 0x9b6 <uart_send_byte>
     9be:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <uart_tx_busy>
     9c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     9c6:	08 95       	ret

000009c8 <uart_send_string>:

void uart_send_string(uint8_t *c){
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	8c 01       	movw	r16, r24
	uint16_t i = 0;
     9d2:	c0 e0       	ldi	r28, 0x00	; 0
     9d4:	d0 e0       	ldi	r29, 0x00	; 0
	do{
		uart_send_byte(c[i]);
     9d6:	f8 01       	movw	r30, r16
     9d8:	ec 0f       	add	r30, r28
     9da:	fd 1f       	adc	r31, r29
     9dc:	80 81       	ld	r24, Z
     9de:	0e 94 db 04 	call	0x9b6	; 0x9b6 <uart_send_byte>
		i++;
     9e2:	21 96       	adiw	r28, 0x01	; 1
		
	}while(c[i] != '\0');
     9e4:	f8 01       	movw	r30, r16
     9e6:	ec 0f       	add	r30, r28
     9e8:	fd 1f       	adc	r31, r29
     9ea:	80 81       	ld	r24, Z
     9ec:	81 11       	cpse	r24, r1
     9ee:	f3 cf       	rjmp	.-26     	; 0x9d6 <uart_send_string+0xe>
	//uart_send_byte(c[i]);
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	08 95       	ret

000009fa <__vector_1>:

uint8_t panel_addr = TLC_ADDR;
uint8_t pwmChannels[16];


ISR(INT0_vect){
     9fa:	1f 92       	push	r1
     9fc:	0f 92       	push	r0
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	0f 92       	push	r0
     a02:	11 24       	eor	r1, r1
     a04:	8f 93       	push	r24
	rtc_int_request=1;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <rtc_int_request>
}
     a0c:	8f 91       	pop	r24
     a0e:	0f 90       	pop	r0
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	0f 90       	pop	r0
     a14:	1f 90       	pop	r1
     a16:	18 95       	reti

00000a18 <__vector_2>:

ISR(INT1_vect){
     a18:	1f 92       	push	r1
     a1a:	0f 92       	push	r0
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	0f 92       	push	r0
     a20:	11 24       	eor	r1, r1
     a22:	8f 93       	push	r24
	pir1_active=1;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <pir1_active>
}
     a2a:	8f 91       	pop	r24
     a2c:	0f 90       	pop	r0
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	0f 90       	pop	r0
     a32:	1f 90       	pop	r1
     a34:	18 95       	reti

00000a36 <__vector_5>:

ISR(PCINT2_vect){
     a36:	1f 92       	push	r1
     a38:	0f 92       	push	r0
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	0f 92       	push	r0
     a3e:	11 24       	eor	r1, r1
     a40:	2f 93       	push	r18
     a42:	3f 93       	push	r19
     a44:	4f 93       	push	r20
     a46:	8f 93       	push	r24
     a48:	9f 93       	push	r25
     a4a:	af 93       	push	r26
     a4c:	bf 93       	push	r27
     a4e:	ef 93       	push	r30
     a50:	ff 93       	push	r31



static inline bool get_port_pin_level(gpio *GPIOx)
{
	uint8_t *tmp_port = GPIOx->port-2;
     a52:	a0 e6       	ldi	r26, 0x60	; 96
     a54:	b1 e0       	ldi	r27, 0x01	; 1
     a56:	ed 91       	ld	r30, X+
     a58:	fc 91       	ld	r31, X
     a5a:	11 97       	sbiw	r26, 0x01	; 1
	return *tmp_port & (1 << GPIOx->pin);
     a5c:	32 97       	sbiw	r30, 0x02	; 2
     a5e:	40 81       	ld	r20, Z
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	9c 01       	movw	r18, r24
     a66:	12 96       	adiw	r26, 0x02	; 2
     a68:	0c 90       	ld	r0, X
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <__vector_5+0x3a>
     a6c:	22 0f       	add	r18, r18
     a6e:	33 1f       	adc	r19, r19
     a70:	0a 94       	dec	r0
     a72:	e2 f7       	brpl	.-8      	; 0xa6c <__vector_5+0x36>
     a74:	84 2f       	mov	r24, r20
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	82 23       	and	r24, r18
     a7a:	93 23       	and	r25, r19
	if(get_port_pin_level(&pir2_int)==true){
     a7c:	89 2b       	or	r24, r25
     a7e:	19 f0       	breq	.+6      	; 0xa86 <__vector_5+0x50>
		pir2_active=1;
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <pir2_active>
	}
}
     a86:	ff 91       	pop	r31
     a88:	ef 91       	pop	r30
     a8a:	bf 91       	pop	r27
     a8c:	af 91       	pop	r26
     a8e:	9f 91       	pop	r25
     a90:	8f 91       	pop	r24
     a92:	4f 91       	pop	r20
     a94:	3f 91       	pop	r19
     a96:	2f 91       	pop	r18
     a98:	0f 90       	pop	r0
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	0f 90       	pop	r0
     a9e:	1f 90       	pop	r1
     aa0:	18 95       	reti

00000aa2 <main>:

int main(void)
{
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	c0 58       	subi	r28, 0x80	; 128
     aac:	d1 09       	sbc	r29, r1
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
	char char_array[128]="\0";
     ab8:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <rtc_int+0x3>
     abc:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rtc_int+0x4>
     ac0:	9a 83       	std	Y+2, r25	; 0x02
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	fe 01       	movw	r30, r28
     ac6:	33 96       	adiw	r30, 0x03	; 3
     ac8:	8e e7       	ldi	r24, 0x7E	; 126
     aca:	df 01       	movw	r26, r30
     acc:	1d 92       	st	X+, r1
     ace:	8a 95       	dec	r24
     ad0:	e9 f7       	brne	.-6      	; 0xacc <main+0x2a>
	uart_init(9600,1);
     ad2:	41 e0       	ldi	r20, 0x01	; 1
     ad4:	60 e8       	ldi	r22, 0x80	; 128
     ad6:	75 e2       	ldi	r23, 0x25	; 37
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 a7 04 	call	0x94e	; 0x94e <uart_init>
	twi_init(200000);
     ae0:	60 e4       	ldi	r22, 0x40	; 64
     ae2:	7d e0       	ldi	r23, 0x0D	; 13
     ae4:	83 e0       	ldi	r24, 0x03	; 3
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 4a 04 	call	0x894	; 0x894 <twi_init>
	
	EICRA |= (0b10 << ISC00) | (0b11 << ISC10); //INT0 falling edge interrupt request (RTC module); First PIR sensor rising edge of INT1 generates an interrupt request
     aec:	e9 e6       	ldi	r30, 0x69	; 105
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	8e 60       	ori	r24, 0x0E	; 14
     af4:	80 83       	st	Z, r24
	EIMSK = 0x03;								//0b00000001 Enable booth INT0 and INT1 interrupt request 
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	8d bb       	out	0x1d, r24	; 29
	
	//PCINT interrupt config
	PCICR |= (1 << 2);							//PCIE2 Pin Change Interrupt Enable 2
     afa:	e8 e6       	ldi	r30, 0x68	; 104
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	84 60       	ori	r24, 0x04	; 4
     b02:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT21);					//PCINT[23:16] Pin Change Enable Mask
     b04:	ed e6       	ldi	r30, 0x6D	; 109
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 81       	ld	r24, Z
     b0a:	80 62       	ori	r24, 0x20	; 32
     b0c:	80 83       	st	Z, r24
	
	
	set_pin_dir(&ld1 , PORT_DIR_OUT); set_pin_level(&ld1, true);
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	8a e5       	ldi	r24, 0x5A	; 90
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <set_pin_dir>
     b18:	61 e0       	ldi	r22, 0x01	; 1
     b1a:	8a e5       	ldi	r24, 0x5A	; 90
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	0e 94 cb 00 	call	0x196	; 0x196 <set_pin_level>
	set_pin_dir(&led_rst , PORT_DIR_OUT); set_pin_level(&led_rst, false);
     b22:	61 e0       	ldi	r22, 0x01	; 1
     b24:	8d e5       	ldi	r24, 0x5D	; 93
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <set_pin_dir>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	8d e5       	ldi	r24, 0x5D	; 93
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0e 94 cb 00 	call	0x196	; 0x196 <set_pin_level>
	set_pin_dir(&bat_ritical_led , PORT_DIR_OUT); set_pin_level(&bat_ritical_led, false);
     b36:	61 e0       	ldi	r22, 0x01	; 1
     b38:	87 e5       	ldi	r24, 0x57	; 87
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <set_pin_dir>
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	87 e5       	ldi	r24, 0x57	; 87
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 cb 00 	call	0x196	; 0x196 <set_pin_level>
	
	
	set_pin_dir(&rtc_int, PORT_DIR_IN);
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	86 e6       	ldi	r24, 0x66	; 102
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <set_pin_dir>
	set_pin_dir(&pir1_int, PORT_DIR_IN);
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	83 e6       	ldi	r24, 0x63	; 99
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <set_pin_dir>
	set_pin_dir(&pir2_int, PORT_DIR_IN);
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	80 e6       	ldi	r24, 0x60	; 96
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <set_pin_dir>
	
	sei();
     b68:	78 94       	sei
	//rtc_set(&sys_rtc);
	rtc_int_enable(&sys_rtc ,0);
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	8f e4       	ldi	r24, 0x4F	; 79
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	0e 94 36 01 	call	0x26c	; 0x26c <rtc_int_enable>
	adc_init();
     b76:	0e 94 88 00 	call	0x110	; 0x110 <adc_init>
	
	//led_board_sw_reset(panel_addr);
	//Used HW reset port for maximum power save mode
	//Led module in the reset state when LEDs is off
	
	uart_send_string((uint8_t *)"RUN\n\r");
     b7a:	89 ee       	ldi	r24, 0xE9	; 233
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <uart_send_string>
	sleep_enable();
     b82:	83 b7       	in	r24, 0x33	; 51
     b84:	81 60       	ori	r24, 0x01	; 1
     b86:	83 bf       	out	0x33, r24	; 51
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     b88:	83 b7       	in	r24, 0x33	; 51
     b8a:	81 7f       	andi	r24, 0xF1	; 241
     b8c:	84 60       	ori	r24, 0x04	; 4
     b8e:	83 bf       	out	0x33, r24	; 51
	while (1)
	{
		if (pir1_active == 1){
     b90:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <pir1_active>
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	c1 f4       	brne	.+48     	; 0xbc8 <main+0x126>
			uart_send_string((uint8_t *)"INT1\n\r");
     b98:	8f ee       	ldi	r24, 0xEF	; 239
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <uart_send_string>
			if(isActive == 0 && LIGHT_LEVEL < ALOVED_LIGHT_LEVEL && (sys_rtc.hour >= HORKING_HOUR_START || sys_rtc.hour <= HORKING_HOUR_STOP)){
     ba0:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <isActive>
     ba4:	81 11       	cpse	r24, r1
     ba6:	0e c0       	rjmp	.+28     	; 0xbc4 <main+0x122>
     ba8:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <LIGHT_LEVEL>
     bac:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <LIGHT_LEVEL+0x1>
     bb0:	05 97       	sbiw	r24, 0x05	; 5
     bb2:	40 f4       	brcc	.+16     	; 0xbc4 <main+0x122>
     bb4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <sys_rtc+0x2>
     bb8:	87 50       	subi	r24, 0x07	; 7
     bba:	8b 30       	cpi	r24, 0x0B	; 11
     bbc:	18 f0       	brcs	.+6      	; 0xbc4 <main+0x122>
				action_request = ON_UP_DOWN;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <action_request>
			}
			pir1_active=0;
     bc4:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <pir1_active>
		}
		
		if (pir2_active == 1){
     bc8:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <pir2_active>
     bcc:	81 30       	cpi	r24, 0x01	; 1
     bce:	a1 f4       	brne	.+40     	; 0xbf8 <main+0x156>
			//uart_send_string((uint8_t *)"INT2\n\r");
			if(isActive == 0 && LIGHT_LEVEL < ALOVED_LIGHT_LEVEL && (sys_rtc.hour >= HORKING_HOUR_START || sys_rtc.hour <= HORKING_HOUR_STOP)){
     bd0:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <isActive>
     bd4:	81 11       	cpse	r24, r1
     bd6:	0e c0       	rjmp	.+28     	; 0xbf4 <main+0x152>
     bd8:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <LIGHT_LEVEL>
     bdc:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <LIGHT_LEVEL+0x1>
     be0:	05 97       	sbiw	r24, 0x05	; 5
     be2:	40 f4       	brcc	.+16     	; 0xbf4 <main+0x152>
     be4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <sys_rtc+0x2>
     be8:	87 50       	subi	r24, 0x07	; 7
     bea:	8b 30       	cpi	r24, 0x0B	; 11
     bec:	18 f0       	brcs	.+6      	; 0xbf4 <main+0x152>
				action_request = ON_DOWN_UP;
     bee:	83 e0       	ldi	r24, 0x03	; 3
     bf0:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <action_request>
			}
			pir2_active=0;
     bf4:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <pir2_active>
		}
		
		if(action_request != 0 && active_timer == 0){
     bf8:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <action_request>
     bfc:	88 23       	and	r24, r24
     bfe:	09 f4       	brne	.+2      	; 0xc02 <main+0x160>
     c00:	4e c0       	rjmp	.+156    	; 0xc9e <main+0x1fc>
     c02:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <active_timer>
     c06:	91 11       	cpse	r25, r1
     c08:	4a c0       	rjmp	.+148    	; 0xc9e <main+0x1fc>
			//uart_send_string((uint8_t *)"CASE\n\r");
			switch (action_request) {
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	19 f0       	breq	.+6      	; 0xc14 <main+0x172>
     c0e:	83 30       	cpi	r24, 0x03	; 3
     c10:	e1 f0       	breq	.+56     	; 0xc4a <main+0x1a8>
     c12:	36 c0       	rjmp	.+108    	; 0xc80 <main+0x1de>
				case ON_UP_DOWN:
				if(isActive == 0){
     c14:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <isActive>
     c18:	81 11       	cpse	r24, r1
     c1a:	41 c0       	rjmp	.+130    	; 0xc9e <main+0x1fc>
					isActive = 1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <isActive>
					active_timer = 5;
     c22:	85 e0       	ldi	r24, 0x05	; 5
     c24:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <active_timer>
					set_pin_level(&led_rst, true);
     c28:	61 e0       	ldi	r22, 0x01	; 1
     c2a:	8d e5       	ldi	r24, 0x5D	; 93
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	0e 94 cb 00 	call	0x196	; 0x196 <set_pin_level>
					led_board_init(panel_addr);
     c32:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <panel_addr>
     c36:	0e 94 a7 01 	call	0x34e	; 0x34e <led_board_init>
					run_wave(action_request);
     c3a:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <action_request>
     c3e:	0e 94 15 02 	call	0x42a	; 0x42a <run_wave>
					action_request = OFF_UP_DOWN;
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <action_request>
     c48:	2a c0       	rjmp	.+84     	; 0xc9e <main+0x1fc>
				}
				break;
				case ON_DOWN_UP:
				if(isActive == 0){
     c4a:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <isActive>
     c4e:	81 11       	cpse	r24, r1
     c50:	26 c0       	rjmp	.+76     	; 0xc9e <main+0x1fc>
					isActive = 1;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <isActive>
					active_timer = 5;
     c58:	85 e0       	ldi	r24, 0x05	; 5
     c5a:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <active_timer>
					set_pin_level(&led_rst, true);
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	8d e5       	ldi	r24, 0x5D	; 93
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	0e 94 cb 00 	call	0x196	; 0x196 <set_pin_level>
					led_board_init(panel_addr);
     c68:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <panel_addr>
     c6c:	0e 94 a7 01 	call	0x34e	; 0x34e <led_board_init>
					run_wave(action_request);
     c70:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <action_request>
     c74:	0e 94 15 02 	call	0x42a	; 0x42a <run_wave>
					action_request = OFF_DOWN_UP;
     c78:	84 e0       	ldi	r24, 0x04	; 4
     c7a:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <action_request>
     c7e:	0f c0       	rjmp	.+30     	; 0xc9e <main+0x1fc>
				}
				break;
				default:
				//uart_send_string((uint8_t *)"CASE\n\r");
				if(isActive != 0){
     c80:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <isActive>
     c84:	99 23       	and	r25, r25
     c86:	59 f0       	breq	.+22     	; 0xc9e <main+0x1fc>
					isActive = 0;
     c88:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <isActive>
					run_wave(action_request);
     c8c:	0e 94 15 02 	call	0x42a	; 0x42a <run_wave>
					set_pin_level(&led_rst, false);
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	8d e5       	ldi	r24, 0x5D	; 93
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 cb 00 	call	0x196	; 0x196 <set_pin_level>
					action_request = 0;
     c9a:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <action_request>
				}
				break;
			}
		}
		
		if (rtc_int_request != 0){
     c9e:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <rtc_int_request>
     ca2:	88 23       	and	r24, r24
     ca4:	09 f4       	brne	.+2      	; 0xca8 <main+0x206>
     ca6:	6f c0       	rjmp	.+222    	; 0xd86 <main+0x2e4>
			rtc_sync(&sys_rtc);
     ca8:	8f e4       	ldi	r24, 0x4F	; 79
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	0e 94 64 01 	call	0x2c8	; 0x2c8 <rtc_sync>
			BAT_VOLT = get_mVolt(ADC4_PIN);
     cb0:	84 e0       	ldi	r24, 0x04	; 4
     cb2:	0e 94 b8 00 	call	0x170	; 0x170 <get_mVolt>
     cb6:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <BAT_VOLT+0x1>
     cba:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <BAT_VOLT>
			LIGHT_LEVEL = get_mVolt(ADC5_PIN);
     cbe:	85 e0       	ldi	r24, 0x05	; 5
     cc0:	0e 94 b8 00 	call	0x170	; 0x170 <get_mVolt>
     cc4:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <LIGHT_LEVEL>
     cc8:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <LIGHT_LEVEL+0x1>
			sprintf(char_array, "%02d:%02d:%02d; bat:%umV; l=%u\r\n", sys_rtc.hour, sys_rtc.minute, sys_rtc.second, BAT_VOLT, LIGHT_LEVEL);
     ccc:	ef e4       	ldi	r30, 0x4F	; 79
     cce:	f1 e0       	ldi	r31, 0x01	; 1
     cd0:	40 81       	ld	r20, Z
     cd2:	31 81       	ldd	r19, Z+1	; 0x01
     cd4:	22 81       	ldd	r18, Z+2	; 0x02
     cd6:	9f 93       	push	r25
     cd8:	8f 93       	push	r24
     cda:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <BAT_VOLT+0x1>
     cde:	8f 93       	push	r24
     ce0:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <BAT_VOLT>
     ce4:	8f 93       	push	r24
     ce6:	1f 92       	push	r1
     ce8:	4f 93       	push	r20
     cea:	1f 92       	push	r1
     cec:	3f 93       	push	r19
     cee:	1f 92       	push	r1
     cf0:	2f 93       	push	r18
     cf2:	86 ef       	ldi	r24, 0xF6	; 246
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	9f 93       	push	r25
     cf8:	8f 93       	push	r24
     cfa:	8e 01       	movw	r16, r28
     cfc:	0f 5f       	subi	r16, 0xFF	; 255
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
     d00:	1f 93       	push	r17
     d02:	0f 93       	push	r16
     d04:	0e 94 42 08 	call	0x1084	; 0x1084 <sprintf>
			//sprintf(char_array, "A: %02d; Req: %02d; Timer: %02d; Pir2: %02d;\n\r", isActive, action_request, active_timer, get_port_pin_level(&pir2_int));
			uart_send_string((uint8_t *)char_array);
     d08:	c8 01       	movw	r24, r16
     d0a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <uart_send_string>
			rtc_int_request = 0;
     d0e:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <rtc_int_request>
			//if (sys_rtc.hour >= HORKING_HOUR_START || sys_rtc.hour <= HORKING_HOUR_STOP)
			//{
				//uart_send_string((uint8_t *)"Working period\n\r");
			//}
			if(active_timer != 0){
     d12:	40 91 ae 02 	lds	r20, 0x02AE	; 0x8002ae <active_timer>
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	44 23       	and	r20, r20
     d22:	89 f1       	breq	.+98     	; 0xd86 <main+0x2e4>



static inline bool get_port_pin_level(gpio *GPIOx)
{
	uint8_t *tmp_port = GPIOx->port-2;
     d24:	a0 e6       	ldi	r26, 0x60	; 96
     d26:	b1 e0       	ldi	r27, 0x01	; 1
     d28:	ed 91       	ld	r30, X+
     d2a:	fc 91       	ld	r31, X
     d2c:	11 97       	sbiw	r26, 0x01	; 1
	return *tmp_port & (1 << GPIOx->pin);
     d2e:	32 97       	sbiw	r30, 0x02	; 2
     d30:	50 81       	ld	r21, Z
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	9c 01       	movw	r18, r24
     d38:	12 96       	adiw	r26, 0x02	; 2
     d3a:	0c 90       	ld	r0, X
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <main+0x2a0>
     d3e:	22 0f       	add	r18, r18
     d40:	33 1f       	adc	r19, r19
     d42:	0a 94       	dec	r0
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <main+0x29c>
     d46:	85 2f       	mov	r24, r21
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	82 23       	and	r24, r18
     d4c:	93 23       	and	r25, r19
				if(get_port_pin_level(&pir2_int) == true || get_port_pin_level(&pir1_int) == true){
     d4e:	89 2b       	or	r24, r25
     d50:	d1 f4       	brne	.+52     	; 0xd86 <main+0x2e4>



static inline bool get_port_pin_level(gpio *GPIOx)
{
	uint8_t *tmp_port = GPIOx->port-2;
     d52:	a3 e6       	ldi	r26, 0x63	; 99
     d54:	b1 e0       	ldi	r27, 0x01	; 1
     d56:	ed 91       	ld	r30, X+
     d58:	fc 91       	ld	r31, X
     d5a:	11 97       	sbiw	r26, 0x01	; 1
	return *tmp_port & (1 << GPIOx->pin);
     d5c:	32 97       	sbiw	r30, 0x02	; 2
     d5e:	50 81       	ld	r21, Z
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	9c 01       	movw	r18, r24
     d66:	12 96       	adiw	r26, 0x02	; 2
     d68:	0c 90       	ld	r0, X
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <main+0x2ce>
     d6c:	22 0f       	add	r18, r18
     d6e:	33 1f       	adc	r19, r19
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <main+0x2ca>
     d74:	85 2f       	mov	r24, r21
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	82 23       	and	r24, r18
     d7a:	93 23       	and	r25, r19
     d7c:	89 2b       	or	r24, r25
     d7e:	19 f4       	brne	.+6      	; 0xd86 <main+0x2e4>
					//uart_send_string((uint8_t *)"Pir sensors wait\n\r");
					}else{
					active_timer--;
     d80:	41 50       	subi	r20, 0x01	; 1
     d82:	40 93 ae 02 	sts	0x02AE, r20	; 0x8002ae <active_timer>
					//uart_send_string((uint8_t *)"countdown\n\r");
				}
			}
		}
		
		if(BAT_VOLT < bat_critical_level){
     d86:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <BAT_VOLT>
     d8a:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <BAT_VOLT+0x1>
     d8e:	82 37       	cpi	r24, 0x72	; 114
     d90:	91 40       	sbci	r25, 0x01	; 1
     d92:	80 f4       	brcc	.+32     	; 0xdb4 <main+0x312>
			set_pin_level(&bat_ritical_led, true);
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	87 e5       	ldi	r24, 0x57	; 87
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 cb 00 	call	0x196	; 0x196 <set_pin_level>
     d9e:	8f e6       	ldi	r24, 0x6F	; 111
     da0:	97 e1       	ldi	r25, 0x17	; 23
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	f1 f7       	brne	.-4      	; 0xda2 <main+0x300>
     da6:	00 c0       	rjmp	.+0      	; 0xda8 <main+0x306>
     da8:	00 00       	nop
			_delay_ms(bat_critical_led_time);
			set_pin_level(&bat_ritical_led, false);
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	87 e5       	ldi	r24, 0x57	; 87
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 cb 00 	call	0x196	; 0x196 <set_pin_level>
		}
		sleep_cpu();
     db4:	88 95       	sleep
	}
     db6:	ec ce       	rjmp	.-552    	; 0xb90 <main+0xee>

00000db8 <__fixunssfsi>:
     db8:	0e 94 50 07 	call	0xea0	; 0xea0 <__fp_splitA>
     dbc:	88 f0       	brcs	.+34     	; 0xde0 <__fixunssfsi+0x28>
     dbe:	9f 57       	subi	r25, 0x7F	; 127
     dc0:	98 f0       	brcs	.+38     	; 0xde8 <__fixunssfsi+0x30>
     dc2:	b9 2f       	mov	r27, r25
     dc4:	99 27       	eor	r25, r25
     dc6:	b7 51       	subi	r27, 0x17	; 23
     dc8:	b0 f0       	brcs	.+44     	; 0xdf6 <__fixunssfsi+0x3e>
     dca:	e1 f0       	breq	.+56     	; 0xe04 <__fixunssfsi+0x4c>
     dcc:	66 0f       	add	r22, r22
     dce:	77 1f       	adc	r23, r23
     dd0:	88 1f       	adc	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	1a f0       	brmi	.+6      	; 0xddc <__fixunssfsi+0x24>
     dd6:	ba 95       	dec	r27
     dd8:	c9 f7       	brne	.-14     	; 0xdcc <__fixunssfsi+0x14>
     dda:	14 c0       	rjmp	.+40     	; 0xe04 <__fixunssfsi+0x4c>
     ddc:	b1 30       	cpi	r27, 0x01	; 1
     dde:	91 f0       	breq	.+36     	; 0xe04 <__fixunssfsi+0x4c>
     de0:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fp_zero>
     de4:	b1 e0       	ldi	r27, 0x01	; 1
     de6:	08 95       	ret
     de8:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_zero>
     dec:	67 2f       	mov	r22, r23
     dee:	78 2f       	mov	r23, r24
     df0:	88 27       	eor	r24, r24
     df2:	b8 5f       	subi	r27, 0xF8	; 248
     df4:	39 f0       	breq	.+14     	; 0xe04 <__fixunssfsi+0x4c>
     df6:	b9 3f       	cpi	r27, 0xF9	; 249
     df8:	cc f3       	brlt	.-14     	; 0xdec <__fixunssfsi+0x34>
     dfa:	86 95       	lsr	r24
     dfc:	77 95       	ror	r23
     dfe:	67 95       	ror	r22
     e00:	b3 95       	inc	r27
     e02:	d9 f7       	brne	.-10     	; 0xdfa <__fixunssfsi+0x42>
     e04:	3e f4       	brtc	.+14     	; 0xe14 <__fixunssfsi+0x5c>
     e06:	90 95       	com	r25
     e08:	80 95       	com	r24
     e0a:	70 95       	com	r23
     e0c:	61 95       	neg	r22
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	8f 4f       	sbci	r24, 0xFF	; 255
     e12:	9f 4f       	sbci	r25, 0xFF	; 255
     e14:	08 95       	ret

00000e16 <__floatunsisf>:
     e16:	e8 94       	clt
     e18:	09 c0       	rjmp	.+18     	; 0xe2c <__floatsisf+0x12>

00000e1a <__floatsisf>:
     e1a:	97 fb       	bst	r25, 7
     e1c:	3e f4       	brtc	.+14     	; 0xe2c <__floatsisf+0x12>
     e1e:	90 95       	com	r25
     e20:	80 95       	com	r24
     e22:	70 95       	com	r23
     e24:	61 95       	neg	r22
     e26:	7f 4f       	sbci	r23, 0xFF	; 255
     e28:	8f 4f       	sbci	r24, 0xFF	; 255
     e2a:	9f 4f       	sbci	r25, 0xFF	; 255
     e2c:	99 23       	and	r25, r25
     e2e:	a9 f0       	breq	.+42     	; 0xe5a <__floatsisf+0x40>
     e30:	f9 2f       	mov	r31, r25
     e32:	96 e9       	ldi	r25, 0x96	; 150
     e34:	bb 27       	eor	r27, r27
     e36:	93 95       	inc	r25
     e38:	f6 95       	lsr	r31
     e3a:	87 95       	ror	r24
     e3c:	77 95       	ror	r23
     e3e:	67 95       	ror	r22
     e40:	b7 95       	ror	r27
     e42:	f1 11       	cpse	r31, r1
     e44:	f8 cf       	rjmp	.-16     	; 0xe36 <__floatsisf+0x1c>
     e46:	fa f4       	brpl	.+62     	; 0xe86 <__floatsisf+0x6c>
     e48:	bb 0f       	add	r27, r27
     e4a:	11 f4       	brne	.+4      	; 0xe50 <__floatsisf+0x36>
     e4c:	60 ff       	sbrs	r22, 0
     e4e:	1b c0       	rjmp	.+54     	; 0xe86 <__floatsisf+0x6c>
     e50:	6f 5f       	subi	r22, 0xFF	; 255
     e52:	7f 4f       	sbci	r23, 0xFF	; 255
     e54:	8f 4f       	sbci	r24, 0xFF	; 255
     e56:	9f 4f       	sbci	r25, 0xFF	; 255
     e58:	16 c0       	rjmp	.+44     	; 0xe86 <__floatsisf+0x6c>
     e5a:	88 23       	and	r24, r24
     e5c:	11 f0       	breq	.+4      	; 0xe62 <__floatsisf+0x48>
     e5e:	96 e9       	ldi	r25, 0x96	; 150
     e60:	11 c0       	rjmp	.+34     	; 0xe84 <__floatsisf+0x6a>
     e62:	77 23       	and	r23, r23
     e64:	21 f0       	breq	.+8      	; 0xe6e <__floatsisf+0x54>
     e66:	9e e8       	ldi	r25, 0x8E	; 142
     e68:	87 2f       	mov	r24, r23
     e6a:	76 2f       	mov	r23, r22
     e6c:	05 c0       	rjmp	.+10     	; 0xe78 <__floatsisf+0x5e>
     e6e:	66 23       	and	r22, r22
     e70:	71 f0       	breq	.+28     	; 0xe8e <__floatsisf+0x74>
     e72:	96 e8       	ldi	r25, 0x86	; 134
     e74:	86 2f       	mov	r24, r22
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	2a f0       	brmi	.+10     	; 0xe86 <__floatsisf+0x6c>
     e7c:	9a 95       	dec	r25
     e7e:	66 0f       	add	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	88 1f       	adc	r24, r24
     e84:	da f7       	brpl	.-10     	; 0xe7c <__floatsisf+0x62>
     e86:	88 0f       	add	r24, r24
     e88:	96 95       	lsr	r25
     e8a:	87 95       	ror	r24
     e8c:	97 f9       	bld	r25, 7
     e8e:	08 95       	ret

00000e90 <__fp_split3>:
     e90:	57 fd       	sbrc	r21, 7
     e92:	90 58       	subi	r25, 0x80	; 128
     e94:	44 0f       	add	r20, r20
     e96:	55 1f       	adc	r21, r21
     e98:	59 f0       	breq	.+22     	; 0xeb0 <__fp_splitA+0x10>
     e9a:	5f 3f       	cpi	r21, 0xFF	; 255
     e9c:	71 f0       	breq	.+28     	; 0xeba <__fp_splitA+0x1a>
     e9e:	47 95       	ror	r20

00000ea0 <__fp_splitA>:
     ea0:	88 0f       	add	r24, r24
     ea2:	97 fb       	bst	r25, 7
     ea4:	99 1f       	adc	r25, r25
     ea6:	61 f0       	breq	.+24     	; 0xec0 <__fp_splitA+0x20>
     ea8:	9f 3f       	cpi	r25, 0xFF	; 255
     eaa:	79 f0       	breq	.+30     	; 0xeca <__fp_splitA+0x2a>
     eac:	87 95       	ror	r24
     eae:	08 95       	ret
     eb0:	12 16       	cp	r1, r18
     eb2:	13 06       	cpc	r1, r19
     eb4:	14 06       	cpc	r1, r20
     eb6:	55 1f       	adc	r21, r21
     eb8:	f2 cf       	rjmp	.-28     	; 0xe9e <__fp_split3+0xe>
     eba:	46 95       	lsr	r20
     ebc:	f1 df       	rcall	.-30     	; 0xea0 <__fp_splitA>
     ebe:	08 c0       	rjmp	.+16     	; 0xed0 <__fp_splitA+0x30>
     ec0:	16 16       	cp	r1, r22
     ec2:	17 06       	cpc	r1, r23
     ec4:	18 06       	cpc	r1, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	f1 cf       	rjmp	.-30     	; 0xeac <__fp_splitA+0xc>
     eca:	86 95       	lsr	r24
     ecc:	71 05       	cpc	r23, r1
     ece:	61 05       	cpc	r22, r1
     ed0:	08 94       	sec
     ed2:	08 95       	ret

00000ed4 <__fp_zero>:
     ed4:	e8 94       	clt

00000ed6 <__fp_szero>:
     ed6:	bb 27       	eor	r27, r27
     ed8:	66 27       	eor	r22, r22
     eda:	77 27       	eor	r23, r23
     edc:	cb 01       	movw	r24, r22
     ede:	97 f9       	bld	r25, 7
     ee0:	08 95       	ret

00000ee2 <__mulsf3>:
     ee2:	0e 94 84 07 	call	0xf08	; 0xf08 <__mulsf3x>
     ee6:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__fp_round>
     eea:	0e 94 e7 07 	call	0xfce	; 0xfce <__fp_pscA>
     eee:	38 f0       	brcs	.+14     	; 0xefe <__mulsf3+0x1c>
     ef0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__fp_pscB>
     ef4:	20 f0       	brcs	.+8      	; 0xefe <__mulsf3+0x1c>
     ef6:	95 23       	and	r25, r21
     ef8:	11 f0       	breq	.+4      	; 0xefe <__mulsf3+0x1c>
     efa:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_inf>
     efe:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__fp_nan>
     f02:	11 24       	eor	r1, r1
     f04:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__fp_szero>

00000f08 <__mulsf3x>:
     f08:	0e 94 48 07 	call	0xe90	; 0xe90 <__fp_split3>
     f0c:	70 f3       	brcs	.-36     	; 0xeea <__mulsf3+0x8>

00000f0e <__mulsf3_pse>:
     f0e:	95 9f       	mul	r25, r21
     f10:	c1 f3       	breq	.-16     	; 0xf02 <__mulsf3+0x20>
     f12:	95 0f       	add	r25, r21
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	55 1f       	adc	r21, r21
     f18:	62 9f       	mul	r22, r18
     f1a:	f0 01       	movw	r30, r0
     f1c:	72 9f       	mul	r23, r18
     f1e:	bb 27       	eor	r27, r27
     f20:	f0 0d       	add	r31, r0
     f22:	b1 1d       	adc	r27, r1
     f24:	63 9f       	mul	r22, r19
     f26:	aa 27       	eor	r26, r26
     f28:	f0 0d       	add	r31, r0
     f2a:	b1 1d       	adc	r27, r1
     f2c:	aa 1f       	adc	r26, r26
     f2e:	64 9f       	mul	r22, r20
     f30:	66 27       	eor	r22, r22
     f32:	b0 0d       	add	r27, r0
     f34:	a1 1d       	adc	r26, r1
     f36:	66 1f       	adc	r22, r22
     f38:	82 9f       	mul	r24, r18
     f3a:	22 27       	eor	r18, r18
     f3c:	b0 0d       	add	r27, r0
     f3e:	a1 1d       	adc	r26, r1
     f40:	62 1f       	adc	r22, r18
     f42:	73 9f       	mul	r23, r19
     f44:	b0 0d       	add	r27, r0
     f46:	a1 1d       	adc	r26, r1
     f48:	62 1f       	adc	r22, r18
     f4a:	83 9f       	mul	r24, r19
     f4c:	a0 0d       	add	r26, r0
     f4e:	61 1d       	adc	r22, r1
     f50:	22 1f       	adc	r18, r18
     f52:	74 9f       	mul	r23, r20
     f54:	33 27       	eor	r19, r19
     f56:	a0 0d       	add	r26, r0
     f58:	61 1d       	adc	r22, r1
     f5a:	23 1f       	adc	r18, r19
     f5c:	84 9f       	mul	r24, r20
     f5e:	60 0d       	add	r22, r0
     f60:	21 1d       	adc	r18, r1
     f62:	82 2f       	mov	r24, r18
     f64:	76 2f       	mov	r23, r22
     f66:	6a 2f       	mov	r22, r26
     f68:	11 24       	eor	r1, r1
     f6a:	9f 57       	subi	r25, 0x7F	; 127
     f6c:	50 40       	sbci	r21, 0x00	; 0
     f6e:	9a f0       	brmi	.+38     	; 0xf96 <__mulsf3_pse+0x88>
     f70:	f1 f0       	breq	.+60     	; 0xfae <__mulsf3_pse+0xa0>
     f72:	88 23       	and	r24, r24
     f74:	4a f0       	brmi	.+18     	; 0xf88 <__mulsf3_pse+0x7a>
     f76:	ee 0f       	add	r30, r30
     f78:	ff 1f       	adc	r31, r31
     f7a:	bb 1f       	adc	r27, r27
     f7c:	66 1f       	adc	r22, r22
     f7e:	77 1f       	adc	r23, r23
     f80:	88 1f       	adc	r24, r24
     f82:	91 50       	subi	r25, 0x01	; 1
     f84:	50 40       	sbci	r21, 0x00	; 0
     f86:	a9 f7       	brne	.-22     	; 0xf72 <__mulsf3_pse+0x64>
     f88:	9e 3f       	cpi	r25, 0xFE	; 254
     f8a:	51 05       	cpc	r21, r1
     f8c:	80 f0       	brcs	.+32     	; 0xfae <__mulsf3_pse+0xa0>
     f8e:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_inf>
     f92:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__fp_szero>
     f96:	5f 3f       	cpi	r21, 0xFF	; 255
     f98:	e4 f3       	brlt	.-8      	; 0xf92 <__mulsf3_pse+0x84>
     f9a:	98 3e       	cpi	r25, 0xE8	; 232
     f9c:	d4 f3       	brlt	.-12     	; 0xf92 <__mulsf3_pse+0x84>
     f9e:	86 95       	lsr	r24
     fa0:	77 95       	ror	r23
     fa2:	67 95       	ror	r22
     fa4:	b7 95       	ror	r27
     fa6:	f7 95       	ror	r31
     fa8:	e7 95       	ror	r30
     faa:	9f 5f       	subi	r25, 0xFF	; 255
     fac:	c1 f7       	brne	.-16     	; 0xf9e <__mulsf3_pse+0x90>
     fae:	fe 2b       	or	r31, r30
     fb0:	88 0f       	add	r24, r24
     fb2:	91 1d       	adc	r25, r1
     fb4:	96 95       	lsr	r25
     fb6:	87 95       	ror	r24
     fb8:	97 f9       	bld	r25, 7
     fba:	08 95       	ret

00000fbc <__fp_inf>:
     fbc:	97 f9       	bld	r25, 7
     fbe:	9f 67       	ori	r25, 0x7F	; 127
     fc0:	80 e8       	ldi	r24, 0x80	; 128
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	08 95       	ret

00000fc8 <__fp_nan>:
     fc8:	9f ef       	ldi	r25, 0xFF	; 255
     fca:	80 ec       	ldi	r24, 0xC0	; 192
     fcc:	08 95       	ret

00000fce <__fp_pscA>:
     fce:	00 24       	eor	r0, r0
     fd0:	0a 94       	dec	r0
     fd2:	16 16       	cp	r1, r22
     fd4:	17 06       	cpc	r1, r23
     fd6:	18 06       	cpc	r1, r24
     fd8:	09 06       	cpc	r0, r25
     fda:	08 95       	ret

00000fdc <__fp_pscB>:
     fdc:	00 24       	eor	r0, r0
     fde:	0a 94       	dec	r0
     fe0:	12 16       	cp	r1, r18
     fe2:	13 06       	cpc	r1, r19
     fe4:	14 06       	cpc	r1, r20
     fe6:	05 06       	cpc	r0, r21
     fe8:	08 95       	ret

00000fea <__fp_round>:
     fea:	09 2e       	mov	r0, r25
     fec:	03 94       	inc	r0
     fee:	00 0c       	add	r0, r0
     ff0:	11 f4       	brne	.+4      	; 0xff6 <__fp_round+0xc>
     ff2:	88 23       	and	r24, r24
     ff4:	52 f0       	brmi	.+20     	; 0x100a <__fp_round+0x20>
     ff6:	bb 0f       	add	r27, r27
     ff8:	40 f4       	brcc	.+16     	; 0x100a <__fp_round+0x20>
     ffa:	bf 2b       	or	r27, r31
     ffc:	11 f4       	brne	.+4      	; 0x1002 <__fp_round+0x18>
     ffe:	60 ff       	sbrs	r22, 0
    1000:	04 c0       	rjmp	.+8      	; 0x100a <__fp_round+0x20>
    1002:	6f 5f       	subi	r22, 0xFF	; 255
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	8f 4f       	sbci	r24, 0xFF	; 255
    1008:	9f 4f       	sbci	r25, 0xFF	; 255
    100a:	08 95       	ret

0000100c <__udivmodsi4>:
    100c:	a1 e2       	ldi	r26, 0x21	; 33
    100e:	1a 2e       	mov	r1, r26
    1010:	aa 1b       	sub	r26, r26
    1012:	bb 1b       	sub	r27, r27
    1014:	fd 01       	movw	r30, r26
    1016:	0d c0       	rjmp	.+26     	; 0x1032 <__udivmodsi4_ep>

00001018 <__udivmodsi4_loop>:
    1018:	aa 1f       	adc	r26, r26
    101a:	bb 1f       	adc	r27, r27
    101c:	ee 1f       	adc	r30, r30
    101e:	ff 1f       	adc	r31, r31
    1020:	a2 17       	cp	r26, r18
    1022:	b3 07       	cpc	r27, r19
    1024:	e4 07       	cpc	r30, r20
    1026:	f5 07       	cpc	r31, r21
    1028:	20 f0       	brcs	.+8      	; 0x1032 <__udivmodsi4_ep>
    102a:	a2 1b       	sub	r26, r18
    102c:	b3 0b       	sbc	r27, r19
    102e:	e4 0b       	sbc	r30, r20
    1030:	f5 0b       	sbc	r31, r21

00001032 <__udivmodsi4_ep>:
    1032:	66 1f       	adc	r22, r22
    1034:	77 1f       	adc	r23, r23
    1036:	88 1f       	adc	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	1a 94       	dec	r1
    103c:	69 f7       	brne	.-38     	; 0x1018 <__udivmodsi4_loop>
    103e:	60 95       	com	r22
    1040:	70 95       	com	r23
    1042:	80 95       	com	r24
    1044:	90 95       	com	r25
    1046:	9b 01       	movw	r18, r22
    1048:	ac 01       	movw	r20, r24
    104a:	bd 01       	movw	r22, r26
    104c:	cf 01       	movw	r24, r30
    104e:	08 95       	ret

00001050 <__muluhisi3>:
    1050:	0e 94 33 08 	call	0x1066	; 0x1066 <__umulhisi3>
    1054:	a5 9f       	mul	r26, r21
    1056:	90 0d       	add	r25, r0
    1058:	b4 9f       	mul	r27, r20
    105a:	90 0d       	add	r25, r0
    105c:	a4 9f       	mul	r26, r20
    105e:	80 0d       	add	r24, r0
    1060:	91 1d       	adc	r25, r1
    1062:	11 24       	eor	r1, r1
    1064:	08 95       	ret

00001066 <__umulhisi3>:
    1066:	a2 9f       	mul	r26, r18
    1068:	b0 01       	movw	r22, r0
    106a:	b3 9f       	mul	r27, r19
    106c:	c0 01       	movw	r24, r0
    106e:	a3 9f       	mul	r26, r19
    1070:	70 0d       	add	r23, r0
    1072:	81 1d       	adc	r24, r1
    1074:	11 24       	eor	r1, r1
    1076:	91 1d       	adc	r25, r1
    1078:	b2 9f       	mul	r27, r18
    107a:	70 0d       	add	r23, r0
    107c:	81 1d       	adc	r24, r1
    107e:	11 24       	eor	r1, r1
    1080:	91 1d       	adc	r25, r1
    1082:	08 95       	ret

00001084 <sprintf>:
    1084:	ae e0       	ldi	r26, 0x0E	; 14
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e8 e4       	ldi	r30, 0x48	; 72
    108a:	f8 e0       	ldi	r31, 0x08	; 8
    108c:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__prologue_saves__+0x1c>
    1090:	0d 89       	ldd	r16, Y+21	; 0x15
    1092:	1e 89       	ldd	r17, Y+22	; 0x16
    1094:	86 e0       	ldi	r24, 0x06	; 6
    1096:	8c 83       	std	Y+4, r24	; 0x04
    1098:	1a 83       	std	Y+2, r17	; 0x02
    109a:	09 83       	std	Y+1, r16	; 0x01
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	9f e7       	ldi	r25, 0x7F	; 127
    10a0:	9e 83       	std	Y+6, r25	; 0x06
    10a2:	8d 83       	std	Y+5, r24	; 0x05
    10a4:	ae 01       	movw	r20, r28
    10a6:	47 5e       	subi	r20, 0xE7	; 231
    10a8:	5f 4f       	sbci	r21, 0xFF	; 255
    10aa:	6f 89       	ldd	r22, Y+23	; 0x17
    10ac:	78 8d       	ldd	r23, Y+24	; 0x18
    10ae:	ce 01       	movw	r24, r28
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	0e 94 64 08 	call	0x10c8	; 0x10c8 <vfprintf>
    10b6:	ef 81       	ldd	r30, Y+7	; 0x07
    10b8:	f8 85       	ldd	r31, Y+8	; 0x08
    10ba:	e0 0f       	add	r30, r16
    10bc:	f1 1f       	adc	r31, r17
    10be:	10 82       	st	Z, r1
    10c0:	2e 96       	adiw	r28, 0x0e	; 14
    10c2:	e4 e0       	ldi	r30, 0x04	; 4
    10c4:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__epilogue_restores__+0x1c>

000010c8 <vfprintf>:
    10c8:	ab e0       	ldi	r26, 0x0B	; 11
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	ea e6       	ldi	r30, 0x6A	; 106
    10ce:	f8 e0       	ldi	r31, 0x08	; 8
    10d0:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__prologue_saves__>
    10d4:	6c 01       	movw	r12, r24
    10d6:	7b 01       	movw	r14, r22
    10d8:	8a 01       	movw	r16, r20
    10da:	fc 01       	movw	r30, r24
    10dc:	17 82       	std	Z+7, r1	; 0x07
    10de:	16 82       	std	Z+6, r1	; 0x06
    10e0:	83 81       	ldd	r24, Z+3	; 0x03
    10e2:	81 ff       	sbrs	r24, 1
    10e4:	cc c1       	rjmp	.+920    	; 0x147e <vfprintf+0x3b6>
    10e6:	ce 01       	movw	r24, r28
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	3c 01       	movw	r6, r24
    10ec:	f6 01       	movw	r30, r12
    10ee:	93 81       	ldd	r25, Z+3	; 0x03
    10f0:	f7 01       	movw	r30, r14
    10f2:	93 fd       	sbrc	r25, 3
    10f4:	85 91       	lpm	r24, Z+
    10f6:	93 ff       	sbrs	r25, 3
    10f8:	81 91       	ld	r24, Z+
    10fa:	7f 01       	movw	r14, r30
    10fc:	88 23       	and	r24, r24
    10fe:	09 f4       	brne	.+2      	; 0x1102 <vfprintf+0x3a>
    1100:	ba c1       	rjmp	.+884    	; 0x1476 <vfprintf+0x3ae>
    1102:	85 32       	cpi	r24, 0x25	; 37
    1104:	39 f4       	brne	.+14     	; 0x1114 <vfprintf+0x4c>
    1106:	93 fd       	sbrc	r25, 3
    1108:	85 91       	lpm	r24, Z+
    110a:	93 ff       	sbrs	r25, 3
    110c:	81 91       	ld	r24, Z+
    110e:	7f 01       	movw	r14, r30
    1110:	85 32       	cpi	r24, 0x25	; 37
    1112:	29 f4       	brne	.+10     	; 0x111e <vfprintf+0x56>
    1114:	b6 01       	movw	r22, r12
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <fputc>
    111c:	e7 cf       	rjmp	.-50     	; 0x10ec <vfprintf+0x24>
    111e:	91 2c       	mov	r9, r1
    1120:	21 2c       	mov	r2, r1
    1122:	31 2c       	mov	r3, r1
    1124:	ff e1       	ldi	r31, 0x1F	; 31
    1126:	f3 15       	cp	r31, r3
    1128:	d8 f0       	brcs	.+54     	; 0x1160 <vfprintf+0x98>
    112a:	8b 32       	cpi	r24, 0x2B	; 43
    112c:	79 f0       	breq	.+30     	; 0x114c <vfprintf+0x84>
    112e:	38 f4       	brcc	.+14     	; 0x113e <vfprintf+0x76>
    1130:	80 32       	cpi	r24, 0x20	; 32
    1132:	79 f0       	breq	.+30     	; 0x1152 <vfprintf+0x8a>
    1134:	83 32       	cpi	r24, 0x23	; 35
    1136:	a1 f4       	brne	.+40     	; 0x1160 <vfprintf+0x98>
    1138:	23 2d       	mov	r18, r3
    113a:	20 61       	ori	r18, 0x10	; 16
    113c:	1d c0       	rjmp	.+58     	; 0x1178 <vfprintf+0xb0>
    113e:	8d 32       	cpi	r24, 0x2D	; 45
    1140:	61 f0       	breq	.+24     	; 0x115a <vfprintf+0x92>
    1142:	80 33       	cpi	r24, 0x30	; 48
    1144:	69 f4       	brne	.+26     	; 0x1160 <vfprintf+0x98>
    1146:	23 2d       	mov	r18, r3
    1148:	21 60       	ori	r18, 0x01	; 1
    114a:	16 c0       	rjmp	.+44     	; 0x1178 <vfprintf+0xb0>
    114c:	83 2d       	mov	r24, r3
    114e:	82 60       	ori	r24, 0x02	; 2
    1150:	38 2e       	mov	r3, r24
    1152:	e3 2d       	mov	r30, r3
    1154:	e4 60       	ori	r30, 0x04	; 4
    1156:	3e 2e       	mov	r3, r30
    1158:	2a c0       	rjmp	.+84     	; 0x11ae <vfprintf+0xe6>
    115a:	f3 2d       	mov	r31, r3
    115c:	f8 60       	ori	r31, 0x08	; 8
    115e:	1d c0       	rjmp	.+58     	; 0x119a <vfprintf+0xd2>
    1160:	37 fc       	sbrc	r3, 7
    1162:	2d c0       	rjmp	.+90     	; 0x11be <vfprintf+0xf6>
    1164:	20 ed       	ldi	r18, 0xD0	; 208
    1166:	28 0f       	add	r18, r24
    1168:	2a 30       	cpi	r18, 0x0A	; 10
    116a:	40 f0       	brcs	.+16     	; 0x117c <vfprintf+0xb4>
    116c:	8e 32       	cpi	r24, 0x2E	; 46
    116e:	b9 f4       	brne	.+46     	; 0x119e <vfprintf+0xd6>
    1170:	36 fc       	sbrc	r3, 6
    1172:	81 c1       	rjmp	.+770    	; 0x1476 <vfprintf+0x3ae>
    1174:	23 2d       	mov	r18, r3
    1176:	20 64       	ori	r18, 0x40	; 64
    1178:	32 2e       	mov	r3, r18
    117a:	19 c0       	rjmp	.+50     	; 0x11ae <vfprintf+0xe6>
    117c:	36 fe       	sbrs	r3, 6
    117e:	06 c0       	rjmp	.+12     	; 0x118c <vfprintf+0xc4>
    1180:	8a e0       	ldi	r24, 0x0A	; 10
    1182:	98 9e       	mul	r9, r24
    1184:	20 0d       	add	r18, r0
    1186:	11 24       	eor	r1, r1
    1188:	92 2e       	mov	r9, r18
    118a:	11 c0       	rjmp	.+34     	; 0x11ae <vfprintf+0xe6>
    118c:	ea e0       	ldi	r30, 0x0A	; 10
    118e:	2e 9e       	mul	r2, r30
    1190:	20 0d       	add	r18, r0
    1192:	11 24       	eor	r1, r1
    1194:	22 2e       	mov	r2, r18
    1196:	f3 2d       	mov	r31, r3
    1198:	f0 62       	ori	r31, 0x20	; 32
    119a:	3f 2e       	mov	r3, r31
    119c:	08 c0       	rjmp	.+16     	; 0x11ae <vfprintf+0xe6>
    119e:	8c 36       	cpi	r24, 0x6C	; 108
    11a0:	21 f4       	brne	.+8      	; 0x11aa <vfprintf+0xe2>
    11a2:	83 2d       	mov	r24, r3
    11a4:	80 68       	ori	r24, 0x80	; 128
    11a6:	38 2e       	mov	r3, r24
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <vfprintf+0xe6>
    11aa:	88 36       	cpi	r24, 0x68	; 104
    11ac:	41 f4       	brne	.+16     	; 0x11be <vfprintf+0xf6>
    11ae:	f7 01       	movw	r30, r14
    11b0:	93 fd       	sbrc	r25, 3
    11b2:	85 91       	lpm	r24, Z+
    11b4:	93 ff       	sbrs	r25, 3
    11b6:	81 91       	ld	r24, Z+
    11b8:	7f 01       	movw	r14, r30
    11ba:	81 11       	cpse	r24, r1
    11bc:	b3 cf       	rjmp	.-154    	; 0x1124 <vfprintf+0x5c>
    11be:	98 2f       	mov	r25, r24
    11c0:	9f 7d       	andi	r25, 0xDF	; 223
    11c2:	95 54       	subi	r25, 0x45	; 69
    11c4:	93 30       	cpi	r25, 0x03	; 3
    11c6:	28 f4       	brcc	.+10     	; 0x11d2 <vfprintf+0x10a>
    11c8:	0c 5f       	subi	r16, 0xFC	; 252
    11ca:	1f 4f       	sbci	r17, 0xFF	; 255
    11cc:	9f e3       	ldi	r25, 0x3F	; 63
    11ce:	99 83       	std	Y+1, r25	; 0x01
    11d0:	0d c0       	rjmp	.+26     	; 0x11ec <vfprintf+0x124>
    11d2:	83 36       	cpi	r24, 0x63	; 99
    11d4:	31 f0       	breq	.+12     	; 0x11e2 <vfprintf+0x11a>
    11d6:	83 37       	cpi	r24, 0x73	; 115
    11d8:	71 f0       	breq	.+28     	; 0x11f6 <vfprintf+0x12e>
    11da:	83 35       	cpi	r24, 0x53	; 83
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <vfprintf+0x118>
    11de:	59 c0       	rjmp	.+178    	; 0x1292 <vfprintf+0x1ca>
    11e0:	21 c0       	rjmp	.+66     	; 0x1224 <vfprintf+0x15c>
    11e2:	f8 01       	movw	r30, r16
    11e4:	80 81       	ld	r24, Z
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	0e 5f       	subi	r16, 0xFE	; 254
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
    11ec:	88 24       	eor	r8, r8
    11ee:	83 94       	inc	r8
    11f0:	91 2c       	mov	r9, r1
    11f2:	53 01       	movw	r10, r6
    11f4:	13 c0       	rjmp	.+38     	; 0x121c <vfprintf+0x154>
    11f6:	28 01       	movw	r4, r16
    11f8:	f2 e0       	ldi	r31, 0x02	; 2
    11fa:	4f 0e       	add	r4, r31
    11fc:	51 1c       	adc	r5, r1
    11fe:	f8 01       	movw	r30, r16
    1200:	a0 80       	ld	r10, Z
    1202:	b1 80       	ldd	r11, Z+1	; 0x01
    1204:	36 fe       	sbrs	r3, 6
    1206:	03 c0       	rjmp	.+6      	; 0x120e <vfprintf+0x146>
    1208:	69 2d       	mov	r22, r9
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <vfprintf+0x14a>
    120e:	6f ef       	ldi	r22, 0xFF	; 255
    1210:	7f ef       	ldi	r23, 0xFF	; 255
    1212:	c5 01       	movw	r24, r10
    1214:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <strnlen>
    1218:	4c 01       	movw	r8, r24
    121a:	82 01       	movw	r16, r4
    121c:	f3 2d       	mov	r31, r3
    121e:	ff 77       	andi	r31, 0x7F	; 127
    1220:	3f 2e       	mov	r3, r31
    1222:	16 c0       	rjmp	.+44     	; 0x1250 <vfprintf+0x188>
    1224:	28 01       	movw	r4, r16
    1226:	22 e0       	ldi	r18, 0x02	; 2
    1228:	42 0e       	add	r4, r18
    122a:	51 1c       	adc	r5, r1
    122c:	f8 01       	movw	r30, r16
    122e:	a0 80       	ld	r10, Z
    1230:	b1 80       	ldd	r11, Z+1	; 0x01
    1232:	36 fe       	sbrs	r3, 6
    1234:	03 c0       	rjmp	.+6      	; 0x123c <vfprintf+0x174>
    1236:	69 2d       	mov	r22, r9
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <vfprintf+0x178>
    123c:	6f ef       	ldi	r22, 0xFF	; 255
    123e:	7f ef       	ldi	r23, 0xFF	; 255
    1240:	c5 01       	movw	r24, r10
    1242:	0e 94 45 0a 	call	0x148a	; 0x148a <strnlen_P>
    1246:	4c 01       	movw	r8, r24
    1248:	f3 2d       	mov	r31, r3
    124a:	f0 68       	ori	r31, 0x80	; 128
    124c:	3f 2e       	mov	r3, r31
    124e:	82 01       	movw	r16, r4
    1250:	33 fc       	sbrc	r3, 3
    1252:	1b c0       	rjmp	.+54     	; 0x128a <vfprintf+0x1c2>
    1254:	82 2d       	mov	r24, r2
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	88 16       	cp	r8, r24
    125a:	99 06       	cpc	r9, r25
    125c:	b0 f4       	brcc	.+44     	; 0x128a <vfprintf+0x1c2>
    125e:	b6 01       	movw	r22, r12
    1260:	80 e2       	ldi	r24, 0x20	; 32
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <fputc>
    1268:	2a 94       	dec	r2
    126a:	f4 cf       	rjmp	.-24     	; 0x1254 <vfprintf+0x18c>
    126c:	f5 01       	movw	r30, r10
    126e:	37 fc       	sbrc	r3, 7
    1270:	85 91       	lpm	r24, Z+
    1272:	37 fe       	sbrs	r3, 7
    1274:	81 91       	ld	r24, Z+
    1276:	5f 01       	movw	r10, r30
    1278:	b6 01       	movw	r22, r12
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <fputc>
    1280:	21 10       	cpse	r2, r1
    1282:	2a 94       	dec	r2
    1284:	21 e0       	ldi	r18, 0x01	; 1
    1286:	82 1a       	sub	r8, r18
    1288:	91 08       	sbc	r9, r1
    128a:	81 14       	cp	r8, r1
    128c:	91 04       	cpc	r9, r1
    128e:	71 f7       	brne	.-36     	; 0x126c <vfprintf+0x1a4>
    1290:	e8 c0       	rjmp	.+464    	; 0x1462 <vfprintf+0x39a>
    1292:	84 36       	cpi	r24, 0x64	; 100
    1294:	11 f0       	breq	.+4      	; 0x129a <vfprintf+0x1d2>
    1296:	89 36       	cpi	r24, 0x69	; 105
    1298:	41 f5       	brne	.+80     	; 0x12ea <vfprintf+0x222>
    129a:	f8 01       	movw	r30, r16
    129c:	37 fe       	sbrs	r3, 7
    129e:	07 c0       	rjmp	.+14     	; 0x12ae <vfprintf+0x1e6>
    12a0:	60 81       	ld	r22, Z
    12a2:	71 81       	ldd	r23, Z+1	; 0x01
    12a4:	82 81       	ldd	r24, Z+2	; 0x02
    12a6:	93 81       	ldd	r25, Z+3	; 0x03
    12a8:	0c 5f       	subi	r16, 0xFC	; 252
    12aa:	1f 4f       	sbci	r17, 0xFF	; 255
    12ac:	08 c0       	rjmp	.+16     	; 0x12be <vfprintf+0x1f6>
    12ae:	60 81       	ld	r22, Z
    12b0:	71 81       	ldd	r23, Z+1	; 0x01
    12b2:	07 2e       	mov	r0, r23
    12b4:	00 0c       	add	r0, r0
    12b6:	88 0b       	sbc	r24, r24
    12b8:	99 0b       	sbc	r25, r25
    12ba:	0e 5f       	subi	r16, 0xFE	; 254
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
    12be:	f3 2d       	mov	r31, r3
    12c0:	ff 76       	andi	r31, 0x6F	; 111
    12c2:	3f 2e       	mov	r3, r31
    12c4:	97 ff       	sbrs	r25, 7
    12c6:	09 c0       	rjmp	.+18     	; 0x12da <vfprintf+0x212>
    12c8:	90 95       	com	r25
    12ca:	80 95       	com	r24
    12cc:	70 95       	com	r23
    12ce:	61 95       	neg	r22
    12d0:	7f 4f       	sbci	r23, 0xFF	; 255
    12d2:	8f 4f       	sbci	r24, 0xFF	; 255
    12d4:	9f 4f       	sbci	r25, 0xFF	; 255
    12d6:	f0 68       	ori	r31, 0x80	; 128
    12d8:	3f 2e       	mov	r3, r31
    12da:	2a e0       	ldi	r18, 0x0A	; 10
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	a3 01       	movw	r20, r6
    12e0:	0e 94 97 0a 	call	0x152e	; 0x152e <__ultoa_invert>
    12e4:	88 2e       	mov	r8, r24
    12e6:	86 18       	sub	r8, r6
    12e8:	45 c0       	rjmp	.+138    	; 0x1374 <vfprintf+0x2ac>
    12ea:	85 37       	cpi	r24, 0x75	; 117
    12ec:	31 f4       	brne	.+12     	; 0x12fa <vfprintf+0x232>
    12ee:	23 2d       	mov	r18, r3
    12f0:	2f 7e       	andi	r18, 0xEF	; 239
    12f2:	b2 2e       	mov	r11, r18
    12f4:	2a e0       	ldi	r18, 0x0A	; 10
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	25 c0       	rjmp	.+74     	; 0x1344 <vfprintf+0x27c>
    12fa:	93 2d       	mov	r25, r3
    12fc:	99 7f       	andi	r25, 0xF9	; 249
    12fe:	b9 2e       	mov	r11, r25
    1300:	8f 36       	cpi	r24, 0x6F	; 111
    1302:	c1 f0       	breq	.+48     	; 0x1334 <vfprintf+0x26c>
    1304:	18 f4       	brcc	.+6      	; 0x130c <vfprintf+0x244>
    1306:	88 35       	cpi	r24, 0x58	; 88
    1308:	79 f0       	breq	.+30     	; 0x1328 <vfprintf+0x260>
    130a:	b5 c0       	rjmp	.+362    	; 0x1476 <vfprintf+0x3ae>
    130c:	80 37       	cpi	r24, 0x70	; 112
    130e:	19 f0       	breq	.+6      	; 0x1316 <vfprintf+0x24e>
    1310:	88 37       	cpi	r24, 0x78	; 120
    1312:	21 f0       	breq	.+8      	; 0x131c <vfprintf+0x254>
    1314:	b0 c0       	rjmp	.+352    	; 0x1476 <vfprintf+0x3ae>
    1316:	e9 2f       	mov	r30, r25
    1318:	e0 61       	ori	r30, 0x10	; 16
    131a:	be 2e       	mov	r11, r30
    131c:	b4 fe       	sbrs	r11, 4
    131e:	0d c0       	rjmp	.+26     	; 0x133a <vfprintf+0x272>
    1320:	fb 2d       	mov	r31, r11
    1322:	f4 60       	ori	r31, 0x04	; 4
    1324:	bf 2e       	mov	r11, r31
    1326:	09 c0       	rjmp	.+18     	; 0x133a <vfprintf+0x272>
    1328:	34 fe       	sbrs	r3, 4
    132a:	0a c0       	rjmp	.+20     	; 0x1340 <vfprintf+0x278>
    132c:	29 2f       	mov	r18, r25
    132e:	26 60       	ori	r18, 0x06	; 6
    1330:	b2 2e       	mov	r11, r18
    1332:	06 c0       	rjmp	.+12     	; 0x1340 <vfprintf+0x278>
    1334:	28 e0       	ldi	r18, 0x08	; 8
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	05 c0       	rjmp	.+10     	; 0x1344 <vfprintf+0x27c>
    133a:	20 e1       	ldi	r18, 0x10	; 16
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <vfprintf+0x27c>
    1340:	20 e1       	ldi	r18, 0x10	; 16
    1342:	32 e0       	ldi	r19, 0x02	; 2
    1344:	f8 01       	movw	r30, r16
    1346:	b7 fe       	sbrs	r11, 7
    1348:	07 c0       	rjmp	.+14     	; 0x1358 <vfprintf+0x290>
    134a:	60 81       	ld	r22, Z
    134c:	71 81       	ldd	r23, Z+1	; 0x01
    134e:	82 81       	ldd	r24, Z+2	; 0x02
    1350:	93 81       	ldd	r25, Z+3	; 0x03
    1352:	0c 5f       	subi	r16, 0xFC	; 252
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	06 c0       	rjmp	.+12     	; 0x1364 <vfprintf+0x29c>
    1358:	60 81       	ld	r22, Z
    135a:	71 81       	ldd	r23, Z+1	; 0x01
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0e 5f       	subi	r16, 0xFE	; 254
    1362:	1f 4f       	sbci	r17, 0xFF	; 255
    1364:	a3 01       	movw	r20, r6
    1366:	0e 94 97 0a 	call	0x152e	; 0x152e <__ultoa_invert>
    136a:	88 2e       	mov	r8, r24
    136c:	86 18       	sub	r8, r6
    136e:	fb 2d       	mov	r31, r11
    1370:	ff 77       	andi	r31, 0x7F	; 127
    1372:	3f 2e       	mov	r3, r31
    1374:	36 fe       	sbrs	r3, 6
    1376:	0d c0       	rjmp	.+26     	; 0x1392 <vfprintf+0x2ca>
    1378:	23 2d       	mov	r18, r3
    137a:	2e 7f       	andi	r18, 0xFE	; 254
    137c:	a2 2e       	mov	r10, r18
    137e:	89 14       	cp	r8, r9
    1380:	58 f4       	brcc	.+22     	; 0x1398 <vfprintf+0x2d0>
    1382:	34 fe       	sbrs	r3, 4
    1384:	0b c0       	rjmp	.+22     	; 0x139c <vfprintf+0x2d4>
    1386:	32 fc       	sbrc	r3, 2
    1388:	09 c0       	rjmp	.+18     	; 0x139c <vfprintf+0x2d4>
    138a:	83 2d       	mov	r24, r3
    138c:	8e 7e       	andi	r24, 0xEE	; 238
    138e:	a8 2e       	mov	r10, r24
    1390:	05 c0       	rjmp	.+10     	; 0x139c <vfprintf+0x2d4>
    1392:	b8 2c       	mov	r11, r8
    1394:	a3 2c       	mov	r10, r3
    1396:	03 c0       	rjmp	.+6      	; 0x139e <vfprintf+0x2d6>
    1398:	b8 2c       	mov	r11, r8
    139a:	01 c0       	rjmp	.+2      	; 0x139e <vfprintf+0x2d6>
    139c:	b9 2c       	mov	r11, r9
    139e:	a4 fe       	sbrs	r10, 4
    13a0:	0f c0       	rjmp	.+30     	; 0x13c0 <vfprintf+0x2f8>
    13a2:	fe 01       	movw	r30, r28
    13a4:	e8 0d       	add	r30, r8
    13a6:	f1 1d       	adc	r31, r1
    13a8:	80 81       	ld	r24, Z
    13aa:	80 33       	cpi	r24, 0x30	; 48
    13ac:	21 f4       	brne	.+8      	; 0x13b6 <vfprintf+0x2ee>
    13ae:	9a 2d       	mov	r25, r10
    13b0:	99 7e       	andi	r25, 0xE9	; 233
    13b2:	a9 2e       	mov	r10, r25
    13b4:	09 c0       	rjmp	.+18     	; 0x13c8 <vfprintf+0x300>
    13b6:	a2 fe       	sbrs	r10, 2
    13b8:	06 c0       	rjmp	.+12     	; 0x13c6 <vfprintf+0x2fe>
    13ba:	b3 94       	inc	r11
    13bc:	b3 94       	inc	r11
    13be:	04 c0       	rjmp	.+8      	; 0x13c8 <vfprintf+0x300>
    13c0:	8a 2d       	mov	r24, r10
    13c2:	86 78       	andi	r24, 0x86	; 134
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <vfprintf+0x300>
    13c6:	b3 94       	inc	r11
    13c8:	a3 fc       	sbrc	r10, 3
    13ca:	11 c0       	rjmp	.+34     	; 0x13ee <vfprintf+0x326>
    13cc:	a0 fe       	sbrs	r10, 0
    13ce:	06 c0       	rjmp	.+12     	; 0x13dc <vfprintf+0x314>
    13d0:	b2 14       	cp	r11, r2
    13d2:	88 f4       	brcc	.+34     	; 0x13f6 <vfprintf+0x32e>
    13d4:	28 0c       	add	r2, r8
    13d6:	92 2c       	mov	r9, r2
    13d8:	9b 18       	sub	r9, r11
    13da:	0e c0       	rjmp	.+28     	; 0x13f8 <vfprintf+0x330>
    13dc:	b2 14       	cp	r11, r2
    13de:	60 f4       	brcc	.+24     	; 0x13f8 <vfprintf+0x330>
    13e0:	b6 01       	movw	r22, r12
    13e2:	80 e2       	ldi	r24, 0x20	; 32
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <fputc>
    13ea:	b3 94       	inc	r11
    13ec:	f7 cf       	rjmp	.-18     	; 0x13dc <vfprintf+0x314>
    13ee:	b2 14       	cp	r11, r2
    13f0:	18 f4       	brcc	.+6      	; 0x13f8 <vfprintf+0x330>
    13f2:	2b 18       	sub	r2, r11
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <vfprintf+0x332>
    13f6:	98 2c       	mov	r9, r8
    13f8:	21 2c       	mov	r2, r1
    13fa:	a4 fe       	sbrs	r10, 4
    13fc:	10 c0       	rjmp	.+32     	; 0x141e <vfprintf+0x356>
    13fe:	b6 01       	movw	r22, r12
    1400:	80 e3       	ldi	r24, 0x30	; 48
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <fputc>
    1408:	a2 fe       	sbrs	r10, 2
    140a:	17 c0       	rjmp	.+46     	; 0x143a <vfprintf+0x372>
    140c:	a1 fc       	sbrc	r10, 1
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <vfprintf+0x34e>
    1410:	88 e7       	ldi	r24, 0x78	; 120
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 c0       	rjmp	.+4      	; 0x141a <vfprintf+0x352>
    1416:	88 e5       	ldi	r24, 0x58	; 88
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	b6 01       	movw	r22, r12
    141c:	0c c0       	rjmp	.+24     	; 0x1436 <vfprintf+0x36e>
    141e:	8a 2d       	mov	r24, r10
    1420:	86 78       	andi	r24, 0x86	; 134
    1422:	59 f0       	breq	.+22     	; 0x143a <vfprintf+0x372>
    1424:	a1 fe       	sbrs	r10, 1
    1426:	02 c0       	rjmp	.+4      	; 0x142c <vfprintf+0x364>
    1428:	8b e2       	ldi	r24, 0x2B	; 43
    142a:	01 c0       	rjmp	.+2      	; 0x142e <vfprintf+0x366>
    142c:	80 e2       	ldi	r24, 0x20	; 32
    142e:	a7 fc       	sbrc	r10, 7
    1430:	8d e2       	ldi	r24, 0x2D	; 45
    1432:	b6 01       	movw	r22, r12
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <fputc>
    143a:	89 14       	cp	r8, r9
    143c:	38 f4       	brcc	.+14     	; 0x144c <vfprintf+0x384>
    143e:	b6 01       	movw	r22, r12
    1440:	80 e3       	ldi	r24, 0x30	; 48
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <fputc>
    1448:	9a 94       	dec	r9
    144a:	f7 cf       	rjmp	.-18     	; 0x143a <vfprintf+0x372>
    144c:	8a 94       	dec	r8
    144e:	f3 01       	movw	r30, r6
    1450:	e8 0d       	add	r30, r8
    1452:	f1 1d       	adc	r31, r1
    1454:	80 81       	ld	r24, Z
    1456:	b6 01       	movw	r22, r12
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <fputc>
    145e:	81 10       	cpse	r8, r1
    1460:	f5 cf       	rjmp	.-22     	; 0x144c <vfprintf+0x384>
    1462:	22 20       	and	r2, r2
    1464:	09 f4       	brne	.+2      	; 0x1468 <vfprintf+0x3a0>
    1466:	42 ce       	rjmp	.-892    	; 0x10ec <vfprintf+0x24>
    1468:	b6 01       	movw	r22, r12
    146a:	80 e2       	ldi	r24, 0x20	; 32
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <fputc>
    1472:	2a 94       	dec	r2
    1474:	f6 cf       	rjmp	.-20     	; 0x1462 <vfprintf+0x39a>
    1476:	f6 01       	movw	r30, r12
    1478:	86 81       	ldd	r24, Z+6	; 0x06
    147a:	97 81       	ldd	r25, Z+7	; 0x07
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <vfprintf+0x3ba>
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	9f ef       	ldi	r25, 0xFF	; 255
    1482:	2b 96       	adiw	r28, 0x0b	; 11
    1484:	e2 e1       	ldi	r30, 0x12	; 18
    1486:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__epilogue_restores__>

0000148a <strnlen_P>:
    148a:	fc 01       	movw	r30, r24
    148c:	05 90       	lpm	r0, Z+
    148e:	61 50       	subi	r22, 0x01	; 1
    1490:	70 40       	sbci	r23, 0x00	; 0
    1492:	01 10       	cpse	r0, r1
    1494:	d8 f7       	brcc	.-10     	; 0x148c <strnlen_P+0x2>
    1496:	80 95       	com	r24
    1498:	90 95       	com	r25
    149a:	8e 0f       	add	r24, r30
    149c:	9f 1f       	adc	r25, r31
    149e:	08 95       	ret

000014a0 <strnlen>:
    14a0:	fc 01       	movw	r30, r24
    14a2:	61 50       	subi	r22, 0x01	; 1
    14a4:	70 40       	sbci	r23, 0x00	; 0
    14a6:	01 90       	ld	r0, Z+
    14a8:	01 10       	cpse	r0, r1
    14aa:	d8 f7       	brcc	.-10     	; 0x14a2 <strnlen+0x2>
    14ac:	80 95       	com	r24
    14ae:	90 95       	com	r25
    14b0:	8e 0f       	add	r24, r30
    14b2:	9f 1f       	adc	r25, r31
    14b4:	08 95       	ret

000014b6 <fputc>:
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	fb 01       	movw	r30, r22
    14c0:	23 81       	ldd	r18, Z+3	; 0x03
    14c2:	21 fd       	sbrc	r18, 1
    14c4:	03 c0       	rjmp	.+6      	; 0x14cc <fputc+0x16>
    14c6:	8f ef       	ldi	r24, 0xFF	; 255
    14c8:	9f ef       	ldi	r25, 0xFF	; 255
    14ca:	2c c0       	rjmp	.+88     	; 0x1524 <fputc+0x6e>
    14cc:	22 ff       	sbrs	r18, 2
    14ce:	16 c0       	rjmp	.+44     	; 0x14fc <fputc+0x46>
    14d0:	46 81       	ldd	r20, Z+6	; 0x06
    14d2:	57 81       	ldd	r21, Z+7	; 0x07
    14d4:	24 81       	ldd	r18, Z+4	; 0x04
    14d6:	35 81       	ldd	r19, Z+5	; 0x05
    14d8:	42 17       	cp	r20, r18
    14da:	53 07       	cpc	r21, r19
    14dc:	44 f4       	brge	.+16     	; 0x14ee <fputc+0x38>
    14de:	a0 81       	ld	r26, Z
    14e0:	b1 81       	ldd	r27, Z+1	; 0x01
    14e2:	9d 01       	movw	r18, r26
    14e4:	2f 5f       	subi	r18, 0xFF	; 255
    14e6:	3f 4f       	sbci	r19, 0xFF	; 255
    14e8:	31 83       	std	Z+1, r19	; 0x01
    14ea:	20 83       	st	Z, r18
    14ec:	8c 93       	st	X, r24
    14ee:	26 81       	ldd	r18, Z+6	; 0x06
    14f0:	37 81       	ldd	r19, Z+7	; 0x07
    14f2:	2f 5f       	subi	r18, 0xFF	; 255
    14f4:	3f 4f       	sbci	r19, 0xFF	; 255
    14f6:	37 83       	std	Z+7, r19	; 0x07
    14f8:	26 83       	std	Z+6, r18	; 0x06
    14fa:	14 c0       	rjmp	.+40     	; 0x1524 <fputc+0x6e>
    14fc:	8b 01       	movw	r16, r22
    14fe:	ec 01       	movw	r28, r24
    1500:	fb 01       	movw	r30, r22
    1502:	00 84       	ldd	r0, Z+8	; 0x08
    1504:	f1 85       	ldd	r31, Z+9	; 0x09
    1506:	e0 2d       	mov	r30, r0
    1508:	09 95       	icall
    150a:	89 2b       	or	r24, r25
    150c:	e1 f6       	brne	.-72     	; 0x14c6 <fputc+0x10>
    150e:	d8 01       	movw	r26, r16
    1510:	16 96       	adiw	r26, 0x06	; 6
    1512:	8d 91       	ld	r24, X+
    1514:	9c 91       	ld	r25, X
    1516:	17 97       	sbiw	r26, 0x07	; 7
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	17 96       	adiw	r26, 0x07	; 7
    151c:	9c 93       	st	X, r25
    151e:	8e 93       	st	-X, r24
    1520:	16 97       	sbiw	r26, 0x06	; 6
    1522:	ce 01       	movw	r24, r28
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	08 95       	ret

0000152e <__ultoa_invert>:
    152e:	fa 01       	movw	r30, r20
    1530:	aa 27       	eor	r26, r26
    1532:	28 30       	cpi	r18, 0x08	; 8
    1534:	51 f1       	breq	.+84     	; 0x158a <__ultoa_invert+0x5c>
    1536:	20 31       	cpi	r18, 0x10	; 16
    1538:	81 f1       	breq	.+96     	; 0x159a <__ultoa_invert+0x6c>
    153a:	e8 94       	clt
    153c:	6f 93       	push	r22
    153e:	6e 7f       	andi	r22, 0xFE	; 254
    1540:	6e 5f       	subi	r22, 0xFE	; 254
    1542:	7f 4f       	sbci	r23, 0xFF	; 255
    1544:	8f 4f       	sbci	r24, 0xFF	; 255
    1546:	9f 4f       	sbci	r25, 0xFF	; 255
    1548:	af 4f       	sbci	r26, 0xFF	; 255
    154a:	b1 e0       	ldi	r27, 0x01	; 1
    154c:	3e d0       	rcall	.+124    	; 0x15ca <__ultoa_invert+0x9c>
    154e:	b4 e0       	ldi	r27, 0x04	; 4
    1550:	3c d0       	rcall	.+120    	; 0x15ca <__ultoa_invert+0x9c>
    1552:	67 0f       	add	r22, r23
    1554:	78 1f       	adc	r23, r24
    1556:	89 1f       	adc	r24, r25
    1558:	9a 1f       	adc	r25, r26
    155a:	a1 1d       	adc	r26, r1
    155c:	68 0f       	add	r22, r24
    155e:	79 1f       	adc	r23, r25
    1560:	8a 1f       	adc	r24, r26
    1562:	91 1d       	adc	r25, r1
    1564:	a1 1d       	adc	r26, r1
    1566:	6a 0f       	add	r22, r26
    1568:	71 1d       	adc	r23, r1
    156a:	81 1d       	adc	r24, r1
    156c:	91 1d       	adc	r25, r1
    156e:	a1 1d       	adc	r26, r1
    1570:	20 d0       	rcall	.+64     	; 0x15b2 <__ultoa_invert+0x84>
    1572:	09 f4       	brne	.+2      	; 0x1576 <__ultoa_invert+0x48>
    1574:	68 94       	set
    1576:	3f 91       	pop	r19
    1578:	2a e0       	ldi	r18, 0x0A	; 10
    157a:	26 9f       	mul	r18, r22
    157c:	11 24       	eor	r1, r1
    157e:	30 19       	sub	r19, r0
    1580:	30 5d       	subi	r19, 0xD0	; 208
    1582:	31 93       	st	Z+, r19
    1584:	de f6       	brtc	.-74     	; 0x153c <__ultoa_invert+0xe>
    1586:	cf 01       	movw	r24, r30
    1588:	08 95       	ret
    158a:	46 2f       	mov	r20, r22
    158c:	47 70       	andi	r20, 0x07	; 7
    158e:	40 5d       	subi	r20, 0xD0	; 208
    1590:	41 93       	st	Z+, r20
    1592:	b3 e0       	ldi	r27, 0x03	; 3
    1594:	0f d0       	rcall	.+30     	; 0x15b4 <__ultoa_invert+0x86>
    1596:	c9 f7       	brne	.-14     	; 0x158a <__ultoa_invert+0x5c>
    1598:	f6 cf       	rjmp	.-20     	; 0x1586 <__ultoa_invert+0x58>
    159a:	46 2f       	mov	r20, r22
    159c:	4f 70       	andi	r20, 0x0F	; 15
    159e:	40 5d       	subi	r20, 0xD0	; 208
    15a0:	4a 33       	cpi	r20, 0x3A	; 58
    15a2:	18 f0       	brcs	.+6      	; 0x15aa <__ultoa_invert+0x7c>
    15a4:	49 5d       	subi	r20, 0xD9	; 217
    15a6:	31 fd       	sbrc	r19, 1
    15a8:	40 52       	subi	r20, 0x20	; 32
    15aa:	41 93       	st	Z+, r20
    15ac:	02 d0       	rcall	.+4      	; 0x15b2 <__ultoa_invert+0x84>
    15ae:	a9 f7       	brne	.-22     	; 0x159a <__ultoa_invert+0x6c>
    15b0:	ea cf       	rjmp	.-44     	; 0x1586 <__ultoa_invert+0x58>
    15b2:	b4 e0       	ldi	r27, 0x04	; 4
    15b4:	a6 95       	lsr	r26
    15b6:	97 95       	ror	r25
    15b8:	87 95       	ror	r24
    15ba:	77 95       	ror	r23
    15bc:	67 95       	ror	r22
    15be:	ba 95       	dec	r27
    15c0:	c9 f7       	brne	.-14     	; 0x15b4 <__ultoa_invert+0x86>
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	61 05       	cpc	r22, r1
    15c6:	71 05       	cpc	r23, r1
    15c8:	08 95       	ret
    15ca:	9b 01       	movw	r18, r22
    15cc:	ac 01       	movw	r20, r24
    15ce:	0a 2e       	mov	r0, r26
    15d0:	06 94       	lsr	r0
    15d2:	57 95       	ror	r21
    15d4:	47 95       	ror	r20
    15d6:	37 95       	ror	r19
    15d8:	27 95       	ror	r18
    15da:	ba 95       	dec	r27
    15dc:	c9 f7       	brne	.-14     	; 0x15d0 <__ultoa_invert+0xa2>
    15de:	62 0f       	add	r22, r18
    15e0:	73 1f       	adc	r23, r19
    15e2:	84 1f       	adc	r24, r20
    15e4:	95 1f       	adc	r25, r21
    15e6:	a0 1d       	adc	r26, r0
    15e8:	08 95       	ret

000015ea <__prologue_saves__>:
    15ea:	2f 92       	push	r2
    15ec:	3f 92       	push	r3
    15ee:	4f 92       	push	r4
    15f0:	5f 92       	push	r5
    15f2:	6f 92       	push	r6
    15f4:	7f 92       	push	r7
    15f6:	8f 92       	push	r8
    15f8:	9f 92       	push	r9
    15fa:	af 92       	push	r10
    15fc:	bf 92       	push	r11
    15fe:	cf 92       	push	r12
    1600:	df 92       	push	r13
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	ca 1b       	sub	r28, r26
    1614:	db 0b       	sbc	r29, r27
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	09 94       	ijmp

00001622 <__epilogue_restores__>:
    1622:	2a 88       	ldd	r2, Y+18	; 0x12
    1624:	39 88       	ldd	r3, Y+17	; 0x11
    1626:	48 88       	ldd	r4, Y+16	; 0x10
    1628:	5f 84       	ldd	r5, Y+15	; 0x0f
    162a:	6e 84       	ldd	r6, Y+14	; 0x0e
    162c:	7d 84       	ldd	r7, Y+13	; 0x0d
    162e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1630:	9b 84       	ldd	r9, Y+11	; 0x0b
    1632:	aa 84       	ldd	r10, Y+10	; 0x0a
    1634:	b9 84       	ldd	r11, Y+9	; 0x09
    1636:	c8 84       	ldd	r12, Y+8	; 0x08
    1638:	df 80       	ldd	r13, Y+7	; 0x07
    163a:	ee 80       	ldd	r14, Y+6	; 0x06
    163c:	fd 80       	ldd	r15, Y+5	; 0x05
    163e:	0c 81       	ldd	r16, Y+4	; 0x04
    1640:	1b 81       	ldd	r17, Y+3	; 0x03
    1642:	aa 81       	ldd	r26, Y+2	; 0x02
    1644:	b9 81       	ldd	r27, Y+1	; 0x01
    1646:	ce 0f       	add	r28, r30
    1648:	d1 1d       	adc	r29, r1
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	ed 01       	movw	r28, r26
    1656:	08 95       	ret

00001658 <_exit>:
    1658:	f8 94       	cli

0000165a <__stop_program>:
    165a:	ff cf       	rjmp	.-2      	; 0x165a <__stop_program>
