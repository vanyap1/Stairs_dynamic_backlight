
backlight_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  000014d4  00001568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  008001ca  008001ca  00001632  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001632  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002557  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000120d  00000000  00000000  00003e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000136b  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a0  00000000  00000000  000063d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000adb  00000000  00000000  00006978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001662  00000000  00000000  00007453  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00008ab5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__vector_1>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 b8 04 	jmp	0x970	; 0x970 <__vector_18>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__vector_20>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_21>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 3b 03 	jmp	0x676	; 0x676 <__vector_40>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e4 ed       	ldi	r30, 0xD4	; 212
      c8:	f4 e1       	ldi	r31, 0x14	; 20
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	aa 3c       	cpi	r26, 0xCA	; 202
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	22 e0       	ldi	r18, 0x02	; 2
      d8:	aa ec       	ldi	r26, 0xCA	; 202
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a3 36       	cpi	r26, 0x63	; 99
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 7d 05 	call	0xafa	; 0xafa <main>
      ea:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_21>:

uint16_t get_adc(uint8_t source){
	adc_pin_select(source);
	//uint16_t adc_tmp_data = adc_convert();
	return adc_convert();
}
      f2:	1f 92       	push	r1
      f4:	0f 92       	push	r0
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	0f 92       	push	r0
      fa:	11 24       	eor	r1, r1
      fc:	8f 93       	push	r24
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     104:	8f 91       	pop	r24
     106:	0f 90       	pop	r0
     108:	0f be       	out	0x3f, r0	; 63
     10a:	0f 90       	pop	r0
     10c:	1f 90       	pop	r1
     10e:	18 95       	reti

00000110 <adc_init>:
     110:	ec e7       	ldi	r30, 0x7C	; 124
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	80 6c       	ori	r24, 0xC0	; 192
     118:	80 83       	st	Z, r24
     11a:	ea e7       	ldi	r30, 0x7A	; 122
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	8f 68       	ori	r24, 0x8F	; 143
     122:	80 83       	st	Z, r24
     124:	08 95       	ret

00000126 <adc_pin_select>:
     126:	ec e7       	ldi	r30, 0x7C	; 124
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	90 81       	ld	r25, Z
     12c:	90 7f       	andi	r25, 0xF0	; 240
     12e:	90 83       	st	Z, r25
     130:	90 81       	ld	r25, Z
     132:	89 2b       	or	r24, r25
     134:	80 83       	st	Z, r24
     136:	08 95       	ret

00000138 <adc_convert>:
     138:	ea e7       	ldi	r30, 0x7A	; 122
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	80 68       	ori	r24, 0x80	; 128
     140:	80 83       	st	Z, r24
     142:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     146:	80 81       	ld	r24, Z
     148:	80 64       	ori	r24, 0x40	; 64
     14a:	80 83       	st	Z, r24
     14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     150:	88 23       	and	r24, r24
     152:	e1 f3       	breq	.-8      	; 0x14c <adc_convert+0x14>
     154:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     158:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     15c:	ea e7       	ldi	r30, 0x7A	; 122
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	90 81       	ld	r25, Z
     162:	9f 77       	andi	r25, 0x7F	; 127
     164:	90 83       	st	Z, r25
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	98 2f       	mov	r25, r24
     16a:	88 27       	eor	r24, r24
     16c:	82 2b       	or	r24, r18
     16e:	08 95       	ret

00000170 <get_mVolt>:

uint16_t get_mVolt(uint8_t source){
	adc_pin_select(source);
     170:	0e 94 93 00 	call	0x126	; 0x126 <adc_pin_select>
	//uint16_t adc_tmp_data = adc_convert();
	return ADC_VOLT(adc_convert());
     174:	0e 94 9c 00 	call	0x138	; 0x138 <adc_convert>
     178:	bc 01       	movw	r22, r24
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 47 06 	call	0xc8e	; 0xc8e <__floatunsisf>
     182:	2d ec       	ldi	r18, 0xCD	; 205
     184:	3e e1       	ldi	r19, 0x1E	; 30
     186:	48 e9       	ldi	r20, 0x98	; 152
     188:	5f e3       	ldi	r21, 0x3F	; 63
     18a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__mulsf3>
     18e:	0e 94 18 06 	call	0xc30	; 0xc30 <__fixunssfsi>
}
     192:	cb 01       	movw	r24, r22
     194:	08 95       	ret

00000196 <set_pin_level>:

}


void set_port_level(gpio *GPIOx, const uint8_t mask){
	*GPIOx->port=mask;
     196:	66 23       	and	r22, r22
     198:	99 f0       	breq	.+38     	; 0x1c0 <set_pin_level+0x2a>
     19a:	dc 01       	movw	r26, r24
     19c:	ed 91       	ld	r30, X+
     19e:	fc 91       	ld	r31, X
     1a0:	11 97       	sbiw	r26, 0x01	; 1
     1a2:	21 e0       	ldi	r18, 0x01	; 1
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	a9 01       	movw	r20, r18
     1a8:	12 96       	adiw	r26, 0x02	; 2
     1aa:	0c 90       	ld	r0, X
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <set_pin_level+0x1c>
     1ae:	44 0f       	add	r20, r20
     1b0:	55 1f       	adc	r21, r21
     1b2:	0a 94       	dec	r0
     1b4:	e2 f7       	brpl	.-8      	; 0x1ae <set_pin_level+0x18>
     1b6:	ca 01       	movw	r24, r20
     1b8:	90 81       	ld	r25, Z
     1ba:	89 2b       	or	r24, r25
     1bc:	80 83       	st	Z, r24
     1be:	08 95       	ret
     1c0:	dc 01       	movw	r26, r24
     1c2:	ed 91       	ld	r30, X+
     1c4:	fc 91       	ld	r31, X
     1c6:	11 97       	sbiw	r26, 0x01	; 1
     1c8:	21 e0       	ldi	r18, 0x01	; 1
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	a9 01       	movw	r20, r18
     1ce:	12 96       	adiw	r26, 0x02	; 2
     1d0:	0c 90       	ld	r0, X
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <set_pin_level+0x42>
     1d4:	44 0f       	add	r20, r20
     1d6:	55 1f       	adc	r21, r21
     1d8:	0a 94       	dec	r0
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <set_pin_level+0x3e>
     1dc:	ca 01       	movw	r24, r20
     1de:	80 95       	com	r24
     1e0:	90 81       	ld	r25, Z
     1e2:	89 23       	and	r24, r25
     1e4:	80 83       	st	Z, r24
     1e6:	08 95       	ret

000001e8 <set_pin_dir>:
     1e8:	fc 01       	movw	r30, r24
     1ea:	30 81       	ld	r19, Z
     1ec:	21 81       	ldd	r18, Z+1	; 0x01
     1ee:	61 30       	cpi	r22, 0x01	; 1
     1f0:	99 f0       	breq	.+38     	; 0x218 <set_pin_dir+0x30>
     1f2:	18 f0       	brcs	.+6      	; 0x1fa <set_pin_dir+0x12>
     1f4:	62 30       	cpi	r22, 0x02	; 2
     1f6:	f1 f0       	breq	.+60     	; 0x234 <set_pin_dir+0x4c>
     1f8:	08 95       	ret
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	02 80       	ldd	r0, Z+2	; 0x02
     200:	02 c0       	rjmp	.+4      	; 0x206 <set_pin_dir+0x1e>
     202:	88 0f       	add	r24, r24
     204:	99 1f       	adc	r25, r25
     206:	0a 94       	dec	r0
     208:	e2 f7       	brpl	.-8      	; 0x202 <set_pin_dir+0x1a>
     20a:	e3 2f       	mov	r30, r19
     20c:	f2 2f       	mov	r31, r18
     20e:	80 95       	com	r24
     210:	92 91       	ld	r25, -Z
     212:	89 23       	and	r24, r25
     214:	80 83       	st	Z, r24
     216:	08 95       	ret
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 80       	ldd	r0, Z+2	; 0x02
     21e:	02 c0       	rjmp	.+4      	; 0x224 <set_pin_dir+0x3c>
     220:	88 0f       	add	r24, r24
     222:	99 1f       	adc	r25, r25
     224:	0a 94       	dec	r0
     226:	e2 f7       	brpl	.-8      	; 0x220 <set_pin_dir+0x38>
     228:	e3 2f       	mov	r30, r19
     22a:	f2 2f       	mov	r31, r18
     22c:	92 91       	ld	r25, -Z
     22e:	89 2b       	or	r24, r25
     230:	80 83       	st	Z, r24
     232:	08 95       	ret
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	ac 01       	movw	r20, r24
     23a:	02 80       	ldd	r0, Z+2	; 0x02
     23c:	02 c0       	rjmp	.+4      	; 0x242 <set_pin_dir+0x5a>
     23e:	44 0f       	add	r20, r20
     240:	55 1f       	adc	r21, r21
     242:	0a 94       	dec	r0
     244:	e2 f7       	brpl	.-8      	; 0x23e <set_pin_dir+0x56>
     246:	a3 2f       	mov	r26, r19
     248:	b2 2f       	mov	r27, r18
     24a:	40 95       	com	r20
     24c:	2e 91       	ld	r18, -X
     24e:	42 23       	and	r20, r18
     250:	4c 93       	st	X, r20
     252:	a0 81       	ld	r26, Z
     254:	b1 81       	ldd	r27, Z+1	; 0x01
     256:	02 80       	ldd	r0, Z+2	; 0x02
     258:	02 c0       	rjmp	.+4      	; 0x25e <set_pin_dir+0x76>
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	0a 94       	dec	r0
     260:	e2 f7       	brpl	.-8      	; 0x25a <set_pin_dir+0x72>
     262:	80 95       	com	r24
     264:	9c 91       	ld	r25, X
     266:	89 23       	and	r24, r25
     268:	8c 93       	st	X, r24
     26a:	08 95       	ret

0000026c <toggle_pin_level>:
}

void toggle_pin_level(gpio *GPIOx)
{
	uint8_t *tmp_port = GPIOx->port-2;
     26c:	dc 01       	movw	r26, r24
     26e:	ed 91       	ld	r30, X+
     270:	fc 91       	ld	r31, X
     272:	11 97       	sbiw	r26, 0x01	; 1
	*tmp_port = 1 << GPIOx->pin;
     274:	21 e0       	ldi	r18, 0x01	; 1
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	a9 01       	movw	r20, r18
     27a:	12 96       	adiw	r26, 0x02	; 2
     27c:	0c 90       	ld	r0, X
     27e:	02 c0       	rjmp	.+4      	; 0x284 <toggle_pin_level+0x18>
     280:	44 0f       	add	r20, r20
     282:	55 1f       	adc	r21, r21
     284:	0a 94       	dec	r0
     286:	e2 f7       	brpl	.-8      	; 0x280 <toggle_pin_level+0x14>
     288:	32 97       	sbiw	r30, 0x02	; 2
     28a:	40 83       	st	Z, r20
     28c:	08 95       	ret

0000028e <rtc_int_enable>:
};



void rtc_int_enable(rtc_date *RTCx , const uint16_t int_time){
	rtc_config_3[0] |= (1 << TIE);
     28e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
     292:	80 61       	ori	r24, 0x10	; 16
     294:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
	rtc_config_2[0] |= (1 << TD) | (1 << TE);
     298:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <rtc_config_2>
     29c:	81 61       	ori	r24, 0x11	; 17
     29e:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <rtc_config_2>
	
	twi_write(RTC_ADDR,TIMER_COUNTER0_REG,rtc_config_1,sizeof(rtc_config_1));
     2a2:	22 e0       	ldi	r18, 0x02	; 2
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	41 e0       	ldi	r20, 0x01	; 1
     2a8:	51 e0       	ldi	r21, 0x01	; 1
     2aa:	6b e0       	ldi	r22, 0x0B	; 11
     2ac:	82 e3       	ldi	r24, 0x32	; 50
     2ae:	0e 94 c7 03 	call	0x78e	; 0x78e <twi_write>
	twi_write(RTC_ADDR,EXT_REG,rtc_config_2,sizeof(rtc_config_2));
     2b2:	21 e0       	ldi	r18, 0x01	; 1
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	4b ec       	ldi	r20, 0xCB	; 203
     2b8:	51 e0       	ldi	r21, 0x01	; 1
     2ba:	6d e0       	ldi	r22, 0x0D	; 13
     2bc:	82 e3       	ldi	r24, 0x32	; 50
     2be:	0e 94 c7 03 	call	0x78e	; 0x78e <twi_write>
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
     2c2:	21 e0       	ldi	r18, 0x01	; 1
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	4a ec       	ldi	r20, 0xCA	; 202
     2c8:	51 e0       	ldi	r21, 0x01	; 1
     2ca:	6f e0       	ldi	r22, 0x0F	; 15
     2cc:	82 e3       	ldi	r24, 0x32	; 50
     2ce:	0e 94 c7 03 	call	0x78e	; 0x78e <twi_write>
     2d2:	08 95       	ret

000002d4 <BCDtoDEC>:
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
}

uint8_t BCDtoDEC(uint8_t val)
{
	return ((val / 0x10) * 10) + (val % 0x10);
     2d4:	98 2f       	mov	r25, r24
     2d6:	92 95       	swap	r25
     2d8:	9f 70       	andi	r25, 0x0F	; 15
     2da:	99 0f       	add	r25, r25
     2dc:	29 2f       	mov	r18, r25
     2de:	22 0f       	add	r18, r18
     2e0:	22 0f       	add	r18, r18
     2e2:	92 0f       	add	r25, r18
     2e4:	8f 70       	andi	r24, 0x0F	; 15
}
     2e6:	89 0f       	add	r24, r25
     2e8:	08 95       	ret

000002ea <rtc_sync>:
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
	
	
}

void rtc_sync(rtc_date *RTCx){
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	27 97       	sbiw	r28, 0x07	; 7
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	cd bf       	out	0x3d, r28	; 61
     302:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	twi_read(RTC_ADDR, 0x00, rtc_raw, sizeof(rtc_raw));
     304:	27 e0       	ldi	r18, 0x07	; 7
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	ae 01       	movw	r20, r28
     30a:	4f 5f       	subi	r20, 0xFF	; 255
     30c:	5f 4f       	sbci	r21, 0xFF	; 255
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	82 e3       	ldi	r24, 0x32	; 50
     312:	0e 94 4c 03 	call	0x698	; 0x698 <twi_read>
	RTCx->second=BCDtoDEC(rtc_raw[0]);
     316:	89 81       	ldd	r24, Y+1	; 0x01
     318:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     31c:	f8 01       	movw	r30, r16
     31e:	80 83       	st	Z, r24
	RTCx->minute=BCDtoDEC(rtc_raw[1]);
     320:	8a 81       	ldd	r24, Y+2	; 0x02
     322:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     326:	f8 01       	movw	r30, r16
     328:	81 83       	std	Z+1, r24	; 0x01
	RTCx->hour=BCDtoDEC(rtc_raw[2]);
     32a:	8b 81       	ldd	r24, Y+3	; 0x03
     32c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     330:	f8 01       	movw	r30, r16
     332:	82 83       	std	Z+2, r24	; 0x02
	RTCx->dayofweek=rtc_raw[3];
     334:	8c 81       	ldd	r24, Y+4	; 0x04
     336:	87 83       	std	Z+7, r24	; 0x07
	RTCx->date=BCDtoDEC(rtc_raw[4]);
     338:	8d 81       	ldd	r24, Y+5	; 0x05
     33a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     33e:	f8 01       	movw	r30, r16
     340:	83 83       	std	Z+3, r24	; 0x03
	RTCx->month=BCDtoDEC(rtc_raw[5]);
     342:	8e 81       	ldd	r24, Y+6	; 0x06
     344:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     348:	f8 01       	movw	r30, r16
     34a:	84 83       	std	Z+4, r24	; 0x04
	RTCx->year=BCDtoDEC(rtc_raw[6]);
     34c:	8f 81       	ldd	r24, Y+7	; 0x07
     34e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <BCDtoDEC>
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	f8 01       	movw	r30, r16
     356:	96 83       	std	Z+6, r25	; 0x06
     358:	85 83       	std	Z+5, r24	; 0x05
}
     35a:	27 96       	adiw	r28, 0x07	; 7
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	08 95       	ret

00000370 <DECtoBCD>:
}

// BCDtoDEC -- convert decimal to binary-coded decimal (BCD)
uint8_t DECtoBCD(uint8_t val)
{
	return ((val / 10) * 0x10) + (val % 10);
     370:	9d ec       	ldi	r25, 0xCD	; 205
     372:	89 9f       	mul	r24, r25
     374:	91 2d       	mov	r25, r1
     376:	11 24       	eor	r1, r1
     378:	96 95       	lsr	r25
     37a:	96 95       	lsr	r25
     37c:	96 95       	lsr	r25
     37e:	39 2f       	mov	r19, r25
     380:	33 0f       	add	r19, r19
     382:	23 2f       	mov	r18, r19
     384:	22 0f       	add	r18, r18
     386:	22 0f       	add	r18, r18
     388:	23 0f       	add	r18, r19
     38a:	82 1b       	sub	r24, r18
     38c:	20 e1       	ldi	r18, 0x10	; 16
     38e:	92 9f       	mul	r25, r18
     390:	80 0d       	add	r24, r0
     392:	11 24       	eor	r1, r1
     394:	08 95       	ret

00000396 <rtc_set>:
	RTCx->dayofweek=rtc_raw[3];
	RTCx->date=BCDtoDEC(rtc_raw[4]);
	RTCx->month=BCDtoDEC(rtc_raw[5]);
	RTCx->year=BCDtoDEC(rtc_raw[6]);
}
void rtc_set(rtc_date *RTCx){
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	27 97       	sbiw	r28, 0x07	; 7
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	rtc_raw[0]=DECtoBCD(RTCx->second);
     3b0:	fc 01       	movw	r30, r24
     3b2:	80 81       	ld	r24, Z
     3b4:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3b8:	89 83       	std	Y+1, r24	; 0x01
	rtc_raw[1]=DECtoBCD(RTCx->minute);
     3ba:	f8 01       	movw	r30, r16
     3bc:	81 81       	ldd	r24, Z+1	; 0x01
     3be:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3c2:	8a 83       	std	Y+2, r24	; 0x02
	rtc_raw[2]=DECtoBCD(RTCx->hour);
     3c4:	f8 01       	movw	r30, r16
     3c6:	82 81       	ldd	r24, Z+2	; 0x02
     3c8:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3cc:	8b 83       	std	Y+3, r24	; 0x03
	rtc_raw[3]=RTCx->dayofweek;
     3ce:	f8 01       	movw	r30, r16
     3d0:	87 81       	ldd	r24, Z+7	; 0x07
     3d2:	8c 83       	std	Y+4, r24	; 0x04
	rtc_raw[4]=DECtoBCD(RTCx->date);
     3d4:	83 81       	ldd	r24, Z+3	; 0x03
     3d6:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3da:	8d 83       	std	Y+5, r24	; 0x05
	rtc_raw[5]=DECtoBCD(RTCx->month);
     3dc:	f8 01       	movw	r30, r16
     3de:	84 81       	ldd	r24, Z+4	; 0x04
     3e0:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3e4:	8e 83       	std	Y+6, r24	; 0x06
	rtc_raw[6]=DECtoBCD(RTCx->year);
     3e6:	f8 01       	movw	r30, r16
     3e8:	85 81       	ldd	r24, Z+5	; 0x05
     3ea:	0e 94 b8 01 	call	0x370	; 0x370 <DECtoBCD>
     3ee:	8f 83       	std	Y+7, r24	; 0x07
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
     3f0:	27 e0       	ldi	r18, 0x07	; 7
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	ae 01       	movw	r20, r28
     3f6:	4f 5f       	subi	r20, 0xFF	; 255
     3f8:	5f 4f       	sbci	r21, 0xFF	; 255
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	82 e3       	ldi	r24, 0x32	; 50
     3fe:	0e 94 c7 03 	call	0x78e	; 0x78e <twi_write>
}
     402:	27 96       	adiw	r28, 0x07	; 7
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	08 95       	ret

00000418 <led_board_sw_reset>:

uint8_t brightness_on[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 100, 250, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 0};
uint8_t brightness_off[] = { 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 250, 100, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
uint8_t led_pattern[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

void led_board_sw_reset(uint8_t board_address){
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	63 97       	sbiw	r28, 0x13	; 19
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	18 2f       	mov	r17, r24
	uint8_t reset_cmd[] = {SWRST_byte_1, SWRST_byte_2};
     432:	85 ea       	ldi	r24, 0xA5	; 165
     434:	89 83       	std	Y+1, r24	; 0x01
     436:	8a e5       	ldi	r24, 0x5A	; 90
     438:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t init_led_pattern[16] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
     43a:	00 e1       	ldi	r16, 0x10	; 16
     43c:	ae 01       	movw	r20, r28
     43e:	4d 5f       	subi	r20, 0xFD	; 253
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	fa 01       	movw	r30, r20
     444:	80 2f       	mov	r24, r16
     446:	11 92       	st	Z+, r1
     448:	8a 95       	dec	r24
     44a:	e9 f7       	brne	.-6      	; 0x446 <led_board_sw_reset+0x2e>
	twi_write_batch_by_reg(board_address, PWM0 | 0xA0, init_led_pattern, sizeof(init_led_pattern));
     44c:	20 e1       	ldi	r18, 0x10	; 16
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	62 ea       	ldi	r22, 0xA2	; 162
     452:	81 2f       	mov	r24, r17
     454:	0e 94 54 04 	call	0x8a8	; 0x8a8 <twi_write_batch_by_reg>
	twi_write_batch(board_address, reset_cmd, sizeof(reset_cmd));
     458:	42 e0       	ldi	r20, 0x02	; 2
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	be 01       	movw	r22, r28
     45e:	6f 5f       	subi	r22, 0xFF	; 255
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	81 2f       	mov	r24, r17
     464:	0e 94 14 04 	call	0x828	; 0x828 <twi_write_batch>
	uint8_t reg = (1 << OSC);
     468:	0b 8b       	std	Y+19, r16	; 0x13
	twi_write(board_address,MODE1, &reg,1);
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	ae 01       	movw	r20, r28
     470:	4d 5e       	subi	r20, 0xED	; 237
     472:	5f 4f       	sbci	r21, 0xFF	; 255
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	81 2f       	mov	r24, r17
     478:	0e 94 c7 03 	call	0x78e	; 0x78e <twi_write>
	//twi_write(board_address,MODE2, &reg,1);
	//twi_write(SWRST,TIMER_COUNTER0_REG,SWRST,1);
}
     47c:	63 96       	adiw	r28, 0x13	; 19
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	08 95       	ret

00000492 <led_board_init>:

uint8_t led_board_init(uint8_t board_address){
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	1f 92       	push	r1
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	18 2f       	mov	r17, r24
	uint8_t init_cmd[] = {0xAA, 0xAA, 0xAA, 0xAA};
	uint8_t *init_led_pattern = led_pattern;
	uint8_t reg = 0;
     4a2:	19 82       	std	Y+1, r1	; 0x01
	reg = 0;
	twi_write(board_address,MODE1, &reg,1);
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	ae 01       	movw	r20, r28
     4aa:	4f 5f       	subi	r20, 0xFF	; 255
     4ac:	5f 4f       	sbci	r21, 0xFF	; 255
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	0e 94 c7 03 	call	0x78e	; 0x78e <twi_write>
	twi_write(board_address,MODE2, &reg,1);
     4b4:	21 e0       	ldi	r18, 0x01	; 1
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	ae 01       	movw	r20, r28
     4ba:	4f 5f       	subi	r20, 0xFF	; 255
     4bc:	5f 4f       	sbci	r21, 0xFF	; 255
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	81 2f       	mov	r24, r17
     4c2:	0e 94 c7 03 	call	0x78e	; 0x78e <twi_write>
	twi_write_batch_by_reg(board_address, PWM0 | 0xA0, init_led_pattern, sizeof(init_led_pattern));
     4c6:	22 e0       	ldi	r18, 0x02	; 2
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	4c ec       	ldi	r20, 0xCC	; 204
     4cc:	51 e0       	ldi	r21, 0x01	; 1
     4ce:	62 ea       	ldi	r22, 0xA2	; 162
     4d0:	81 2f       	mov	r24, r17
     4d2:	0e 94 54 04 	call	0x8a8	; 0x8a8 <twi_write_batch_by_reg>
	reg = 0x00;
     4d6:	19 82       	std	Y+1, r1	; 0x01
	twi_write(board_address,GRPPWM,&reg,1);
     4d8:	21 e0       	ldi	r18, 0x01	; 1
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	ae 01       	movw	r20, r28
     4de:	4f 5f       	subi	r20, 0xFF	; 255
     4e0:	5f 4f       	sbci	r21, 0xFF	; 255
     4e2:	62 e1       	ldi	r22, 0x12	; 18
     4e4:	81 2f       	mov	r24, r17
     4e6:	0e 94 c7 03 	call	0x78e	; 0x78e <twi_write>
	reg = 0xFF;
     4ea:	8f ef       	ldi	r24, 0xFF	; 255
     4ec:	89 83       	std	Y+1, r24	; 0x01
	twi_write(board_address,GRPFREQ,&reg,1);
     4ee:	21 e0       	ldi	r18, 0x01	; 1
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	ae 01       	movw	r20, r28
     4f4:	4f 5f       	subi	r20, 0xFF	; 255
     4f6:	5f 4f       	sbci	r21, 0xFF	; 255
     4f8:	63 e1       	ldi	r22, 0x13	; 19
     4fa:	81 2f       	mov	r24, r17
     4fc:	0e 94 c7 03 	call	0x78e	; 0x78e <twi_write>
	reg = (2 << LDR0) | (2 << LDR1) | (2 << LDR2) | (2 << LDR3);
     500:	0a ea       	ldi	r16, 0xAA	; 170
     502:	09 83       	std	Y+1, r16	; 0x01
	twi_write(board_address,LEDOUT0,&reg,1);
     504:	21 e0       	ldi	r18, 0x01	; 1
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	ae 01       	movw	r20, r28
     50a:	4f 5f       	subi	r20, 0xFF	; 255
     50c:	5f 4f       	sbci	r21, 0xFF	; 255
     50e:	64 e1       	ldi	r22, 0x14	; 20
     510:	81 2f       	mov	r24, r17
     512:	0e 94 c7 03 	call	0x78e	; 0x78e <twi_write>
	reg = (2 << LDR4) | (2 << LDR5) | (2 << LDR6) | (2 << LDR7);
     516:	09 83       	std	Y+1, r16	; 0x01
	twi_write(board_address,LEDOUT1,&reg,1);
     518:	21 e0       	ldi	r18, 0x01	; 1
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	ae 01       	movw	r20, r28
     51e:	4f 5f       	subi	r20, 0xFF	; 255
     520:	5f 4f       	sbci	r21, 0xFF	; 255
     522:	65 e1       	ldi	r22, 0x15	; 21
     524:	81 2f       	mov	r24, r17
     526:	0e 94 c7 03 	call	0x78e	; 0x78e <twi_write>
	reg= (2 << LDR8) | (2 << LDR9) | (2 << LDR10) | (2 << LDR11);
     52a:	09 83       	std	Y+1, r16	; 0x01
	twi_write(board_address,LEDOUT2,&reg,1);
     52c:	21 e0       	ldi	r18, 0x01	; 1
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	ae 01       	movw	r20, r28
     532:	4f 5f       	subi	r20, 0xFF	; 255
     534:	5f 4f       	sbci	r21, 0xFF	; 255
     536:	66 e1       	ldi	r22, 0x16	; 22
     538:	81 2f       	mov	r24, r17
     53a:	0e 94 c7 03 	call	0x78e	; 0x78e <twi_write>
	reg = (2 << LDR12) | (2 << LDR13) | (2 << LDR14) | (2 << LDR15);
     53e:	09 83       	std	Y+1, r16	; 0x01
	twi_write(board_address,LEDOUT3,&reg,1);
     540:	21 e0       	ldi	r18, 0x01	; 1
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	ae 01       	movw	r20, r28
     546:	4f 5f       	subi	r20, 0xFF	; 255
     548:	5f 4f       	sbci	r21, 0xFF	; 255
     54a:	67 e1       	ldi	r22, 0x17	; 23
     54c:	81 2f       	mov	r24, r17
     54e:	0e 94 c7 03 	call	0x78e	; 0x78e <twi_write>
	return 1;
	
}
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	0f 90       	pop	r0
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	08 95       	ret

00000560 <twi_start>:
	status = (TWSR1 & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     560:	85 ea       	ldi	r24, 0xA5	; 165
     562:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
ISR(TWI1_vect){
	status = (TWSR1 & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     56a:	05 c0       	rjmp	.+10     	; 0x576 <twi_start+0x16>
		i++;
     56c:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     56e:	80 34       	cpi	r24, 0x40	; 64
     570:	26 e0       	ldi	r18, 0x06	; 6
     572:	92 07       	cpc	r25, r18
     574:	30 f4       	brcc	.+12     	; 0x582 <twi_start+0x22>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     576:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     57a:	28 30       	cpi	r18, 0x08	; 8
     57c:	b9 f7       	brne	.-18     	; 0x56c <twi_start+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	08 95       	ret
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     582:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     584:	08 95       	ret

00000586 <twi_stop>:

static void twi_stop(void){
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     586:	85 e9       	ldi	r24, 0x95	; 149
     588:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     58c:	08 95       	ret

0000058e <twi_restart>:
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     58e:	85 ea       	ldi	r24, 0xA5	; 165
     590:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	
	TWCR1 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     598:	05 c0       	rjmp	.+10     	; 0x5a4 <twi_restart+0x16>
		i++;
     59a:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     59c:	80 34       	cpi	r24, 0x40	; 64
     59e:	26 e0       	ldi	r18, 0x06	; 6
     5a0:	92 07       	cpc	r25, r18
     5a2:	30 f4       	brcc	.+12     	; 0x5b0 <twi_restart+0x22>

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     5a4:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     5a8:	20 31       	cpi	r18, 0x10	; 16
     5aa:	b9 f7       	brne	.-18     	; 0x59a <twi_restart+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	08 95       	ret
	TWCR1 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     5b0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     5b2:	08 95       	ret

000005b4 <twi_addr_write_ack>:

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     5b4:	85 e8       	ldi	r24, 0x85	; 133
     5b6:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	}
	return TWI_OK;
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     5be:	05 c0       	rjmp	.+10     	; 0x5ca <twi_addr_write_ack+0x16>
		i++;
     5c0:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     5c2:	80 34       	cpi	r24, 0x40	; 64
     5c4:	26 e0       	ldi	r18, 0x06	; 6
     5c6:	92 07       	cpc	r25, r18
     5c8:	30 f4       	brcc	.+12     	; 0x5d6 <twi_addr_write_ack+0x22>

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     5ca:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     5ce:	28 31       	cpi	r18, 0x18	; 24
     5d0:	b9 f7       	brne	.-18     	; 0x5c0 <twi_addr_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     5d6:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     5d8:	08 95       	ret

000005da <twi_data_write_ack>:


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     5da:	85 e8       	ldi	r24, 0x85	; 133
     5dc:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <twi_data_write_ack+0x16>
		i++;
     5e6:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     5e8:	80 34       	cpi	r24, 0x40	; 64
     5ea:	26 e0       	ldi	r18, 0x06	; 6
     5ec:	92 07       	cpc	r25, r18
     5ee:	30 f4       	brcc	.+12     	; 0x5fc <twi_data_write_ack+0x22>

static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     5f0:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     5f4:	28 32       	cpi	r18, 0x28	; 40
     5f6:	b9 f7       	brne	.-18     	; 0x5e6 <twi_data_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     5fc:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     5fe:	08 95       	ret

00000600 <twi_addr_read_ack>:


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     600:	85 e8       	ldi	r24, 0x85	; 133
     602:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     60a:	05 c0       	rjmp	.+10     	; 0x616 <twi_addr_read_ack+0x16>
		i++;
     60c:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     60e:	80 34       	cpi	r24, 0x40	; 64
     610:	26 e0       	ldi	r18, 0x06	; 6
     612:	92 07       	cpc	r25, r18
     614:	30 f4       	brcc	.+12     	; 0x622 <twi_addr_read_ack+0x22>

static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     616:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     61a:	20 34       	cpi	r18, 0x40	; 64
     61c:	b9 f7       	brne	.-18     	; 0x60c <twi_addr_read_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	08 95       	ret
	
	TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     622:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     624:	08 95       	ret

00000626 <twi_data_read_ack>:


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
     626:	88 23       	and	r24, r24
     628:	89 f0       	breq	.+34     	; 0x64c <twi_data_read_ack+0x26>
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
     62a:	85 ec       	ldi	r24, 0xC5	; 197
     62c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     634:	05 c0       	rjmp	.+10     	; 0x640 <twi_data_read_ack+0x1a>
			i++;
     636:	01 96       	adiw	r24, 0x01	; 1
			if(i >= TWI_TIMEOUT){
     638:	80 34       	cpi	r24, 0x40	; 64
     63a:	26 e0       	ldi	r18, 0x06	; 6
     63c:	92 07       	cpc	r25, r18
     63e:	b8 f4       	brcc	.+46     	; 0x66e <twi_data_read_ack+0x48>

static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     640:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     644:	20 35       	cpi	r18, 0x50	; 80
     646:	b9 f7       	brne	.-18     	; 0x636 <twi_data_read_ack+0x10>
				return TWI_ERROR_START;
			}
		}
		
	}
	return TWI_OK;
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	08 95       	ret
				return TWI_ERROR_START;
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     64c:	85 e8       	ldi	r24, 0x85	; 133
     64e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	return TWI_OK;
}


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     656:	05 c0       	rjmp	.+10     	; 0x662 <twi_data_read_ack+0x3c>
			i++;
     658:	01 96       	adiw	r24, 0x01	; 1
			if(i >= TWI_TIMEOUT){
     65a:	80 34       	cpi	r24, 0x40	; 64
     65c:	26 e0       	ldi	r18, 0x06	; 6
     65e:	92 07       	cpc	r25, r18
     660:	40 f4       	brcc	.+16     	; 0x672 <twi_data_read_ack+0x4c>
			}
		}
	}else{
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     662:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     666:	28 35       	cpi	r18, 0x58	; 88
     668:	b9 f7       	brne	.-18     	; 0x658 <twi_data_read_ack+0x32>
				return TWI_ERROR_START;
			}
		}
		
	}
	return TWI_OK;
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	08 95       	ret
	if(ack != 0){
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	08 95       	ret
		
		TWCR1 = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     672:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		
	}
	return TWI_OK;
}
     674:	08 95       	ret

00000676 <__vector_40>:

#include "twi_hal.h"

volatile uint8_t status = 0xF8;

ISR(TWI1_vect){
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
     680:	8f 93       	push	r24
	status = (TWSR1 & 0xF8);
     682:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
     686:	88 7f       	andi	r24, 0xF8	; 248
     688:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <status>
}
     68c:	8f 91       	pop	r24
     68e:	0f 90       	pop	r0
     690:	0f be       	out	0x3f, r0	; 63
     692:	0f 90       	pop	r0
     694:	1f 90       	pop	r1
     696:	18 95       	reti

00000698 <twi_read>:
		
	}
	return TWI_OK;
}

uint8_t twi_read(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     698:	cf 92       	push	r12
     69a:	df 92       	push	r13
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	d8 2e       	mov	r13, r24
     6a8:	c6 2e       	mov	r12, r22
     6aa:	7a 01       	movw	r14, r20
     6ac:	89 01       	movw	r16, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     6ae:	0e 94 b0 02 	call	0x560	; 0x560 <twi_start>
     6b2:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     6b4:	88 23       	and	r24, r24
     6b6:	21 f0       	breq	.+8      	; 0x6c0 <twi_read+0x28>
		twi_stop();
     6b8:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
		return err;
     6bc:	8c 2f       	mov	r24, r28
     6be:	5f c0       	rjmp	.+190    	; 0x77e <twi_read+0xe6>
	}
	TWDR1 = (addr << 1) | 0;
     6c0:	8d 2d       	mov	r24, r13
     6c2:	88 0f       	add	r24, r24
     6c4:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
     6c8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <twi_addr_write_ack>
     6cc:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     6ce:	88 23       	and	r24, r24
     6d0:	21 f0       	breq	.+8      	; 0x6da <twi_read+0x42>
		twi_stop();
     6d2:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
		return err;
     6d6:	8c 2f       	mov	r24, r28
     6d8:	52 c0       	rjmp	.+164    	; 0x77e <twi_read+0xe6>
	}
	
	TWDR1 = reg;
     6da:	c0 92 db 00 	sts	0x00DB, r12	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	err = twi_data_write_ack();
     6de:	0e 94 ed 02 	call	0x5da	; 0x5da <twi_data_write_ack>
     6e2:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     6e4:	88 23       	and	r24, r24
     6e6:	21 f0       	breq	.+8      	; 0x6f0 <twi_read+0x58>
		twi_stop();
     6e8:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
		return err;
     6ec:	8c 2f       	mov	r24, r28
     6ee:	47 c0       	rjmp	.+142    	; 0x77e <twi_read+0xe6>
	}
	
	err = twi_restart();
     6f0:	0e 94 c7 02 	call	0x58e	; 0x58e <twi_restart>
     6f4:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     6f6:	88 23       	and	r24, r24
     6f8:	21 f0       	breq	.+8      	; 0x702 <twi_read+0x6a>
		twi_stop();
     6fa:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
		return err;
     6fe:	8c 2f       	mov	r24, r28
     700:	3e c0       	rjmp	.+124    	; 0x77e <twi_read+0xe6>
	}
	
	TWDR1 = (addr << 1) | 1;
     702:	8d 2d       	mov	r24, r13
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	81 60       	ori	r24, 0x01	; 1
     70c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>

	err = twi_addr_read_ack();
     710:	0e 94 00 03 	call	0x600	; 0x600 <twi_addr_read_ack>
     714:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     716:	88 23       	and	r24, r24
     718:	c1 f0       	breq	.+48     	; 0x74a <twi_read+0xb2>
		twi_stop();
     71a:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
		return err;
     71e:	8c 2f       	mov	r24, r28
     720:	2e c0       	rjmp	.+92     	; 0x77e <twi_read+0xe6>
	}
	
	for(i = 0; i < (len - 1);i++){
		err = twi_data_read_ack(1);
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	0e 94 13 03 	call	0x626	; 0x626 <twi_data_read_ack>
     728:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     72a:	88 23       	and	r24, r24
     72c:	21 f0       	breq	.+8      	; 0x736 <twi_read+0x9e>
			twi_stop();
     72e:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
			return err;
     732:	8c 2f       	mov	r24, r28
     734:	24 c0       	rjmp	.+72     	; 0x77e <twi_read+0xe6>
		}
		data[i] = TWDR1;
     736:	f7 01       	movw	r30, r14
     738:	ec 0d       	add	r30, r12
     73a:	fd 1d       	adc	r31, r13
     73c:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     740:	80 83       	st	Z, r24
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     742:	8f ef       	ldi	r24, 0xFF	; 255
     744:	c8 1a       	sub	r12, r24
     746:	d8 0a       	sbc	r13, r24
     748:	02 c0       	rjmp	.+4      	; 0x74e <twi_read+0xb6>
     74a:	c1 2c       	mov	r12, r1
     74c:	d1 2c       	mov	r13, r1
     74e:	c8 01       	movw	r24, r16
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	c8 16       	cp	r12, r24
     754:	d9 06       	cpc	r13, r25
     756:	28 f3       	brcs	.-54     	; 0x722 <twi_read+0x8a>
			return err;
		}
		data[i] = TWDR1;
	}
	
	err = twi_data_read_ack(0);
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	0e 94 13 03 	call	0x626	; 0x626 <twi_data_read_ack>
     75e:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     760:	88 23       	and	r24, r24
     762:	21 f0       	breq	.+8      	; 0x76c <twi_read+0xd4>
		twi_stop();
     764:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
		return err;
     768:	8c 2f       	mov	r24, r28
     76a:	09 c0       	rjmp	.+18     	; 0x77e <twi_read+0xe6>
	}
	data[i] = TWDR1;
     76c:	f7 01       	movw	r30, r14
     76e:	ec 0d       	add	r30, r12
     770:	fd 1d       	adc	r31, r13
     772:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     776:	80 83       	st	Z, r24
	
	twi_stop();
     778:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
	
	return err;
     77c:	8c 2f       	mov	r24, r28
}
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	08 95       	ret

0000078e <twi_write>:


uint8_t twi_write(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     78e:	cf 92       	push	r12
     790:	df 92       	push	r13
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	18 2f       	mov	r17, r24
     79e:	06 2f       	mov	r16, r22
     7a0:	6a 01       	movw	r12, r20
     7a2:	79 01       	movw	r14, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     7a4:	0e 94 b0 02 	call	0x560	; 0x560 <twi_start>
     7a8:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     7aa:	88 23       	and	r24, r24
     7ac:	21 f0       	breq	.+8      	; 0x7b6 <twi_write+0x28>
		twi_stop();
     7ae:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
		return err;
     7b2:	8c 2f       	mov	r24, r28
     7b4:	31 c0       	rjmp	.+98     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	}
	TWDR1 = (addr << 1) | 0;
     7b6:	11 0f       	add	r17, r17
     7b8:	10 93 db 00 	sts	0x00DB, r17	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
     7bc:	0e 94 da 02 	call	0x5b4	; 0x5b4 <twi_addr_write_ack>
     7c0:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     7c2:	88 23       	and	r24, r24
     7c4:	21 f0       	breq	.+8      	; 0x7ce <twi_write+0x40>
		twi_stop();
     7c6:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
		return err;
     7ca:	8c 2f       	mov	r24, r28
     7cc:	25 c0       	rjmp	.+74     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	}
	
	TWDR1 = reg;
     7ce:	00 93 db 00 	sts	0x00DB, r16	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	err = twi_data_write_ack();
     7d2:	0e 94 ed 02 	call	0x5da	; 0x5da <twi_data_write_ack>
     7d6:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     7d8:	88 23       	and	r24, r24
     7da:	b1 f0       	breq	.+44     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
		twi_stop();
     7dc:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
		return err;
     7e0:	8c 2f       	mov	r24, r28
     7e2:	1a c0       	rjmp	.+52     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	}
	
	for(i = 0; i < len;i++){
		TWDR1 = data[i];
     7e4:	f6 01       	movw	r30, r12
     7e6:	e0 0f       	add	r30, r16
     7e8:	f1 1f       	adc	r31, r17
     7ea:	80 81       	ld	r24, Z
     7ec:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		err = twi_data_write_ack();
     7f0:	0e 94 ed 02 	call	0x5da	; 0x5da <twi_data_write_ack>
     7f4:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     7f6:	88 23       	and	r24, r24
     7f8:	21 f0       	breq	.+8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			twi_stop();
     7fa:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
			return err;
     7fe:	8c 2f       	mov	r24, r28
     800:	0b c0       	rjmp	.+22     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
     802:	0f 5f       	subi	r16, 0xFF	; 255
     804:	1f 4f       	sbci	r17, 0xFF	; 255
     806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     808:	00 e0       	ldi	r16, 0x00	; 0
     80a:	10 e0       	ldi	r17, 0x00	; 0
     80c:	0e 15       	cp	r16, r14
     80e:	1f 05       	cpc	r17, r15
     810:	48 f3       	brcs	.-46     	; 0x7e4 <twi_write+0x56>
			return err;
		}
	}
	
	
	twi_stop();
     812:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
	
	return err;
     816:	8c 2f       	mov	r24, r28
}
     818:	cf 91       	pop	r28
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	ff 90       	pop	r15
     820:	ef 90       	pop	r14
     822:	df 90       	pop	r13
     824:	cf 90       	pop	r12
     826:	08 95       	ret

00000828 <twi_write_batch>:
uint8_t twi_write_batch(uint8_t addr, uint8_t *data,uint16_t len){
     828:	cf 92       	push	r12
     82a:	df 92       	push	r13
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	c8 2f       	mov	r28, r24
     838:	6b 01       	movw	r12, r22
     83a:	7a 01       	movw	r14, r20
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     83c:	0e 94 b0 02 	call	0x560	; 0x560 <twi_start>
     840:	18 2f       	mov	r17, r24
	if(err != TWI_OK){
     842:	88 23       	and	r24, r24
     844:	21 f0       	breq	.+8      	; 0x84e <twi_write_batch+0x26>
		twi_stop();
     846:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
		return err;
     84a:	81 2f       	mov	r24, r17
     84c:	25 c0       	rjmp	.+74     	; 0x898 <twi_write_batch+0x70>
	}
	TWDR1 = (addr << 1) | 0;
     84e:	cc 0f       	add	r28, r28
     850:	c0 93 db 00 	sts	0x00DB, r28	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	
	err = twi_addr_write_ack();
     854:	0e 94 da 02 	call	0x5b4	; 0x5b4 <twi_addr_write_ack>
     858:	18 2f       	mov	r17, r24
	if(err != TWI_OK){
     85a:	88 23       	and	r24, r24
     85c:	a9 f0       	breq	.+42     	; 0x888 <twi_write_batch+0x60>
		twi_stop();
     85e:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
		return err;
     862:	81 2f       	mov	r24, r17
     864:	19 c0       	rjmp	.+50     	; 0x898 <twi_write_batch+0x70>
	}
	
	
	
	for(i = 0; i < len;i++){
		TWDR1 = data[i];
     866:	f6 01       	movw	r30, r12
     868:	ec 0f       	add	r30, r28
     86a:	fd 1f       	adc	r31, r29
     86c:	80 81       	ld	r24, Z
     86e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		err = twi_data_write_ack();
     872:	0e 94 ed 02 	call	0x5da	; 0x5da <twi_data_write_ack>
     876:	18 2f       	mov	r17, r24
		if(err != TWI_OK){
     878:	88 23       	and	r24, r24
     87a:	21 f0       	breq	.+8      	; 0x884 <twi_write_batch+0x5c>
			twi_stop();
     87c:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
			return err;
     880:	81 2f       	mov	r24, r17
     882:	0a c0       	rjmp	.+20     	; 0x898 <twi_write_batch+0x70>
		return err;
	}
	
	
	
	for(i = 0; i < len;i++){
     884:	21 96       	adiw	r28, 0x01	; 1
     886:	02 c0       	rjmp	.+4      	; 0x88c <twi_write_batch+0x64>
     888:	c0 e0       	ldi	r28, 0x00	; 0
     88a:	d0 e0       	ldi	r29, 0x00	; 0
     88c:	ce 15       	cp	r28, r14
     88e:	df 05       	cpc	r29, r15
     890:	50 f3       	brcs	.-44     	; 0x866 <twi_write_batch+0x3e>
			return err;
		}
	}
	
	
	twi_stop();
     892:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
	
	return err;
     896:	81 2f       	mov	r24, r17
}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	ff 90       	pop	r15
     8a0:	ef 90       	pop	r14
     8a2:	df 90       	pop	r13
     8a4:	cf 90       	pop	r12
     8a6:	08 95       	ret

000008a8 <twi_write_batch_by_reg>:



uint8_t twi_write_batch_by_reg(uint8_t addr,uint8_t reg, uint8_t *data,uint16_t len){
     8a8:	cf 92       	push	r12
     8aa:	df 92       	push	r13
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	18 2f       	mov	r17, r24
     8b8:	06 2f       	mov	r16, r22
     8ba:	6a 01       	movw	r12, r20
     8bc:	79 01       	movw	r14, r18
		
		uint16_t i = 0;
		uint8_t err = TWI_OK;
		
		err = twi_start();
     8be:	0e 94 b0 02 	call	0x560	; 0x560 <twi_start>
     8c2:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     8c4:	88 23       	and	r24, r24
     8c6:	21 f0       	breq	.+8      	; 0x8d0 <twi_write_batch_by_reg+0x28>
			twi_stop();
     8c8:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
			return err;
     8cc:	8c 2f       	mov	r24, r28
     8ce:	31 c0       	rjmp	.+98     	; 0x932 <__stack+0x33>
		}
		TWDR1 = (addr << 1) | 0;
     8d0:	11 0f       	add	r17, r17
     8d2:	10 93 db 00 	sts	0x00DB, r17	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		
		
		err = twi_addr_write_ack();
     8d6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <twi_addr_write_ack>
     8da:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     8dc:	88 23       	and	r24, r24
     8de:	21 f0       	breq	.+8      	; 0x8e8 <twi_write_batch_by_reg+0x40>
			twi_stop();
     8e0:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
			return err;
     8e4:	8c 2f       	mov	r24, r28
     8e6:	25 c0       	rjmp	.+74     	; 0x932 <__stack+0x33>
		}
		
		
		TWDR1 = reg;
     8e8:	00 93 db 00 	sts	0x00DB, r16	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
		err = twi_data_write_ack();
     8ec:	0e 94 ed 02 	call	0x5da	; 0x5da <twi_data_write_ack>
     8f0:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     8f2:	88 23       	and	r24, r24
     8f4:	b1 f0       	breq	.+44     	; 0x922 <__stack+0x23>
			twi_stop();
     8f6:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
			return err;
     8fa:	8c 2f       	mov	r24, r28
     8fc:	1a c0       	rjmp	.+52     	; 0x932 <__stack+0x33>
		}
		
		for(i = 0; i < len;i++){
			TWDR1 = data[i];
     8fe:	f6 01       	movw	r30, r12
     900:	e0 0f       	add	r30, r16
     902:	f1 1f       	adc	r31, r17
     904:	80 81       	ld	r24, Z
     906:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
			err = twi_data_write_ack();
     90a:	0e 94 ed 02 	call	0x5da	; 0x5da <twi_data_write_ack>
     90e:	c8 2f       	mov	r28, r24
			if(err != TWI_OK){
     910:	88 23       	and	r24, r24
     912:	21 f0       	breq	.+8      	; 0x91c <__stack+0x1d>
				twi_stop();
     914:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
				return err;
     918:	8c 2f       	mov	r24, r28
     91a:	0b c0       	rjmp	.+22     	; 0x932 <__stack+0x33>
		if(err != TWI_OK){
			twi_stop();
			return err;
		}
		
		for(i = 0; i < len;i++){
     91c:	0f 5f       	subi	r16, 0xFF	; 255
     91e:	1f 4f       	sbci	r17, 0xFF	; 255
     920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0x27>
     922:	00 e0       	ldi	r16, 0x00	; 0
     924:	10 e0       	ldi	r17, 0x00	; 0
     926:	0e 15       	cp	r16, r14
     928:	1f 05       	cpc	r17, r15
     92a:	48 f3       	brcs	.-46     	; 0x8fe <twi_write_batch_by_reg+0x56>
				return err;
			}
		}
		
		
		twi_stop();
     92c:	0e 94 c3 02 	call	0x586	; 0x586 <twi_stop>
		
		return err;
     930:	8c 2f       	mov	r24, r28
}
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	cf 90       	pop	r12
     940:	08 95       	ret

00000942 <twi_init>:





void twi_init(uint32_t speed){
     942:	9b 01       	movw	r18, r22
     944:	ac 01       	movw	r20, r24
	
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	72 e1       	ldi	r23, 0x12	; 18
     94a:	8a e7       	ldi	r24, 0x7A	; 122
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 42 07 	call	0xe84	; 0xe84 <__udivmodsi4>
     952:	da 01       	movw	r26, r20
     954:	c9 01       	movw	r24, r18
     956:	40 97       	sbiw	r24, 0x10	; 16
     958:	a1 09       	sbc	r26, r1
     95a:	b1 09       	sbc	r27, r1
     95c:	b6 95       	lsr	r27
     95e:	a7 95       	ror	r26
     960:	97 95       	ror	r25
     962:	87 95       	ror	r24
	TWBR1 = gen_t & 0xFF;
     964:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	TWCR1 = (1 << TWEN) | (1 << TWIE);
     968:	85 e0       	ldi	r24, 0x05	; 5
     96a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     96e:	08 95       	ret

00000970 <__vector_18>:

void uart_send_array(uint8_t *c,uint16_t len){
	for(uint16_t i = 0; i < len;i++){
		uart_send_byte(c[i]);
	}
}
     970:	1f 92       	push	r1
     972:	0f 92       	push	r0
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	0f 92       	push	r0
     978:	11 24       	eor	r1, r1
     97a:	8f 93       	push	r24
     97c:	9f 93       	push	r25
     97e:	ef 93       	push	r30
     980:	ff 93       	push	r31
     982:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <rx_count>
     986:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <rx_count+0x1>
     98a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     98e:	e4 52       	subi	r30, 0x24	; 36
     990:	fe 4f       	sbci	r31, 0xFE	; 254
     992:	80 83       	st	Z, r24
     994:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <rx_count>
     998:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <rx_count+0x1>
     99c:	e4 52       	subi	r30, 0x24	; 36
     99e:	fe 4f       	sbci	r31, 0xFE	; 254
     9a0:	80 81       	ld	r24, Z
     9a2:	8d 30       	cpi	r24, 0x0D	; 13
     9a4:	51 f4       	brne	.+20     	; 0x9ba <__vector_18+0x4a>
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <read_complete>
     9ac:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <rx_count>
     9b0:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <rx_count+0x1>
     9b4:	e3 52       	subi	r30, 0x23	; 35
     9b6:	fe 4f       	sbci	r31, 0xFE	; 254
     9b8:	10 82       	st	Z, r1
     9ba:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <rx_count>
     9be:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <rx_count+0x1>
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <rx_count+0x1>
     9c8:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <rx_count>
     9cc:	ff 91       	pop	r31
     9ce:	ef 91       	pop	r30
     9d0:	9f 91       	pop	r25
     9d2:	8f 91       	pop	r24
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	0f 90       	pop	r0
     9da:	1f 90       	pop	r1
     9dc:	18 95       	reti

000009de <__vector_20>:
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	8f 93       	push	r24
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <uart_tx_busy>
     9f0:	8f 91       	pop	r24
     9f2:	0f 90       	pop	r0
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	0f 90       	pop	r0
     9f8:	1f 90       	pop	r1
     9fa:	18 95       	reti

000009fc <uart_init>:
     9fc:	44 23       	and	r20, r20
     9fe:	39 f0       	breq	.+14     	; 0xa0e <uart_init+0x12>
     a00:	e0 ec       	ldi	r30, 0xC0	; 192
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	20 81       	ld	r18, Z
     a06:	22 60       	ori	r18, 0x02	; 2
     a08:	20 83       	st	Z, r18
     a0a:	a8 e0       	ldi	r26, 0x08	; 8
     a0c:	01 c0       	rjmp	.+2      	; 0xa10 <uart_init+0x14>
     a0e:	a0 e1       	ldi	r26, 0x10	; 16
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9b 01       	movw	r18, r22
     a14:	ac 01       	movw	r20, r24
     a16:	0e 94 64 07 	call	0xec8	; 0xec8 <__muluhisi3>
     a1a:	9b 01       	movw	r18, r22
     a1c:	ac 01       	movw	r20, r24
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	72 e1       	ldi	r23, 0x12	; 18
     a22:	8a e7       	ldi	r24, 0x7A	; 122
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 42 07 	call	0xe84	; 0xe84 <__udivmodsi4>
     a2a:	ba 01       	movw	r22, r20
     a2c:	a9 01       	movw	r20, r18
     a2e:	41 50       	subi	r20, 0x01	; 1
     a30:	51 09       	sbc	r21, r1
     a32:	61 09       	sbc	r22, r1
     a34:	71 09       	sbc	r23, r1
     a36:	db 01       	movw	r26, r22
     a38:	ca 01       	movw	r24, r20
     a3a:	88 27       	eor	r24, r24
     a3c:	9f 70       	andi	r25, 0x0F	; 15
     a3e:	aa 27       	eor	r26, r26
     a40:	bb 27       	eor	r27, r27
     a42:	89 2f       	mov	r24, r25
     a44:	9a 2f       	mov	r25, r26
     a46:	ab 2f       	mov	r26, r27
     a48:	bb 27       	eor	r27, r27
     a4a:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     a4e:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     a52:	e1 ec       	ldi	r30, 0xC1	; 193
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	88 6d       	ori	r24, 0xD8	; 216
     a5a:	80 83       	st	Z, r24
     a5c:	86 e8       	ldi	r24, 0x86	; 134
     a5e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     a62:	08 95       	ret

00000a64 <uart_send_byte>:
     a64:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <uart_tx_busy>
     a68:	99 23       	and	r25, r25
     a6a:	e1 f3       	breq	.-8      	; 0xa64 <uart_send_byte>
     a6c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <uart_tx_busy>
     a70:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     a74:	08 95       	ret

00000a76 <uart_send_string>:

void uart_send_string(uint8_t *c){
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	8c 01       	movw	r16, r24
	uint16_t i = 0;
     a80:	c0 e0       	ldi	r28, 0x00	; 0
     a82:	d0 e0       	ldi	r29, 0x00	; 0
	do{
		uart_send_byte(c[i]);
     a84:	f8 01       	movw	r30, r16
     a86:	ec 0f       	add	r30, r28
     a88:	fd 1f       	adc	r31, r29
     a8a:	80 81       	ld	r24, Z
     a8c:	0e 94 32 05 	call	0xa64	; 0xa64 <uart_send_byte>
		i++;
     a90:	21 96       	adiw	r28, 0x01	; 1
		
	}while(c[i] != '\0');
     a92:	f8 01       	movw	r30, r16
     a94:	ec 0f       	add	r30, r28
     a96:	fd 1f       	adc	r31, r29
     a98:	80 81       	ld	r24, Z
     a9a:	81 11       	cpse	r24, r1
     a9c:	f3 cf       	rjmp	.-26     	; 0xa84 <uart_send_string+0xe>
	//uart_send_byte(c[i]);
}
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	08 95       	ret

00000aa8 <__vector_1>:
	///uint8_t brightness[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 100, 250, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100};	

	uint8_t pwmChannels[16];
	
		
ISR(INT0_vect){
     aa8:	1f 92       	push	r1
     aaa:	0f 92       	push	r0
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	0f 92       	push	r0
     ab0:	11 24       	eor	r1, r1
     ab2:	2f 93       	push	r18
     ab4:	3f 93       	push	r19
     ab6:	4f 93       	push	r20
     ab8:	5f 93       	push	r21
     aba:	6f 93       	push	r22
     abc:	7f 93       	push	r23
     abe:	8f 93       	push	r24
     ac0:	9f 93       	push	r25
     ac2:	af 93       	push	r26
     ac4:	bf 93       	push	r27
     ac6:	ef 93       	push	r30
     ac8:	ff 93       	push	r31
	rtc_int_request=1;
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <rtc_int_request>
	toggle_pin_level(&ld1);
     ad0:	8f e0       	ldi	r24, 0x0F	; 15
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 36 01 	call	0x26c	; 0x26c <toggle_pin_level>
}	
     ad8:	ff 91       	pop	r31
     ada:	ef 91       	pop	r30
     adc:	bf 91       	pop	r27
     ade:	af 91       	pop	r26
     ae0:	9f 91       	pop	r25
     ae2:	8f 91       	pop	r24
     ae4:	7f 91       	pop	r23
     ae6:	6f 91       	pop	r22
     ae8:	5f 91       	pop	r21
     aea:	4f 91       	pop	r20
     aec:	3f 91       	pop	r19
     aee:	2f 91       	pop	r18
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	1f 90       	pop	r1
     af8:	18 95       	reti

00000afa <main>:
int main(void)
{
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	c0 58       	subi	r28, 0x80	; 128
     b04:	d1 09       	sbc	r29, r1
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
	char char_array[128]="\0";
     b10:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <rtc_int+0x3>
     b14:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <rtc_int+0x4>
     b18:	9a 83       	std	Y+2, r25	; 0x02
     b1a:	89 83       	std	Y+1, r24	; 0x01
     b1c:	fe 01       	movw	r30, r28
     b1e:	33 96       	adiw	r30, 0x03	; 3
     b20:	8e e7       	ldi	r24, 0x7E	; 126
     b22:	df 01       	movw	r26, r30
     b24:	1d 92       	st	X+, r1
     b26:	8a 95       	dec	r24
     b28:	e9 f7       	brne	.-6      	; 0xb24 <main+0x2a>
	uart_init(9600,1);
     b2a:	41 e0       	ldi	r20, 0x01	; 1
     b2c:	60 e8       	ldi	r22, 0x80	; 128
     b2e:	75 e2       	ldi	r23, 0x25	; 37
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 fe 04 	call	0x9fc	; 0x9fc <uart_init>
	twi_init(400000);
     b38:	60 e8       	ldi	r22, 0x80	; 128
     b3a:	7a e1       	ldi	r23, 0x1A	; 26
     b3c:	86 e0       	ldi	r24, 0x06	; 6
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	0e 94 a1 04 	call	0x942	; 0x942 <twi_init>
	
	EICRA |= (0b10 << ISC00);
     b44:	e9 e6       	ldi	r30, 0x69	; 105
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	82 60       	ori	r24, 0x02	; 2
     b4c:	80 83       	st	Z, r24
	EIMSK = 0x01; //0b00000001
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	8d bb       	out	0x1d, r24	; 29
	
	set_pin_dir(&ld1 , PORT_DIR_OUT); set_pin_level(&ld1, true);
     b52:	61 e0       	ldi	r22, 0x01	; 1
     b54:	8f e0       	ldi	r24, 0x0F	; 15
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <set_pin_dir>
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	8f e0       	ldi	r24, 0x0F	; 15
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 cb 00 	call	0x196	; 0x196 <set_pin_level>
	set_pin_dir(&rtc_int, PORT_DIR_IN);
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	82 e1       	ldi	r24, 0x12	; 18
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <set_pin_dir>
	
	sei();
     b70:	78 94       	sei
	rtc_set(&sys_rtc);
     b72:	87 e0       	ldi	r24, 0x07	; 7
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 cb 01 	call	0x396	; 0x396 <rtc_set>
	rtc_int_enable(&sys_rtc ,0);
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	87 e0       	ldi	r24, 0x07	; 7
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	0e 94 47 01 	call	0x28e	; 0x28e <rtc_int_enable>
	adc_init();
     b86:	0e 94 88 00 	call	0x110	; 0x110 <adc_init>
	

	led_board_sw_reset(panel_addr);
     b8a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <panel_addr>
     b8e:	0e 94 0c 02 	call	0x418	; 0x418 <led_board_sw_reset>
	led_board_init(panel_addr);
     b92:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <panel_addr>
     b96:	0e 94 49 02 	call	0x492	; 0x492 <led_board_init>

	
	uart_send_string((uint8_t *)"RUN\n\r");
     b9a:	85 e9       	ldi	r24, 0x95	; 149
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	0e 94 3b 05 	call	0xa76	; 0xa76 <uart_send_string>
		sleep_enable();
     ba2:	83 b7       	in	r24, 0x33	; 51
     ba4:	81 60       	ori	r24, 0x01	; 1
     ba6:	83 bf       	out	0x33, r24	; 51
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     ba8:	83 b7       	in	r24, 0x33	; 51
     baa:	81 7f       	andi	r24, 0xF1	; 241
     bac:	84 60       	ori	r24, 0x04	; 4
     bae:	83 bf       	out	0x33, r24	; 51
    while (1) 
    {
		
		
		
		if (rtc_int_request != 0){
     bb0:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <rtc_int_request>
     bb4:	88 23       	and	r24, r24
     bb6:	d1 f1       	breq	.+116    	; 0xc2c <main+0x132>
			rtc_sync(&sys_rtc);
     bb8:	87 e0       	ldi	r24, 0x07	; 7
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 75 01 	call	0x2ea	; 0x2ea <rtc_sync>
			BAT_VOLT = get_mVolt(ADC4_PIN);
     bc0:	84 e0       	ldi	r24, 0x04	; 4
     bc2:	0e 94 b8 00 	call	0x170	; 0x170 <get_mVolt>
     bc6:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <BAT_VOLT+0x1>
     bca:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <BAT_VOLT>
			LIGHT_LEVEL = get_mVolt(ADC5_PIN);			
     bce:	85 e0       	ldi	r24, 0x05	; 5
     bd0:	0e 94 b8 00 	call	0x170	; 0x170 <get_mVolt>
     bd4:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <LIGHT_LEVEL>
     bd8:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <LIGHT_LEVEL+0x1>
			sprintf(char_array, "%02d:%02d:%02d; bat:%umV; l=%u; init: %02X \r\n", sys_rtc.hour, sys_rtc.minute, sys_rtc.second, BAT_VOLT, LIGHT_LEVEL);
     bdc:	e7 e0       	ldi	r30, 0x07	; 7
     bde:	f1 e0       	ldi	r31, 0x01	; 1
     be0:	40 81       	ld	r20, Z
     be2:	31 81       	ldd	r19, Z+1	; 0x01
     be4:	22 81       	ldd	r18, Z+2	; 0x02
     be6:	9f 93       	push	r25
     be8:	8f 93       	push	r24
     bea:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <BAT_VOLT+0x1>
     bee:	8f 93       	push	r24
     bf0:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <BAT_VOLT>
     bf4:	8f 93       	push	r24
     bf6:	1f 92       	push	r1
     bf8:	4f 93       	push	r20
     bfa:	1f 92       	push	r1
     bfc:	3f 93       	push	r19
     bfe:	1f 92       	push	r1
     c00:	2f 93       	push	r18
     c02:	8b e9       	ldi	r24, 0x9B	; 155
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	9f 93       	push	r25
     c08:	8f 93       	push	r24
     c0a:	8e 01       	movw	r16, r28
     c0c:	0f 5f       	subi	r16, 0xFF	; 255
     c0e:	1f 4f       	sbci	r17, 0xFF	; 255
     c10:	1f 93       	push	r17
     c12:	0f 93       	push	r16
     c14:	0e 94 7e 07 	call	0xefc	; 0xefc <sprintf>
			uart_send_string((uint8_t *)char_array);
     c18:	c8 01       	movw	r24, r16
     c1a:	0e 94 3b 05 	call	0xa76	; 0xa76 <uart_send_string>
			rtc_int_request = 0;
     c1e:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <rtc_int_request>
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
			
			//run_wave(brightness, pwmChannels, 1);
			
		}
		
		sleep_cpu();
     c2c:	88 95       	sleep
		
		
    }
     c2e:	c0 cf       	rjmp	.-128    	; 0xbb0 <main+0xb6>

00000c30 <__fixunssfsi>:
     c30:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fp_splitA>
     c34:	88 f0       	brcs	.+34     	; 0xc58 <__fixunssfsi+0x28>
     c36:	9f 57       	subi	r25, 0x7F	; 127
     c38:	98 f0       	brcs	.+38     	; 0xc60 <__fixunssfsi+0x30>
     c3a:	b9 2f       	mov	r27, r25
     c3c:	99 27       	eor	r25, r25
     c3e:	b7 51       	subi	r27, 0x17	; 23
     c40:	b0 f0       	brcs	.+44     	; 0xc6e <__fixunssfsi+0x3e>
     c42:	e1 f0       	breq	.+56     	; 0xc7c <__fixunssfsi+0x4c>
     c44:	66 0f       	add	r22, r22
     c46:	77 1f       	adc	r23, r23
     c48:	88 1f       	adc	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	1a f0       	brmi	.+6      	; 0xc54 <__fixunssfsi+0x24>
     c4e:	ba 95       	dec	r27
     c50:	c9 f7       	brne	.-14     	; 0xc44 <__fixunssfsi+0x14>
     c52:	14 c0       	rjmp	.+40     	; 0xc7c <__fixunssfsi+0x4c>
     c54:	b1 30       	cpi	r27, 0x01	; 1
     c56:	91 f0       	breq	.+36     	; 0xc7c <__fixunssfsi+0x4c>
     c58:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__fp_zero>
     c5c:	b1 e0       	ldi	r27, 0x01	; 1
     c5e:	08 95       	ret
     c60:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__fp_zero>
     c64:	67 2f       	mov	r22, r23
     c66:	78 2f       	mov	r23, r24
     c68:	88 27       	eor	r24, r24
     c6a:	b8 5f       	subi	r27, 0xF8	; 248
     c6c:	39 f0       	breq	.+14     	; 0xc7c <__fixunssfsi+0x4c>
     c6e:	b9 3f       	cpi	r27, 0xF9	; 249
     c70:	cc f3       	brlt	.-14     	; 0xc64 <__fixunssfsi+0x34>
     c72:	86 95       	lsr	r24
     c74:	77 95       	ror	r23
     c76:	67 95       	ror	r22
     c78:	b3 95       	inc	r27
     c7a:	d9 f7       	brne	.-10     	; 0xc72 <__fixunssfsi+0x42>
     c7c:	3e f4       	brtc	.+14     	; 0xc8c <__fixunssfsi+0x5c>
     c7e:	90 95       	com	r25
     c80:	80 95       	com	r24
     c82:	70 95       	com	r23
     c84:	61 95       	neg	r22
     c86:	7f 4f       	sbci	r23, 0xFF	; 255
     c88:	8f 4f       	sbci	r24, 0xFF	; 255
     c8a:	9f 4f       	sbci	r25, 0xFF	; 255
     c8c:	08 95       	ret

00000c8e <__floatunsisf>:
     c8e:	e8 94       	clt
     c90:	09 c0       	rjmp	.+18     	; 0xca4 <__floatsisf+0x12>

00000c92 <__floatsisf>:
     c92:	97 fb       	bst	r25, 7
     c94:	3e f4       	brtc	.+14     	; 0xca4 <__floatsisf+0x12>
     c96:	90 95       	com	r25
     c98:	80 95       	com	r24
     c9a:	70 95       	com	r23
     c9c:	61 95       	neg	r22
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	8f 4f       	sbci	r24, 0xFF	; 255
     ca2:	9f 4f       	sbci	r25, 0xFF	; 255
     ca4:	99 23       	and	r25, r25
     ca6:	a9 f0       	breq	.+42     	; 0xcd2 <__floatsisf+0x40>
     ca8:	f9 2f       	mov	r31, r25
     caa:	96 e9       	ldi	r25, 0x96	; 150
     cac:	bb 27       	eor	r27, r27
     cae:	93 95       	inc	r25
     cb0:	f6 95       	lsr	r31
     cb2:	87 95       	ror	r24
     cb4:	77 95       	ror	r23
     cb6:	67 95       	ror	r22
     cb8:	b7 95       	ror	r27
     cba:	f1 11       	cpse	r31, r1
     cbc:	f8 cf       	rjmp	.-16     	; 0xcae <__floatsisf+0x1c>
     cbe:	fa f4       	brpl	.+62     	; 0xcfe <__floatsisf+0x6c>
     cc0:	bb 0f       	add	r27, r27
     cc2:	11 f4       	brne	.+4      	; 0xcc8 <__floatsisf+0x36>
     cc4:	60 ff       	sbrs	r22, 0
     cc6:	1b c0       	rjmp	.+54     	; 0xcfe <__floatsisf+0x6c>
     cc8:	6f 5f       	subi	r22, 0xFF	; 255
     cca:	7f 4f       	sbci	r23, 0xFF	; 255
     ccc:	8f 4f       	sbci	r24, 0xFF	; 255
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	16 c0       	rjmp	.+44     	; 0xcfe <__floatsisf+0x6c>
     cd2:	88 23       	and	r24, r24
     cd4:	11 f0       	breq	.+4      	; 0xcda <__floatsisf+0x48>
     cd6:	96 e9       	ldi	r25, 0x96	; 150
     cd8:	11 c0       	rjmp	.+34     	; 0xcfc <__floatsisf+0x6a>
     cda:	77 23       	and	r23, r23
     cdc:	21 f0       	breq	.+8      	; 0xce6 <__floatsisf+0x54>
     cde:	9e e8       	ldi	r25, 0x8E	; 142
     ce0:	87 2f       	mov	r24, r23
     ce2:	76 2f       	mov	r23, r22
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__floatsisf+0x5e>
     ce6:	66 23       	and	r22, r22
     ce8:	71 f0       	breq	.+28     	; 0xd06 <__floatsisf+0x74>
     cea:	96 e8       	ldi	r25, 0x86	; 134
     cec:	86 2f       	mov	r24, r22
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	2a f0       	brmi	.+10     	; 0xcfe <__floatsisf+0x6c>
     cf4:	9a 95       	dec	r25
     cf6:	66 0f       	add	r22, r22
     cf8:	77 1f       	adc	r23, r23
     cfa:	88 1f       	adc	r24, r24
     cfc:	da f7       	brpl	.-10     	; 0xcf4 <__floatsisf+0x62>
     cfe:	88 0f       	add	r24, r24
     d00:	96 95       	lsr	r25
     d02:	87 95       	ror	r24
     d04:	97 f9       	bld	r25, 7
     d06:	08 95       	ret

00000d08 <__fp_split3>:
     d08:	57 fd       	sbrc	r21, 7
     d0a:	90 58       	subi	r25, 0x80	; 128
     d0c:	44 0f       	add	r20, r20
     d0e:	55 1f       	adc	r21, r21
     d10:	59 f0       	breq	.+22     	; 0xd28 <__fp_splitA+0x10>
     d12:	5f 3f       	cpi	r21, 0xFF	; 255
     d14:	71 f0       	breq	.+28     	; 0xd32 <__fp_splitA+0x1a>
     d16:	47 95       	ror	r20

00000d18 <__fp_splitA>:
     d18:	88 0f       	add	r24, r24
     d1a:	97 fb       	bst	r25, 7
     d1c:	99 1f       	adc	r25, r25
     d1e:	61 f0       	breq	.+24     	; 0xd38 <__fp_splitA+0x20>
     d20:	9f 3f       	cpi	r25, 0xFF	; 255
     d22:	79 f0       	breq	.+30     	; 0xd42 <__fp_splitA+0x2a>
     d24:	87 95       	ror	r24
     d26:	08 95       	ret
     d28:	12 16       	cp	r1, r18
     d2a:	13 06       	cpc	r1, r19
     d2c:	14 06       	cpc	r1, r20
     d2e:	55 1f       	adc	r21, r21
     d30:	f2 cf       	rjmp	.-28     	; 0xd16 <__fp_split3+0xe>
     d32:	46 95       	lsr	r20
     d34:	f1 df       	rcall	.-30     	; 0xd18 <__fp_splitA>
     d36:	08 c0       	rjmp	.+16     	; 0xd48 <__fp_splitA+0x30>
     d38:	16 16       	cp	r1, r22
     d3a:	17 06       	cpc	r1, r23
     d3c:	18 06       	cpc	r1, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	f1 cf       	rjmp	.-30     	; 0xd24 <__fp_splitA+0xc>
     d42:	86 95       	lsr	r24
     d44:	71 05       	cpc	r23, r1
     d46:	61 05       	cpc	r22, r1
     d48:	08 94       	sec
     d4a:	08 95       	ret

00000d4c <__fp_zero>:
     d4c:	e8 94       	clt

00000d4e <__fp_szero>:
     d4e:	bb 27       	eor	r27, r27
     d50:	66 27       	eor	r22, r22
     d52:	77 27       	eor	r23, r23
     d54:	cb 01       	movw	r24, r22
     d56:	97 f9       	bld	r25, 7
     d58:	08 95       	ret

00000d5a <__mulsf3>:
     d5a:	0e 94 c0 06 	call	0xd80	; 0xd80 <__mulsf3x>
     d5e:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__fp_round>
     d62:	0e 94 23 07 	call	0xe46	; 0xe46 <__fp_pscA>
     d66:	38 f0       	brcs	.+14     	; 0xd76 <__mulsf3+0x1c>
     d68:	0e 94 2a 07 	call	0xe54	; 0xe54 <__fp_pscB>
     d6c:	20 f0       	brcs	.+8      	; 0xd76 <__mulsf3+0x1c>
     d6e:	95 23       	and	r25, r21
     d70:	11 f0       	breq	.+4      	; 0xd76 <__mulsf3+0x1c>
     d72:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__fp_inf>
     d76:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_nan>
     d7a:	11 24       	eor	r1, r1
     d7c:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_szero>

00000d80 <__mulsf3x>:
     d80:	0e 94 84 06 	call	0xd08	; 0xd08 <__fp_split3>
     d84:	70 f3       	brcs	.-36     	; 0xd62 <__mulsf3+0x8>

00000d86 <__mulsf3_pse>:
     d86:	95 9f       	mul	r25, r21
     d88:	c1 f3       	breq	.-16     	; 0xd7a <__mulsf3+0x20>
     d8a:	95 0f       	add	r25, r21
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	55 1f       	adc	r21, r21
     d90:	62 9f       	mul	r22, r18
     d92:	f0 01       	movw	r30, r0
     d94:	72 9f       	mul	r23, r18
     d96:	bb 27       	eor	r27, r27
     d98:	f0 0d       	add	r31, r0
     d9a:	b1 1d       	adc	r27, r1
     d9c:	63 9f       	mul	r22, r19
     d9e:	aa 27       	eor	r26, r26
     da0:	f0 0d       	add	r31, r0
     da2:	b1 1d       	adc	r27, r1
     da4:	aa 1f       	adc	r26, r26
     da6:	64 9f       	mul	r22, r20
     da8:	66 27       	eor	r22, r22
     daa:	b0 0d       	add	r27, r0
     dac:	a1 1d       	adc	r26, r1
     dae:	66 1f       	adc	r22, r22
     db0:	82 9f       	mul	r24, r18
     db2:	22 27       	eor	r18, r18
     db4:	b0 0d       	add	r27, r0
     db6:	a1 1d       	adc	r26, r1
     db8:	62 1f       	adc	r22, r18
     dba:	73 9f       	mul	r23, r19
     dbc:	b0 0d       	add	r27, r0
     dbe:	a1 1d       	adc	r26, r1
     dc0:	62 1f       	adc	r22, r18
     dc2:	83 9f       	mul	r24, r19
     dc4:	a0 0d       	add	r26, r0
     dc6:	61 1d       	adc	r22, r1
     dc8:	22 1f       	adc	r18, r18
     dca:	74 9f       	mul	r23, r20
     dcc:	33 27       	eor	r19, r19
     dce:	a0 0d       	add	r26, r0
     dd0:	61 1d       	adc	r22, r1
     dd2:	23 1f       	adc	r18, r19
     dd4:	84 9f       	mul	r24, r20
     dd6:	60 0d       	add	r22, r0
     dd8:	21 1d       	adc	r18, r1
     dda:	82 2f       	mov	r24, r18
     ddc:	76 2f       	mov	r23, r22
     dde:	6a 2f       	mov	r22, r26
     de0:	11 24       	eor	r1, r1
     de2:	9f 57       	subi	r25, 0x7F	; 127
     de4:	50 40       	sbci	r21, 0x00	; 0
     de6:	9a f0       	brmi	.+38     	; 0xe0e <__mulsf3_pse+0x88>
     de8:	f1 f0       	breq	.+60     	; 0xe26 <__mulsf3_pse+0xa0>
     dea:	88 23       	and	r24, r24
     dec:	4a f0       	brmi	.+18     	; 0xe00 <__mulsf3_pse+0x7a>
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	bb 1f       	adc	r27, r27
     df4:	66 1f       	adc	r22, r22
     df6:	77 1f       	adc	r23, r23
     df8:	88 1f       	adc	r24, r24
     dfa:	91 50       	subi	r25, 0x01	; 1
     dfc:	50 40       	sbci	r21, 0x00	; 0
     dfe:	a9 f7       	brne	.-22     	; 0xdea <__mulsf3_pse+0x64>
     e00:	9e 3f       	cpi	r25, 0xFE	; 254
     e02:	51 05       	cpc	r21, r1
     e04:	80 f0       	brcs	.+32     	; 0xe26 <__mulsf3_pse+0xa0>
     e06:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__fp_inf>
     e0a:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_szero>
     e0e:	5f 3f       	cpi	r21, 0xFF	; 255
     e10:	e4 f3       	brlt	.-8      	; 0xe0a <__mulsf3_pse+0x84>
     e12:	98 3e       	cpi	r25, 0xE8	; 232
     e14:	d4 f3       	brlt	.-12     	; 0xe0a <__mulsf3_pse+0x84>
     e16:	86 95       	lsr	r24
     e18:	77 95       	ror	r23
     e1a:	67 95       	ror	r22
     e1c:	b7 95       	ror	r27
     e1e:	f7 95       	ror	r31
     e20:	e7 95       	ror	r30
     e22:	9f 5f       	subi	r25, 0xFF	; 255
     e24:	c1 f7       	brne	.-16     	; 0xe16 <__mulsf3_pse+0x90>
     e26:	fe 2b       	or	r31, r30
     e28:	88 0f       	add	r24, r24
     e2a:	91 1d       	adc	r25, r1
     e2c:	96 95       	lsr	r25
     e2e:	87 95       	ror	r24
     e30:	97 f9       	bld	r25, 7
     e32:	08 95       	ret

00000e34 <__fp_inf>:
     e34:	97 f9       	bld	r25, 7
     e36:	9f 67       	ori	r25, 0x7F	; 127
     e38:	80 e8       	ldi	r24, 0x80	; 128
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	08 95       	ret

00000e40 <__fp_nan>:
     e40:	9f ef       	ldi	r25, 0xFF	; 255
     e42:	80 ec       	ldi	r24, 0xC0	; 192
     e44:	08 95       	ret

00000e46 <__fp_pscA>:
     e46:	00 24       	eor	r0, r0
     e48:	0a 94       	dec	r0
     e4a:	16 16       	cp	r1, r22
     e4c:	17 06       	cpc	r1, r23
     e4e:	18 06       	cpc	r1, r24
     e50:	09 06       	cpc	r0, r25
     e52:	08 95       	ret

00000e54 <__fp_pscB>:
     e54:	00 24       	eor	r0, r0
     e56:	0a 94       	dec	r0
     e58:	12 16       	cp	r1, r18
     e5a:	13 06       	cpc	r1, r19
     e5c:	14 06       	cpc	r1, r20
     e5e:	05 06       	cpc	r0, r21
     e60:	08 95       	ret

00000e62 <__fp_round>:
     e62:	09 2e       	mov	r0, r25
     e64:	03 94       	inc	r0
     e66:	00 0c       	add	r0, r0
     e68:	11 f4       	brne	.+4      	; 0xe6e <__fp_round+0xc>
     e6a:	88 23       	and	r24, r24
     e6c:	52 f0       	brmi	.+20     	; 0xe82 <__fp_round+0x20>
     e6e:	bb 0f       	add	r27, r27
     e70:	40 f4       	brcc	.+16     	; 0xe82 <__fp_round+0x20>
     e72:	bf 2b       	or	r27, r31
     e74:	11 f4       	brne	.+4      	; 0xe7a <__fp_round+0x18>
     e76:	60 ff       	sbrs	r22, 0
     e78:	04 c0       	rjmp	.+8      	; 0xe82 <__fp_round+0x20>
     e7a:	6f 5f       	subi	r22, 0xFF	; 255
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	8f 4f       	sbci	r24, 0xFF	; 255
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	08 95       	ret

00000e84 <__udivmodsi4>:
     e84:	a1 e2       	ldi	r26, 0x21	; 33
     e86:	1a 2e       	mov	r1, r26
     e88:	aa 1b       	sub	r26, r26
     e8a:	bb 1b       	sub	r27, r27
     e8c:	fd 01       	movw	r30, r26
     e8e:	0d c0       	rjmp	.+26     	; 0xeaa <__udivmodsi4_ep>

00000e90 <__udivmodsi4_loop>:
     e90:	aa 1f       	adc	r26, r26
     e92:	bb 1f       	adc	r27, r27
     e94:	ee 1f       	adc	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	a2 17       	cp	r26, r18
     e9a:	b3 07       	cpc	r27, r19
     e9c:	e4 07       	cpc	r30, r20
     e9e:	f5 07       	cpc	r31, r21
     ea0:	20 f0       	brcs	.+8      	; 0xeaa <__udivmodsi4_ep>
     ea2:	a2 1b       	sub	r26, r18
     ea4:	b3 0b       	sbc	r27, r19
     ea6:	e4 0b       	sbc	r30, r20
     ea8:	f5 0b       	sbc	r31, r21

00000eaa <__udivmodsi4_ep>:
     eaa:	66 1f       	adc	r22, r22
     eac:	77 1f       	adc	r23, r23
     eae:	88 1f       	adc	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	1a 94       	dec	r1
     eb4:	69 f7       	brne	.-38     	; 0xe90 <__udivmodsi4_loop>
     eb6:	60 95       	com	r22
     eb8:	70 95       	com	r23
     eba:	80 95       	com	r24
     ebc:	90 95       	com	r25
     ebe:	9b 01       	movw	r18, r22
     ec0:	ac 01       	movw	r20, r24
     ec2:	bd 01       	movw	r22, r26
     ec4:	cf 01       	movw	r24, r30
     ec6:	08 95       	ret

00000ec8 <__muluhisi3>:
     ec8:	0e 94 6f 07 	call	0xede	; 0xede <__umulhisi3>
     ecc:	a5 9f       	mul	r26, r21
     ece:	90 0d       	add	r25, r0
     ed0:	b4 9f       	mul	r27, r20
     ed2:	90 0d       	add	r25, r0
     ed4:	a4 9f       	mul	r26, r20
     ed6:	80 0d       	add	r24, r0
     ed8:	91 1d       	adc	r25, r1
     eda:	11 24       	eor	r1, r1
     edc:	08 95       	ret

00000ede <__umulhisi3>:
     ede:	a2 9f       	mul	r26, r18
     ee0:	b0 01       	movw	r22, r0
     ee2:	b3 9f       	mul	r27, r19
     ee4:	c0 01       	movw	r24, r0
     ee6:	a3 9f       	mul	r26, r19
     ee8:	70 0d       	add	r23, r0
     eea:	81 1d       	adc	r24, r1
     eec:	11 24       	eor	r1, r1
     eee:	91 1d       	adc	r25, r1
     ef0:	b2 9f       	mul	r27, r18
     ef2:	70 0d       	add	r23, r0
     ef4:	81 1d       	adc	r24, r1
     ef6:	11 24       	eor	r1, r1
     ef8:	91 1d       	adc	r25, r1
     efa:	08 95       	ret

00000efc <sprintf>:
     efc:	ae e0       	ldi	r26, 0x0E	; 14
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e4 e8       	ldi	r30, 0x84	; 132
     f02:	f7 e0       	ldi	r31, 0x07	; 7
     f04:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__prologue_saves__+0x1c>
     f08:	0d 89       	ldd	r16, Y+21	; 0x15
     f0a:	1e 89       	ldd	r17, Y+22	; 0x16
     f0c:	86 e0       	ldi	r24, 0x06	; 6
     f0e:	8c 83       	std	Y+4, r24	; 0x04
     f10:	1a 83       	std	Y+2, r17	; 0x02
     f12:	09 83       	std	Y+1, r16	; 0x01
     f14:	8f ef       	ldi	r24, 0xFF	; 255
     f16:	9f e7       	ldi	r25, 0x7F	; 127
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
     f1c:	ae 01       	movw	r20, r28
     f1e:	47 5e       	subi	r20, 0xE7	; 231
     f20:	5f 4f       	sbci	r21, 0xFF	; 255
     f22:	6f 89       	ldd	r22, Y+23	; 0x17
     f24:	78 8d       	ldd	r23, Y+24	; 0x18
     f26:	ce 01       	movw	r24, r28
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	0e 94 a0 07 	call	0xf40	; 0xf40 <vfprintf>
     f2e:	ef 81       	ldd	r30, Y+7	; 0x07
     f30:	f8 85       	ldd	r31, Y+8	; 0x08
     f32:	e0 0f       	add	r30, r16
     f34:	f1 1f       	adc	r31, r17
     f36:	10 82       	st	Z, r1
     f38:	2e 96       	adiw	r28, 0x0e	; 14
     f3a:	e4 e0       	ldi	r30, 0x04	; 4
     f3c:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__epilogue_restores__+0x1c>

00000f40 <vfprintf>:
     f40:	ab e0       	ldi	r26, 0x0B	; 11
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e6 ea       	ldi	r30, 0xA6	; 166
     f46:	f7 e0       	ldi	r31, 0x07	; 7
     f48:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__prologue_saves__>
     f4c:	6c 01       	movw	r12, r24
     f4e:	7b 01       	movw	r14, r22
     f50:	8a 01       	movw	r16, r20
     f52:	fc 01       	movw	r30, r24
     f54:	17 82       	std	Z+7, r1	; 0x07
     f56:	16 82       	std	Z+6, r1	; 0x06
     f58:	83 81       	ldd	r24, Z+3	; 0x03
     f5a:	81 ff       	sbrs	r24, 1
     f5c:	cc c1       	rjmp	.+920    	; 0x12f6 <vfprintf+0x3b6>
     f5e:	ce 01       	movw	r24, r28
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	3c 01       	movw	r6, r24
     f64:	f6 01       	movw	r30, r12
     f66:	93 81       	ldd	r25, Z+3	; 0x03
     f68:	f7 01       	movw	r30, r14
     f6a:	93 fd       	sbrc	r25, 3
     f6c:	85 91       	lpm	r24, Z+
     f6e:	93 ff       	sbrs	r25, 3
     f70:	81 91       	ld	r24, Z+
     f72:	7f 01       	movw	r14, r30
     f74:	88 23       	and	r24, r24
     f76:	09 f4       	brne	.+2      	; 0xf7a <vfprintf+0x3a>
     f78:	ba c1       	rjmp	.+884    	; 0x12ee <vfprintf+0x3ae>
     f7a:	85 32       	cpi	r24, 0x25	; 37
     f7c:	39 f4       	brne	.+14     	; 0xf8c <vfprintf+0x4c>
     f7e:	93 fd       	sbrc	r25, 3
     f80:	85 91       	lpm	r24, Z+
     f82:	93 ff       	sbrs	r25, 3
     f84:	81 91       	ld	r24, Z+
     f86:	7f 01       	movw	r14, r30
     f88:	85 32       	cpi	r24, 0x25	; 37
     f8a:	29 f4       	brne	.+10     	; 0xf96 <vfprintf+0x56>
     f8c:	b6 01       	movw	r22, r12
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
     f94:	e7 cf       	rjmp	.-50     	; 0xf64 <vfprintf+0x24>
     f96:	91 2c       	mov	r9, r1
     f98:	21 2c       	mov	r2, r1
     f9a:	31 2c       	mov	r3, r1
     f9c:	ff e1       	ldi	r31, 0x1F	; 31
     f9e:	f3 15       	cp	r31, r3
     fa0:	d8 f0       	brcs	.+54     	; 0xfd8 <vfprintf+0x98>
     fa2:	8b 32       	cpi	r24, 0x2B	; 43
     fa4:	79 f0       	breq	.+30     	; 0xfc4 <vfprintf+0x84>
     fa6:	38 f4       	brcc	.+14     	; 0xfb6 <vfprintf+0x76>
     fa8:	80 32       	cpi	r24, 0x20	; 32
     faa:	79 f0       	breq	.+30     	; 0xfca <vfprintf+0x8a>
     fac:	83 32       	cpi	r24, 0x23	; 35
     fae:	a1 f4       	brne	.+40     	; 0xfd8 <vfprintf+0x98>
     fb0:	23 2d       	mov	r18, r3
     fb2:	20 61       	ori	r18, 0x10	; 16
     fb4:	1d c0       	rjmp	.+58     	; 0xff0 <vfprintf+0xb0>
     fb6:	8d 32       	cpi	r24, 0x2D	; 45
     fb8:	61 f0       	breq	.+24     	; 0xfd2 <vfprintf+0x92>
     fba:	80 33       	cpi	r24, 0x30	; 48
     fbc:	69 f4       	brne	.+26     	; 0xfd8 <vfprintf+0x98>
     fbe:	23 2d       	mov	r18, r3
     fc0:	21 60       	ori	r18, 0x01	; 1
     fc2:	16 c0       	rjmp	.+44     	; 0xff0 <vfprintf+0xb0>
     fc4:	83 2d       	mov	r24, r3
     fc6:	82 60       	ori	r24, 0x02	; 2
     fc8:	38 2e       	mov	r3, r24
     fca:	e3 2d       	mov	r30, r3
     fcc:	e4 60       	ori	r30, 0x04	; 4
     fce:	3e 2e       	mov	r3, r30
     fd0:	2a c0       	rjmp	.+84     	; 0x1026 <vfprintf+0xe6>
     fd2:	f3 2d       	mov	r31, r3
     fd4:	f8 60       	ori	r31, 0x08	; 8
     fd6:	1d c0       	rjmp	.+58     	; 0x1012 <vfprintf+0xd2>
     fd8:	37 fc       	sbrc	r3, 7
     fda:	2d c0       	rjmp	.+90     	; 0x1036 <vfprintf+0xf6>
     fdc:	20 ed       	ldi	r18, 0xD0	; 208
     fde:	28 0f       	add	r18, r24
     fe0:	2a 30       	cpi	r18, 0x0A	; 10
     fe2:	40 f0       	brcs	.+16     	; 0xff4 <vfprintf+0xb4>
     fe4:	8e 32       	cpi	r24, 0x2E	; 46
     fe6:	b9 f4       	brne	.+46     	; 0x1016 <vfprintf+0xd6>
     fe8:	36 fc       	sbrc	r3, 6
     fea:	81 c1       	rjmp	.+770    	; 0x12ee <vfprintf+0x3ae>
     fec:	23 2d       	mov	r18, r3
     fee:	20 64       	ori	r18, 0x40	; 64
     ff0:	32 2e       	mov	r3, r18
     ff2:	19 c0       	rjmp	.+50     	; 0x1026 <vfprintf+0xe6>
     ff4:	36 fe       	sbrs	r3, 6
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <vfprintf+0xc4>
     ff8:	8a e0       	ldi	r24, 0x0A	; 10
     ffa:	98 9e       	mul	r9, r24
     ffc:	20 0d       	add	r18, r0
     ffe:	11 24       	eor	r1, r1
    1000:	92 2e       	mov	r9, r18
    1002:	11 c0       	rjmp	.+34     	; 0x1026 <vfprintf+0xe6>
    1004:	ea e0       	ldi	r30, 0x0A	; 10
    1006:	2e 9e       	mul	r2, r30
    1008:	20 0d       	add	r18, r0
    100a:	11 24       	eor	r1, r1
    100c:	22 2e       	mov	r2, r18
    100e:	f3 2d       	mov	r31, r3
    1010:	f0 62       	ori	r31, 0x20	; 32
    1012:	3f 2e       	mov	r3, r31
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <vfprintf+0xe6>
    1016:	8c 36       	cpi	r24, 0x6C	; 108
    1018:	21 f4       	brne	.+8      	; 0x1022 <vfprintf+0xe2>
    101a:	83 2d       	mov	r24, r3
    101c:	80 68       	ori	r24, 0x80	; 128
    101e:	38 2e       	mov	r3, r24
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <vfprintf+0xe6>
    1022:	88 36       	cpi	r24, 0x68	; 104
    1024:	41 f4       	brne	.+16     	; 0x1036 <vfprintf+0xf6>
    1026:	f7 01       	movw	r30, r14
    1028:	93 fd       	sbrc	r25, 3
    102a:	85 91       	lpm	r24, Z+
    102c:	93 ff       	sbrs	r25, 3
    102e:	81 91       	ld	r24, Z+
    1030:	7f 01       	movw	r14, r30
    1032:	81 11       	cpse	r24, r1
    1034:	b3 cf       	rjmp	.-154    	; 0xf9c <vfprintf+0x5c>
    1036:	98 2f       	mov	r25, r24
    1038:	9f 7d       	andi	r25, 0xDF	; 223
    103a:	95 54       	subi	r25, 0x45	; 69
    103c:	93 30       	cpi	r25, 0x03	; 3
    103e:	28 f4       	brcc	.+10     	; 0x104a <vfprintf+0x10a>
    1040:	0c 5f       	subi	r16, 0xFC	; 252
    1042:	1f 4f       	sbci	r17, 0xFF	; 255
    1044:	9f e3       	ldi	r25, 0x3F	; 63
    1046:	99 83       	std	Y+1, r25	; 0x01
    1048:	0d c0       	rjmp	.+26     	; 0x1064 <vfprintf+0x124>
    104a:	83 36       	cpi	r24, 0x63	; 99
    104c:	31 f0       	breq	.+12     	; 0x105a <vfprintf+0x11a>
    104e:	83 37       	cpi	r24, 0x73	; 115
    1050:	71 f0       	breq	.+28     	; 0x106e <vfprintf+0x12e>
    1052:	83 35       	cpi	r24, 0x53	; 83
    1054:	09 f0       	breq	.+2      	; 0x1058 <vfprintf+0x118>
    1056:	59 c0       	rjmp	.+178    	; 0x110a <vfprintf+0x1ca>
    1058:	21 c0       	rjmp	.+66     	; 0x109c <vfprintf+0x15c>
    105a:	f8 01       	movw	r30, r16
    105c:	80 81       	ld	r24, Z
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	0e 5f       	subi	r16, 0xFE	; 254
    1062:	1f 4f       	sbci	r17, 0xFF	; 255
    1064:	88 24       	eor	r8, r8
    1066:	83 94       	inc	r8
    1068:	91 2c       	mov	r9, r1
    106a:	53 01       	movw	r10, r6
    106c:	13 c0       	rjmp	.+38     	; 0x1094 <vfprintf+0x154>
    106e:	28 01       	movw	r4, r16
    1070:	f2 e0       	ldi	r31, 0x02	; 2
    1072:	4f 0e       	add	r4, r31
    1074:	51 1c       	adc	r5, r1
    1076:	f8 01       	movw	r30, r16
    1078:	a0 80       	ld	r10, Z
    107a:	b1 80       	ldd	r11, Z+1	; 0x01
    107c:	36 fe       	sbrs	r3, 6
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <vfprintf+0x146>
    1080:	69 2d       	mov	r22, r9
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	02 c0       	rjmp	.+4      	; 0x108a <vfprintf+0x14a>
    1086:	6f ef       	ldi	r22, 0xFF	; 255
    1088:	7f ef       	ldi	r23, 0xFF	; 255
    108a:	c5 01       	movw	r24, r10
    108c:	0e 94 8c 09 	call	0x1318	; 0x1318 <strnlen>
    1090:	4c 01       	movw	r8, r24
    1092:	82 01       	movw	r16, r4
    1094:	f3 2d       	mov	r31, r3
    1096:	ff 77       	andi	r31, 0x7F	; 127
    1098:	3f 2e       	mov	r3, r31
    109a:	16 c0       	rjmp	.+44     	; 0x10c8 <vfprintf+0x188>
    109c:	28 01       	movw	r4, r16
    109e:	22 e0       	ldi	r18, 0x02	; 2
    10a0:	42 0e       	add	r4, r18
    10a2:	51 1c       	adc	r5, r1
    10a4:	f8 01       	movw	r30, r16
    10a6:	a0 80       	ld	r10, Z
    10a8:	b1 80       	ldd	r11, Z+1	; 0x01
    10aa:	36 fe       	sbrs	r3, 6
    10ac:	03 c0       	rjmp	.+6      	; 0x10b4 <vfprintf+0x174>
    10ae:	69 2d       	mov	r22, r9
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <vfprintf+0x178>
    10b4:	6f ef       	ldi	r22, 0xFF	; 255
    10b6:	7f ef       	ldi	r23, 0xFF	; 255
    10b8:	c5 01       	movw	r24, r10
    10ba:	0e 94 81 09 	call	0x1302	; 0x1302 <strnlen_P>
    10be:	4c 01       	movw	r8, r24
    10c0:	f3 2d       	mov	r31, r3
    10c2:	f0 68       	ori	r31, 0x80	; 128
    10c4:	3f 2e       	mov	r3, r31
    10c6:	82 01       	movw	r16, r4
    10c8:	33 fc       	sbrc	r3, 3
    10ca:	1b c0       	rjmp	.+54     	; 0x1102 <vfprintf+0x1c2>
    10cc:	82 2d       	mov	r24, r2
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	88 16       	cp	r8, r24
    10d2:	99 06       	cpc	r9, r25
    10d4:	b0 f4       	brcc	.+44     	; 0x1102 <vfprintf+0x1c2>
    10d6:	b6 01       	movw	r22, r12
    10d8:	80 e2       	ldi	r24, 0x20	; 32
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    10e0:	2a 94       	dec	r2
    10e2:	f4 cf       	rjmp	.-24     	; 0x10cc <vfprintf+0x18c>
    10e4:	f5 01       	movw	r30, r10
    10e6:	37 fc       	sbrc	r3, 7
    10e8:	85 91       	lpm	r24, Z+
    10ea:	37 fe       	sbrs	r3, 7
    10ec:	81 91       	ld	r24, Z+
    10ee:	5f 01       	movw	r10, r30
    10f0:	b6 01       	movw	r22, r12
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    10f8:	21 10       	cpse	r2, r1
    10fa:	2a 94       	dec	r2
    10fc:	21 e0       	ldi	r18, 0x01	; 1
    10fe:	82 1a       	sub	r8, r18
    1100:	91 08       	sbc	r9, r1
    1102:	81 14       	cp	r8, r1
    1104:	91 04       	cpc	r9, r1
    1106:	71 f7       	brne	.-36     	; 0x10e4 <vfprintf+0x1a4>
    1108:	e8 c0       	rjmp	.+464    	; 0x12da <vfprintf+0x39a>
    110a:	84 36       	cpi	r24, 0x64	; 100
    110c:	11 f0       	breq	.+4      	; 0x1112 <vfprintf+0x1d2>
    110e:	89 36       	cpi	r24, 0x69	; 105
    1110:	41 f5       	brne	.+80     	; 0x1162 <vfprintf+0x222>
    1112:	f8 01       	movw	r30, r16
    1114:	37 fe       	sbrs	r3, 7
    1116:	07 c0       	rjmp	.+14     	; 0x1126 <vfprintf+0x1e6>
    1118:	60 81       	ld	r22, Z
    111a:	71 81       	ldd	r23, Z+1	; 0x01
    111c:	82 81       	ldd	r24, Z+2	; 0x02
    111e:	93 81       	ldd	r25, Z+3	; 0x03
    1120:	0c 5f       	subi	r16, 0xFC	; 252
    1122:	1f 4f       	sbci	r17, 0xFF	; 255
    1124:	08 c0       	rjmp	.+16     	; 0x1136 <vfprintf+0x1f6>
    1126:	60 81       	ld	r22, Z
    1128:	71 81       	ldd	r23, Z+1	; 0x01
    112a:	07 2e       	mov	r0, r23
    112c:	00 0c       	add	r0, r0
    112e:	88 0b       	sbc	r24, r24
    1130:	99 0b       	sbc	r25, r25
    1132:	0e 5f       	subi	r16, 0xFE	; 254
    1134:	1f 4f       	sbci	r17, 0xFF	; 255
    1136:	f3 2d       	mov	r31, r3
    1138:	ff 76       	andi	r31, 0x6F	; 111
    113a:	3f 2e       	mov	r3, r31
    113c:	97 ff       	sbrs	r25, 7
    113e:	09 c0       	rjmp	.+18     	; 0x1152 <vfprintf+0x212>
    1140:	90 95       	com	r25
    1142:	80 95       	com	r24
    1144:	70 95       	com	r23
    1146:	61 95       	neg	r22
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	8f 4f       	sbci	r24, 0xFF	; 255
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	f0 68       	ori	r31, 0x80	; 128
    1150:	3f 2e       	mov	r3, r31
    1152:	2a e0       	ldi	r18, 0x0A	; 10
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	a3 01       	movw	r20, r6
    1158:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__ultoa_invert>
    115c:	88 2e       	mov	r8, r24
    115e:	86 18       	sub	r8, r6
    1160:	45 c0       	rjmp	.+138    	; 0x11ec <vfprintf+0x2ac>
    1162:	85 37       	cpi	r24, 0x75	; 117
    1164:	31 f4       	brne	.+12     	; 0x1172 <vfprintf+0x232>
    1166:	23 2d       	mov	r18, r3
    1168:	2f 7e       	andi	r18, 0xEF	; 239
    116a:	b2 2e       	mov	r11, r18
    116c:	2a e0       	ldi	r18, 0x0A	; 10
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	25 c0       	rjmp	.+74     	; 0x11bc <vfprintf+0x27c>
    1172:	93 2d       	mov	r25, r3
    1174:	99 7f       	andi	r25, 0xF9	; 249
    1176:	b9 2e       	mov	r11, r25
    1178:	8f 36       	cpi	r24, 0x6F	; 111
    117a:	c1 f0       	breq	.+48     	; 0x11ac <vfprintf+0x26c>
    117c:	18 f4       	brcc	.+6      	; 0x1184 <vfprintf+0x244>
    117e:	88 35       	cpi	r24, 0x58	; 88
    1180:	79 f0       	breq	.+30     	; 0x11a0 <vfprintf+0x260>
    1182:	b5 c0       	rjmp	.+362    	; 0x12ee <vfprintf+0x3ae>
    1184:	80 37       	cpi	r24, 0x70	; 112
    1186:	19 f0       	breq	.+6      	; 0x118e <vfprintf+0x24e>
    1188:	88 37       	cpi	r24, 0x78	; 120
    118a:	21 f0       	breq	.+8      	; 0x1194 <vfprintf+0x254>
    118c:	b0 c0       	rjmp	.+352    	; 0x12ee <vfprintf+0x3ae>
    118e:	e9 2f       	mov	r30, r25
    1190:	e0 61       	ori	r30, 0x10	; 16
    1192:	be 2e       	mov	r11, r30
    1194:	b4 fe       	sbrs	r11, 4
    1196:	0d c0       	rjmp	.+26     	; 0x11b2 <vfprintf+0x272>
    1198:	fb 2d       	mov	r31, r11
    119a:	f4 60       	ori	r31, 0x04	; 4
    119c:	bf 2e       	mov	r11, r31
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <vfprintf+0x272>
    11a0:	34 fe       	sbrs	r3, 4
    11a2:	0a c0       	rjmp	.+20     	; 0x11b8 <vfprintf+0x278>
    11a4:	29 2f       	mov	r18, r25
    11a6:	26 60       	ori	r18, 0x06	; 6
    11a8:	b2 2e       	mov	r11, r18
    11aa:	06 c0       	rjmp	.+12     	; 0x11b8 <vfprintf+0x278>
    11ac:	28 e0       	ldi	r18, 0x08	; 8
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	05 c0       	rjmp	.+10     	; 0x11bc <vfprintf+0x27c>
    11b2:	20 e1       	ldi	r18, 0x10	; 16
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <vfprintf+0x27c>
    11b8:	20 e1       	ldi	r18, 0x10	; 16
    11ba:	32 e0       	ldi	r19, 0x02	; 2
    11bc:	f8 01       	movw	r30, r16
    11be:	b7 fe       	sbrs	r11, 7
    11c0:	07 c0       	rjmp	.+14     	; 0x11d0 <vfprintf+0x290>
    11c2:	60 81       	ld	r22, Z
    11c4:	71 81       	ldd	r23, Z+1	; 0x01
    11c6:	82 81       	ldd	r24, Z+2	; 0x02
    11c8:	93 81       	ldd	r25, Z+3	; 0x03
    11ca:	0c 5f       	subi	r16, 0xFC	; 252
    11cc:	1f 4f       	sbci	r17, 0xFF	; 255
    11ce:	06 c0       	rjmp	.+12     	; 0x11dc <vfprintf+0x29c>
    11d0:	60 81       	ld	r22, Z
    11d2:	71 81       	ldd	r23, Z+1	; 0x01
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 5f       	subi	r16, 0xFE	; 254
    11da:	1f 4f       	sbci	r17, 0xFF	; 255
    11dc:	a3 01       	movw	r20, r6
    11de:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__ultoa_invert>
    11e2:	88 2e       	mov	r8, r24
    11e4:	86 18       	sub	r8, r6
    11e6:	fb 2d       	mov	r31, r11
    11e8:	ff 77       	andi	r31, 0x7F	; 127
    11ea:	3f 2e       	mov	r3, r31
    11ec:	36 fe       	sbrs	r3, 6
    11ee:	0d c0       	rjmp	.+26     	; 0x120a <vfprintf+0x2ca>
    11f0:	23 2d       	mov	r18, r3
    11f2:	2e 7f       	andi	r18, 0xFE	; 254
    11f4:	a2 2e       	mov	r10, r18
    11f6:	89 14       	cp	r8, r9
    11f8:	58 f4       	brcc	.+22     	; 0x1210 <vfprintf+0x2d0>
    11fa:	34 fe       	sbrs	r3, 4
    11fc:	0b c0       	rjmp	.+22     	; 0x1214 <vfprintf+0x2d4>
    11fe:	32 fc       	sbrc	r3, 2
    1200:	09 c0       	rjmp	.+18     	; 0x1214 <vfprintf+0x2d4>
    1202:	83 2d       	mov	r24, r3
    1204:	8e 7e       	andi	r24, 0xEE	; 238
    1206:	a8 2e       	mov	r10, r24
    1208:	05 c0       	rjmp	.+10     	; 0x1214 <vfprintf+0x2d4>
    120a:	b8 2c       	mov	r11, r8
    120c:	a3 2c       	mov	r10, r3
    120e:	03 c0       	rjmp	.+6      	; 0x1216 <vfprintf+0x2d6>
    1210:	b8 2c       	mov	r11, r8
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <vfprintf+0x2d6>
    1214:	b9 2c       	mov	r11, r9
    1216:	a4 fe       	sbrs	r10, 4
    1218:	0f c0       	rjmp	.+30     	; 0x1238 <vfprintf+0x2f8>
    121a:	fe 01       	movw	r30, r28
    121c:	e8 0d       	add	r30, r8
    121e:	f1 1d       	adc	r31, r1
    1220:	80 81       	ld	r24, Z
    1222:	80 33       	cpi	r24, 0x30	; 48
    1224:	21 f4       	brne	.+8      	; 0x122e <vfprintf+0x2ee>
    1226:	9a 2d       	mov	r25, r10
    1228:	99 7e       	andi	r25, 0xE9	; 233
    122a:	a9 2e       	mov	r10, r25
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <vfprintf+0x300>
    122e:	a2 fe       	sbrs	r10, 2
    1230:	06 c0       	rjmp	.+12     	; 0x123e <vfprintf+0x2fe>
    1232:	b3 94       	inc	r11
    1234:	b3 94       	inc	r11
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <vfprintf+0x300>
    1238:	8a 2d       	mov	r24, r10
    123a:	86 78       	andi	r24, 0x86	; 134
    123c:	09 f0       	breq	.+2      	; 0x1240 <vfprintf+0x300>
    123e:	b3 94       	inc	r11
    1240:	a3 fc       	sbrc	r10, 3
    1242:	11 c0       	rjmp	.+34     	; 0x1266 <vfprintf+0x326>
    1244:	a0 fe       	sbrs	r10, 0
    1246:	06 c0       	rjmp	.+12     	; 0x1254 <vfprintf+0x314>
    1248:	b2 14       	cp	r11, r2
    124a:	88 f4       	brcc	.+34     	; 0x126e <vfprintf+0x32e>
    124c:	28 0c       	add	r2, r8
    124e:	92 2c       	mov	r9, r2
    1250:	9b 18       	sub	r9, r11
    1252:	0e c0       	rjmp	.+28     	; 0x1270 <vfprintf+0x330>
    1254:	b2 14       	cp	r11, r2
    1256:	60 f4       	brcc	.+24     	; 0x1270 <vfprintf+0x330>
    1258:	b6 01       	movw	r22, r12
    125a:	80 e2       	ldi	r24, 0x20	; 32
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    1262:	b3 94       	inc	r11
    1264:	f7 cf       	rjmp	.-18     	; 0x1254 <vfprintf+0x314>
    1266:	b2 14       	cp	r11, r2
    1268:	18 f4       	brcc	.+6      	; 0x1270 <vfprintf+0x330>
    126a:	2b 18       	sub	r2, r11
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <vfprintf+0x332>
    126e:	98 2c       	mov	r9, r8
    1270:	21 2c       	mov	r2, r1
    1272:	a4 fe       	sbrs	r10, 4
    1274:	10 c0       	rjmp	.+32     	; 0x1296 <vfprintf+0x356>
    1276:	b6 01       	movw	r22, r12
    1278:	80 e3       	ldi	r24, 0x30	; 48
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    1280:	a2 fe       	sbrs	r10, 2
    1282:	17 c0       	rjmp	.+46     	; 0x12b2 <vfprintf+0x372>
    1284:	a1 fc       	sbrc	r10, 1
    1286:	03 c0       	rjmp	.+6      	; 0x128e <vfprintf+0x34e>
    1288:	88 e7       	ldi	r24, 0x78	; 120
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <vfprintf+0x352>
    128e:	88 e5       	ldi	r24, 0x58	; 88
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	b6 01       	movw	r22, r12
    1294:	0c c0       	rjmp	.+24     	; 0x12ae <vfprintf+0x36e>
    1296:	8a 2d       	mov	r24, r10
    1298:	86 78       	andi	r24, 0x86	; 134
    129a:	59 f0       	breq	.+22     	; 0x12b2 <vfprintf+0x372>
    129c:	a1 fe       	sbrs	r10, 1
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <vfprintf+0x364>
    12a0:	8b e2       	ldi	r24, 0x2B	; 43
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <vfprintf+0x366>
    12a4:	80 e2       	ldi	r24, 0x20	; 32
    12a6:	a7 fc       	sbrc	r10, 7
    12a8:	8d e2       	ldi	r24, 0x2D	; 45
    12aa:	b6 01       	movw	r22, r12
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    12b2:	89 14       	cp	r8, r9
    12b4:	38 f4       	brcc	.+14     	; 0x12c4 <vfprintf+0x384>
    12b6:	b6 01       	movw	r22, r12
    12b8:	80 e3       	ldi	r24, 0x30	; 48
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    12c0:	9a 94       	dec	r9
    12c2:	f7 cf       	rjmp	.-18     	; 0x12b2 <vfprintf+0x372>
    12c4:	8a 94       	dec	r8
    12c6:	f3 01       	movw	r30, r6
    12c8:	e8 0d       	add	r30, r8
    12ca:	f1 1d       	adc	r31, r1
    12cc:	80 81       	ld	r24, Z
    12ce:	b6 01       	movw	r22, r12
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    12d6:	81 10       	cpse	r8, r1
    12d8:	f5 cf       	rjmp	.-22     	; 0x12c4 <vfprintf+0x384>
    12da:	22 20       	and	r2, r2
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <vfprintf+0x3a0>
    12de:	42 ce       	rjmp	.-892    	; 0xf64 <vfprintf+0x24>
    12e0:	b6 01       	movw	r22, r12
    12e2:	80 e2       	ldi	r24, 0x20	; 32
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    12ea:	2a 94       	dec	r2
    12ec:	f6 cf       	rjmp	.-20     	; 0x12da <vfprintf+0x39a>
    12ee:	f6 01       	movw	r30, r12
    12f0:	86 81       	ldd	r24, Z+6	; 0x06
    12f2:	97 81       	ldd	r25, Z+7	; 0x07
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <vfprintf+0x3ba>
    12f6:	8f ef       	ldi	r24, 0xFF	; 255
    12f8:	9f ef       	ldi	r25, 0xFF	; 255
    12fa:	2b 96       	adiw	r28, 0x0b	; 11
    12fc:	e2 e1       	ldi	r30, 0x12	; 18
    12fe:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__epilogue_restores__>

00001302 <strnlen_P>:
    1302:	fc 01       	movw	r30, r24
    1304:	05 90       	lpm	r0, Z+
    1306:	61 50       	subi	r22, 0x01	; 1
    1308:	70 40       	sbci	r23, 0x00	; 0
    130a:	01 10       	cpse	r0, r1
    130c:	d8 f7       	brcc	.-10     	; 0x1304 <strnlen_P+0x2>
    130e:	80 95       	com	r24
    1310:	90 95       	com	r25
    1312:	8e 0f       	add	r24, r30
    1314:	9f 1f       	adc	r25, r31
    1316:	08 95       	ret

00001318 <strnlen>:
    1318:	fc 01       	movw	r30, r24
    131a:	61 50       	subi	r22, 0x01	; 1
    131c:	70 40       	sbci	r23, 0x00	; 0
    131e:	01 90       	ld	r0, Z+
    1320:	01 10       	cpse	r0, r1
    1322:	d8 f7       	brcc	.-10     	; 0x131a <strnlen+0x2>
    1324:	80 95       	com	r24
    1326:	90 95       	com	r25
    1328:	8e 0f       	add	r24, r30
    132a:	9f 1f       	adc	r25, r31
    132c:	08 95       	ret

0000132e <fputc>:
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	fb 01       	movw	r30, r22
    1338:	23 81       	ldd	r18, Z+3	; 0x03
    133a:	21 fd       	sbrc	r18, 1
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <fputc+0x16>
    133e:	8f ef       	ldi	r24, 0xFF	; 255
    1340:	9f ef       	ldi	r25, 0xFF	; 255
    1342:	2c c0       	rjmp	.+88     	; 0x139c <fputc+0x6e>
    1344:	22 ff       	sbrs	r18, 2
    1346:	16 c0       	rjmp	.+44     	; 0x1374 <fputc+0x46>
    1348:	46 81       	ldd	r20, Z+6	; 0x06
    134a:	57 81       	ldd	r21, Z+7	; 0x07
    134c:	24 81       	ldd	r18, Z+4	; 0x04
    134e:	35 81       	ldd	r19, Z+5	; 0x05
    1350:	42 17       	cp	r20, r18
    1352:	53 07       	cpc	r21, r19
    1354:	44 f4       	brge	.+16     	; 0x1366 <fputc+0x38>
    1356:	a0 81       	ld	r26, Z
    1358:	b1 81       	ldd	r27, Z+1	; 0x01
    135a:	9d 01       	movw	r18, r26
    135c:	2f 5f       	subi	r18, 0xFF	; 255
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
    1360:	31 83       	std	Z+1, r19	; 0x01
    1362:	20 83       	st	Z, r18
    1364:	8c 93       	st	X, r24
    1366:	26 81       	ldd	r18, Z+6	; 0x06
    1368:	37 81       	ldd	r19, Z+7	; 0x07
    136a:	2f 5f       	subi	r18, 0xFF	; 255
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	37 83       	std	Z+7, r19	; 0x07
    1370:	26 83       	std	Z+6, r18	; 0x06
    1372:	14 c0       	rjmp	.+40     	; 0x139c <fputc+0x6e>
    1374:	8b 01       	movw	r16, r22
    1376:	ec 01       	movw	r28, r24
    1378:	fb 01       	movw	r30, r22
    137a:	00 84       	ldd	r0, Z+8	; 0x08
    137c:	f1 85       	ldd	r31, Z+9	; 0x09
    137e:	e0 2d       	mov	r30, r0
    1380:	09 95       	icall
    1382:	89 2b       	or	r24, r25
    1384:	e1 f6       	brne	.-72     	; 0x133e <fputc+0x10>
    1386:	d8 01       	movw	r26, r16
    1388:	16 96       	adiw	r26, 0x06	; 6
    138a:	8d 91       	ld	r24, X+
    138c:	9c 91       	ld	r25, X
    138e:	17 97       	sbiw	r26, 0x07	; 7
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	17 96       	adiw	r26, 0x07	; 7
    1394:	9c 93       	st	X, r25
    1396:	8e 93       	st	-X, r24
    1398:	16 97       	sbiw	r26, 0x06	; 6
    139a:	ce 01       	movw	r24, r28
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	08 95       	ret

000013a6 <__ultoa_invert>:
    13a6:	fa 01       	movw	r30, r20
    13a8:	aa 27       	eor	r26, r26
    13aa:	28 30       	cpi	r18, 0x08	; 8
    13ac:	51 f1       	breq	.+84     	; 0x1402 <__ultoa_invert+0x5c>
    13ae:	20 31       	cpi	r18, 0x10	; 16
    13b0:	81 f1       	breq	.+96     	; 0x1412 <__ultoa_invert+0x6c>
    13b2:	e8 94       	clt
    13b4:	6f 93       	push	r22
    13b6:	6e 7f       	andi	r22, 0xFE	; 254
    13b8:	6e 5f       	subi	r22, 0xFE	; 254
    13ba:	7f 4f       	sbci	r23, 0xFF	; 255
    13bc:	8f 4f       	sbci	r24, 0xFF	; 255
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	af 4f       	sbci	r26, 0xFF	; 255
    13c2:	b1 e0       	ldi	r27, 0x01	; 1
    13c4:	3e d0       	rcall	.+124    	; 0x1442 <__ultoa_invert+0x9c>
    13c6:	b4 e0       	ldi	r27, 0x04	; 4
    13c8:	3c d0       	rcall	.+120    	; 0x1442 <__ultoa_invert+0x9c>
    13ca:	67 0f       	add	r22, r23
    13cc:	78 1f       	adc	r23, r24
    13ce:	89 1f       	adc	r24, r25
    13d0:	9a 1f       	adc	r25, r26
    13d2:	a1 1d       	adc	r26, r1
    13d4:	68 0f       	add	r22, r24
    13d6:	79 1f       	adc	r23, r25
    13d8:	8a 1f       	adc	r24, r26
    13da:	91 1d       	adc	r25, r1
    13dc:	a1 1d       	adc	r26, r1
    13de:	6a 0f       	add	r22, r26
    13e0:	71 1d       	adc	r23, r1
    13e2:	81 1d       	adc	r24, r1
    13e4:	91 1d       	adc	r25, r1
    13e6:	a1 1d       	adc	r26, r1
    13e8:	20 d0       	rcall	.+64     	; 0x142a <__ultoa_invert+0x84>
    13ea:	09 f4       	brne	.+2      	; 0x13ee <__ultoa_invert+0x48>
    13ec:	68 94       	set
    13ee:	3f 91       	pop	r19
    13f0:	2a e0       	ldi	r18, 0x0A	; 10
    13f2:	26 9f       	mul	r18, r22
    13f4:	11 24       	eor	r1, r1
    13f6:	30 19       	sub	r19, r0
    13f8:	30 5d       	subi	r19, 0xD0	; 208
    13fa:	31 93       	st	Z+, r19
    13fc:	de f6       	brtc	.-74     	; 0x13b4 <__ultoa_invert+0xe>
    13fe:	cf 01       	movw	r24, r30
    1400:	08 95       	ret
    1402:	46 2f       	mov	r20, r22
    1404:	47 70       	andi	r20, 0x07	; 7
    1406:	40 5d       	subi	r20, 0xD0	; 208
    1408:	41 93       	st	Z+, r20
    140a:	b3 e0       	ldi	r27, 0x03	; 3
    140c:	0f d0       	rcall	.+30     	; 0x142c <__ultoa_invert+0x86>
    140e:	c9 f7       	brne	.-14     	; 0x1402 <__ultoa_invert+0x5c>
    1410:	f6 cf       	rjmp	.-20     	; 0x13fe <__ultoa_invert+0x58>
    1412:	46 2f       	mov	r20, r22
    1414:	4f 70       	andi	r20, 0x0F	; 15
    1416:	40 5d       	subi	r20, 0xD0	; 208
    1418:	4a 33       	cpi	r20, 0x3A	; 58
    141a:	18 f0       	brcs	.+6      	; 0x1422 <__ultoa_invert+0x7c>
    141c:	49 5d       	subi	r20, 0xD9	; 217
    141e:	31 fd       	sbrc	r19, 1
    1420:	40 52       	subi	r20, 0x20	; 32
    1422:	41 93       	st	Z+, r20
    1424:	02 d0       	rcall	.+4      	; 0x142a <__ultoa_invert+0x84>
    1426:	a9 f7       	brne	.-22     	; 0x1412 <__ultoa_invert+0x6c>
    1428:	ea cf       	rjmp	.-44     	; 0x13fe <__ultoa_invert+0x58>
    142a:	b4 e0       	ldi	r27, 0x04	; 4
    142c:	a6 95       	lsr	r26
    142e:	97 95       	ror	r25
    1430:	87 95       	ror	r24
    1432:	77 95       	ror	r23
    1434:	67 95       	ror	r22
    1436:	ba 95       	dec	r27
    1438:	c9 f7       	brne	.-14     	; 0x142c <__ultoa_invert+0x86>
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	61 05       	cpc	r22, r1
    143e:	71 05       	cpc	r23, r1
    1440:	08 95       	ret
    1442:	9b 01       	movw	r18, r22
    1444:	ac 01       	movw	r20, r24
    1446:	0a 2e       	mov	r0, r26
    1448:	06 94       	lsr	r0
    144a:	57 95       	ror	r21
    144c:	47 95       	ror	r20
    144e:	37 95       	ror	r19
    1450:	27 95       	ror	r18
    1452:	ba 95       	dec	r27
    1454:	c9 f7       	brne	.-14     	; 0x1448 <__ultoa_invert+0xa2>
    1456:	62 0f       	add	r22, r18
    1458:	73 1f       	adc	r23, r19
    145a:	84 1f       	adc	r24, r20
    145c:	95 1f       	adc	r25, r21
    145e:	a0 1d       	adc	r26, r0
    1460:	08 95       	ret

00001462 <__prologue_saves__>:
    1462:	2f 92       	push	r2
    1464:	3f 92       	push	r3
    1466:	4f 92       	push	r4
    1468:	5f 92       	push	r5
    146a:	6f 92       	push	r6
    146c:	7f 92       	push	r7
    146e:	8f 92       	push	r8
    1470:	9f 92       	push	r9
    1472:	af 92       	push	r10
    1474:	bf 92       	push	r11
    1476:	cf 92       	push	r12
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	ca 1b       	sub	r28, r26
    148c:	db 0b       	sbc	r29, r27
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	09 94       	ijmp

0000149a <__epilogue_restores__>:
    149a:	2a 88       	ldd	r2, Y+18	; 0x12
    149c:	39 88       	ldd	r3, Y+17	; 0x11
    149e:	48 88       	ldd	r4, Y+16	; 0x10
    14a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    14a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    14a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    14a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    14a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    14aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    14ac:	b9 84       	ldd	r11, Y+9	; 0x09
    14ae:	c8 84       	ldd	r12, Y+8	; 0x08
    14b0:	df 80       	ldd	r13, Y+7	; 0x07
    14b2:	ee 80       	ldd	r14, Y+6	; 0x06
    14b4:	fd 80       	ldd	r15, Y+5	; 0x05
    14b6:	0c 81       	ldd	r16, Y+4	; 0x04
    14b8:	1b 81       	ldd	r17, Y+3	; 0x03
    14ba:	aa 81       	ldd	r26, Y+2	; 0x02
    14bc:	b9 81       	ldd	r27, Y+1	; 0x01
    14be:	ce 0f       	add	r28, r30
    14c0:	d1 1d       	adc	r29, r1
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	ed 01       	movw	r28, r26
    14ce:	08 95       	ret

000014d0 <_exit>:
    14d0:	f8 94       	cli

000014d2 <__stop_program>:
    14d2:	ff cf       	rjmp	.-2      	; 0x14d2 <__stop_program>
